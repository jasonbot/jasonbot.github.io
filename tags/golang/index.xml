<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Jason Scheirer</title>
    <link>https://www.jasonscheirer.com/tags/golang/</link>
    <description>Recent content in Golang on Jason Scheirer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 24 May 2025 00:00:00 -0800</lastBuildDate><atom:link href="https://www.jasonscheirer.com/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Chains: My Attempt at an Itertools for Go</title>
      <link>https://www.jasonscheirer.com/weblog/chains/</link>
      <pubDate>Sat, 24 May 2025 00:00:00 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/chains/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Top Matter&lt;/strong&gt;: &lt;a href=&#34;https://github.com/jasonbot/chains&#34;&gt;GitHub for the library&lt;/a&gt;, &lt;a href=&#34;https://pkg.go.dev/github.com/jasonbot/chains&#34;&gt;doc for the library&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It&amp;rsquo;s been six months since I&amp;rsquo;ve done this, but I&amp;rsquo;m finally writing about it!&lt;/p&gt;
&lt;p&gt;Go &lt;a href=&#34;https://go.dev/blog/range-functions&#34;&gt;recently added proper iterator support&lt;/a&gt; to the language, which is something of an improvement over the prior pattern of spinning up a goroutine and communicating via a channel in a &lt;code&gt;range&lt;/code&gt; to get a stream of values.&lt;/p&gt;
&lt;p&gt;One of the tools in my toolbox that I use in coding interviews and some light data processing work is &lt;a href=&#34;https://docs.python.org/3/library/itertools.html&#34;&gt;Python&amp;rsquo;s itertools&lt;/a&gt;. The nice thing about this library is it gives you a good set of conceptual building blocks to use as a frame around a problem and a fairly clean way to use them. Once you&amp;rsquo;re familiar with, say, &lt;code&gt;combinations&lt;/code&gt; and &lt;code&gt;permutations&lt;/code&gt; you can take a harder problem and decompose it into those recognizable parts and then have a stdlib function that&amp;rsquo;s already bug free and readily available.&lt;/p&gt;
&lt;p&gt;While I was inspired to author this, I was writing a &lt;em&gt;lot&lt;/em&gt; of Ruby and Typescript. Both Ruby and Javascript do processing over lists in a very chainy way; for example&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;entries&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;thing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(([&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;startsWith&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;data-&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(([&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sr&#34;&gt;/^data-/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ruby likes to add lots of &lt;a href=&#34;https://docs.ruby-lang.org/en/2.5.0/Array.html#method-i-compact&#34;&gt;compact&lt;/a&gt; calls etc. as well to handle bad data.&lt;/p&gt;
&lt;p&gt;Having this syntactic sugar makes it easier to write complex logic, and it also helps conform the logic to one&amp;rsquo;s brain.&lt;/p&gt;
&lt;p&gt;Anyway, Go has iterators now, and I like using iterators. The first thing I wanted was my brain poisoning syntactic sugar from Ruby/Typescript; how could I go about doing &lt;code&gt;X.Filter(g =&amp;gt; g &amp;gt; 100).Map(h =&amp;gt; fmt.Sprintf(&amp;quot;Hello, %v!&amp;quot;, h))&lt;/code&gt; in Go?&lt;/p&gt;
&lt;h1 id=&#34;the-cookbook-is-the-requirements-doc&#34;&gt;The Cookbook is the Requirements Doc&lt;/h1&gt;
&lt;p&gt;Once I had a framework cooking I could start thinking of examples. &lt;a href=&#34;https://github.com/jasonbot/chains/blob/main/cookbook_test.go&#34;&gt;My test suite took a backdoor to being a test of cases I cared about&lt;/a&gt;, in cookbook form.&lt;/p&gt;
&lt;p&gt;Some things I wanted:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Map/Filter/Reduce&lt;/li&gt;
&lt;li&gt;Cleanups (compacts, nonzeroes, etc)&lt;/li&gt;
&lt;li&gt;Combinatorics&lt;/li&gt;
&lt;li&gt;Higher-level stream processing (various merges)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mapfilterreduce&#34;&gt;Map/Filter/Reduce&lt;/h2&gt;
&lt;p&gt;Not much to write home about here, anyone can write these and I encourage each person to do it themselves using Go iterators. There&amp;rsquo;s the usual suspects here along with various types of &lt;code&gt;Reduce&lt;/code&gt; that all boil down to the base &lt;a href=&#34;https://pkg.go.dev/github.com/jasonbot/chains#Accumulate&#34;&gt;&lt;code&gt;Accumulate&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;cleanups&#34;&gt;Cleanups&lt;/h2&gt;
&lt;p&gt;Similar to the above, pretty trivial to write. Can even treat these as specific cases of &lt;code&gt;Filter&lt;/code&gt;. &lt;a href=&#34;https://pkg.go.dev/github.com/jasonbot/chains#Compact&#34;&gt;&lt;code&gt;Compact&lt;/code&gt; is one such case&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;basic-tests&#34;&gt;Basic Tests&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;There&amp;rsquo;s an &lt;code&gt;Any&lt;/code&gt; and an &lt;code&gt;All&lt;/code&gt; for testing for conditions satisfied by the entire sequence; &lt;code&gt;Count&lt;/code&gt; gets just the length. All are useful with &lt;code&gt;Tee&lt;/code&gt;!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;slicing&#34;&gt;Slicing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;First&lt;/code&gt; and &lt;code&gt;Last&lt;/code&gt; do what they say; &lt;code&gt;FirstAndRest&lt;/code&gt; is the CAR/CDR you didn&amp;rsquo;t know you needed.&lt;/li&gt;
&lt;li&gt;You can &lt;code&gt;TakeWhile&lt;/code&gt; and &lt;code&gt;DropUntil&lt;/code&gt; to start/end at a particular point.&lt;/li&gt;
&lt;li&gt;You can &lt;code&gt;Repeat&lt;/code&gt; an item N times, &lt;code&gt;Rotate&lt;/code&gt; a slice so the first N items are moved to the back, &lt;code&gt;Repeat&lt;/code&gt; each element N times, and &lt;code&gt;Cycle&lt;/code&gt; the iterator which is just infinite repeats.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ruby-silliness&#34;&gt;Ruby Silliness&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/jasonbot/chains#Flatten&#34;&gt;&lt;code&gt;Flatten&lt;/code&gt; takes an iterable of iterables and turns it into a flat iterable&lt;/a&gt;, but it doesn&amp;rsquo;t do it to arbitrary levels of nesting like Ruby does. There are rules here dude.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/jasonbot/chains#Tap&#34;&gt;&lt;code&gt;Tap&lt;/code&gt; is largely useless&lt;/a&gt;, kind of like a forEach or a visitor that passes the item along.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/jasonbot/chains#Partition&#34;&gt;&lt;code&gt;Partition&lt;/code&gt; splits an iterator into two&lt;/a&gt; based on a partition function, allowing you to e.g. split good/bad inputs into separate pipelines. A simpler &lt;a href=&#34;https://pkg.go.dev/github.com/jasonbot/chains#Uniq&#34;&gt;&lt;code&gt;Uniq&lt;/code&gt;&lt;/a&gt; function just returns the first value of each key grouping instead.&lt;/li&gt;
&lt;li&gt;Similarly, &lt;a href=&#34;https://pkg.go.dev/github.com/jasonbot/chains#GroupBy&#34;&gt;&lt;code&gt;GroupBy&lt;/code&gt;&lt;/a&gt; takes an ordered set of items and &amp;ldquo;bins&amp;rdquo; them based on a key function, allowing you to &lt;code&gt;for key, vals := range Partition { for val := range vals { ...} }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;There&amp;rsquo;s also a &lt;code&gt;Tee&lt;/code&gt; to get a tear-off copy of the iterator.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;combinatorics&#34;&gt;Combinatorics&lt;/h2&gt;
&lt;p&gt;I wanted &lt;code&gt;combinations&lt;/code&gt; and &lt;code&gt;permutations&lt;/code&gt;, so those were high on the list. I found myself writing the code more and more generically as I went along, eventually ending with the mess that is &lt;a href=&#34;https://github.com/jasonbot/chains/blob/main/combinatorics.go&#34;&gt;&lt;code&gt;combinatorics.go&lt;/code&gt;&lt;/a&gt;. Funnily enough, each combinatorial case was some combination of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Length (one, fixed, variable)&lt;/li&gt;
&lt;li&gt;Ordering (in order of occurrence, free variance)&lt;/li&gt;
&lt;li&gt;Repetition of elements (on/off)&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Function&lt;/th&gt;
          &lt;th&gt;Length&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;Ordering&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;Repetition&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;(Identity function, superfluous)&lt;/td&gt;
          &lt;td&gt;N (Length of inputs)&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Fixed&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;No&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;OrderedPermutationsOfLength&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;M (User-specified)&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Fixed&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;No&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;AllOrderedPermutations&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;1&amp;hellip;N (Length of inputs)&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Fixed&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;No&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;OrderedPermutationsToLength&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;1&amp;hellip;M (User-specified)&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Fixed&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;No&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;Permutations&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;N (Length of inputs)&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Free&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;No&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;PermutationsOfLength&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;M (User-specified)&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Free&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;No&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;AllPermutations&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;1&amp;hellip;N (Length of inputs)&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Free&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;No&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;PermutationsToLength&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;1&amp;hellip;M (User-specified)&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Free&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;No&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;Combinations&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;N (Length of inputs)&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Free&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Yes&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;CombinationsOfLength&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;M (User-specified)&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Free&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Yes&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;AllCombinations&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;1&amp;hellip;N (Length of inputs)&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Free&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Yes&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;CombinationsToLength&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;1&amp;hellip;M (User-specified)&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Free&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Yes&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;windows&#34;&gt;Windows&lt;/h2&gt;
&lt;p&gt;Not as high-level as Combinatorics, but I wanted to take a window of N at as time.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Function&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;Length&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;Overlaps&lt;/th&gt;
          &lt;th&gt;Examples&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;Windows&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;1&amp;hellip;M&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;No&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;{1, 2, 3}, 2 -&amp;gt; {1, 2}, {3}&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;SlidingWindows&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;M&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Yes&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;{1, 2, 3}, 2 -&amp;gt; {1, 2}, {2, 3}&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;higher-level-chaining&#34;&gt;Higher-Level Chaining&lt;/h2&gt;
&lt;p&gt;I like to concatenate iterators sometimes; e.g. to process the results of two tasks in a single queue. &lt;code&gt;itertools.chain&lt;/code&gt; works in Python, it was a breeze to write here as well.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;chains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;FlattenArgs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;chains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Each&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;/// Gives you 1, 2, 3, 4, 5, 6
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Got the base case down.&lt;/p&gt;
&lt;h2 id=&#34;things-i-never-had-in-itertools-merging-iterators&#34;&gt;Things I Never Had in Itertools: Merging Iterators&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/library/itertools.html#itertools.chain&#34;&gt;&lt;code&gt;itertools.chain&lt;/code&gt; works in a pinch for &amp;ldquo;gluing&amp;rdquo; together iterators in Python&lt;/a&gt;, and that was pretty trivial to write (&lt;a href=&#34;https://pkg.go.dev/github.com/jasonbot/chains#Flatten&#34;&gt;I called it &amp;ldquo;Flatten&amp;rdquo;&lt;/a&gt; because the first iteration took an iterator of iterators, thanks to Ruby/Javascript brain, &lt;a href=&#34;https://pkg.go.dev/github.com/jasonbot/chains#FlattenArgs&#34;&gt;then made one that took variadic iterator args as &lt;code&gt;FlattenArgs&lt;/code&gt;&lt;/a&gt; too). Some common use cases I find myself writing a lot just aren&amp;rsquo;t in the stdlib in Python. They generally involve taking many iterators and unifying then in ways dependent on the structure of the iterators themselves; either by length or by value.&lt;/p&gt;
&lt;h3 id=&#34;combining-streams-fairly&#34;&gt;Combining Streams &amp;ldquo;Fairly&amp;rdquo;&lt;/h3&gt;
&lt;p&gt;Another use case is Round-Robining a set of iterators until they are all exhausted. We&amp;rsquo;ve got a set of inputs and want to consume from all of them until we run out. For that, there&amp;rsquo;s &lt;a href=&#34;https://github.com/jasonbot/chains/blob/main/cookbook_test.go#L261-L272&#34;&gt;&lt;code&gt;RoundRobin&lt;/code&gt;&lt;/a&gt;, which works exactly as expected. Each iterator can have a variable number of entries but all entries are considered by index, so we don&amp;rsquo;t exhaust one before going to the next but try to consume them all equally.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;item1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;item2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;item3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;RoundRobin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Each&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Each&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Each&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// Equivalent of ...[]int{1, 5, 10, 2, 6, 11, 3, 7, 12, 4, 8, 9}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;merging-sorted-streams&#34;&gt;Merging Sorted Streams&lt;/h3&gt;
&lt;p&gt;Use case: I have 3000 CSVs, each has rows in order of date. The time ranges &lt;em&gt;may&lt;/em&gt; overlap in some cases. I wanted a unified stream of all the rows in order. For that, I wrote &lt;a href=&#34;https://github.com/jasonbot/chains/blob/main/cookbook_test.go#L231-L259&#34;&gt;&lt;code&gt;Merged&lt;/code&gt;&lt;/a&gt;, which is at its core a pull-on-demand heap. Once the smallest value has been pulled off the heap, yield it, then grab the next value from the iterator that provided the value to place on the heap.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;item1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;item2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;item3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;expectedSlice&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Merged&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Each&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Each&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Each&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// Equivalent of ...[]int{1, 1, 2, 3, 4, 4, 5, 5, 6, 7, 8, 10}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;my-journey-of-discovery-got-me-using-my-favored-pattern-in-a-more-go-like-way-in-go&#34;&gt;My Journey Of Discovery Got Me Using My Favored Pattern In A More Go-Like Way In Go&lt;/h1&gt;
&lt;h2 id=&#34;starting-out-the-chain&#34;&gt;Starting Out: The &lt;code&gt;Chain&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;I wanted to be able to chain calls like I can in &lt;em&gt;those other&lt;/em&gt; languages, so the first thing I thought to do was design some sort of struct or interface with various &lt;code&gt;.Map&lt;/code&gt;/&lt;code&gt;.Reduce&lt;/code&gt;/&lt;code&gt;.Filter&lt;/code&gt;/etc methods &amp;ndash; so like&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Chainable&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mapFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Chainable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;Reduce&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mapFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Chainable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;Filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mapFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Chainable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Immediately there&amp;rsquo;s a problem because Interfaces can&amp;rsquo;t use generics in Go, so we do a struct instead:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Chainable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Chainable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mapFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Chainable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;Reduce&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mapFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Chainable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Chainable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;Filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mapFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Chainable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Chainable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This sort of works! You can see in the &lt;a href=&#34;https://pkg.go.dev/github.com/jasonbot/chains#IterableSequence&#34;&gt;&lt;code&gt;IterableSequence&lt;/code&gt; type &lt;/a&gt; we do this. But to do two types (say we&amp;rsquo;re mapping from &lt;code&gt;int&lt;/code&gt; to &lt;code&gt;string&lt;/code&gt;), we have to have an &lt;code&gt;IterableSequence&lt;/code&gt; that does two, and so &lt;a href=&#34;https://pkg.go.dev/github.com/jasonbot/chains#IterableSequence2&#34;&gt;&lt;code&gt;IterableSequence2&lt;/code&gt; was born&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now how to get from an &lt;code&gt;IterableSequence&lt;/code&gt; to an &lt;code&gt;IterableSequence2&lt;/code&gt;? I decided on a top-level function to create &lt;a href=&#34;https://pkg.go.dev/github.com/jasonbot/chains#ChainJunction&#34;&gt;a type called a &lt;code&gt;Junction&lt;/code&gt;&lt;/a&gt; to go from a one-typed chainable to a two-typed one. Now what if we need a third type? This is getting messy.&lt;/p&gt;
&lt;p&gt;This pattern works for simple cases just fine, but it falls down once we get into the variadic world. Go&amp;rsquo;s obviously stunted-on-purpose generics are preventing us from doing this syntactic sugar in a clean way, but it is also suggesting a different way to do it.&lt;/p&gt;
&lt;p&gt;I was in love with my ability to do chained iterators, but they got clunky. Go generics only apply to functions and you can&amp;rsquo;t template an interface. So while &lt;code&gt;X.Filter(...).Map(...)&lt;/code&gt; is fun and cute, in Go you&amp;rsquo;re better off doing something like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;filterFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mapfunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;results&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;hellip;which, quite frankly, feels a lot more Go-like and less foreign than the cute way we do it in other languages. You can see I gave up on chaining in the above examples and just do individual iterators.&lt;/p&gt;
&lt;p&gt;And so, instead I found myself using single iterators via &lt;a href=&#34;https://pkg.go.dev/github.com/jasonbot/chains#Each&#34;&gt;the &lt;code&gt;Each&lt;/code&gt; adapter function&lt;/a&gt; and back to slices &lt;a href=&#34;https://pkg.go.dev/github.com/jasonbot/chains#ToSlice&#34;&gt;with &lt;code&gt;ToSlice&lt;/code&gt;&lt;/a&gt;. As I got further into implementing the various functions I wanted, I moved away from the &lt;code&gt;Chainable&lt;/code&gt; pattern into simple functions. It&amp;rsquo;s still ugly to do &lt;code&gt;Map(Filter(Reduce(...)))&lt;/code&gt; because the pipeline appears in opposite order but doing each as an assignment keeps the order at the expense of slightly more verbosity. It&amp;rsquo;s not as &lt;em&gt;aesthetic&lt;/em&gt; but it works.&lt;/p&gt;
&lt;p&gt;I think the most practical example I can give is the test in the cookbook that generates a sequence of fights in Street Fighter. If you play as a playable character you can fight all the other playable characters &lt;em&gt;and&lt;/em&gt; each of the bosses. You &lt;em&gt;cannot&lt;/em&gt; play as the bosses. As such, we have two separate matchup types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Player v Player, unordered&lt;/li&gt;
&lt;li&gt;Player v Boss, unordered&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And gluing the two together is pretty clean:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;regularFighters&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Ryu&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Chun Li&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Guile&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;E. Honda&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;bosses&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Sagat&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Vega&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;M. Bison&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;allExpectedFights&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;Ryu vs. Chun Li&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;Ryu vs. Guile&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;Ryu vs. E. Honda&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;Chun Li vs. Guile&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;Chun Li vs. E. Honda&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;Guile vs. E. Honda&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;Ryu vs. Sagat&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;Chun Li vs. Sagat&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;Guile vs. Sagat&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;E. Honda vs. Sagat&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;Ryu vs. Vega&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;Chun Li vs. Vega&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;Guile vs. Vega&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;E. Honda vs. Vega&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;Ryu vs. M. Bison&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;Chun Li vs. M. Bison&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;Guile vs. M. Bison&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;E. Honda vs. M. Bison&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Each combination of players without replacement
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;matchups&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;CombinationsOfLength&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;regularFighters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;singlePlayerFights&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;matchups&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;names&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34; vs. &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Trick to get pairwise fights from two lists -- lengthen the one by
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// the number of elements in the other, then cycle.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// e.g. if you have P1, P2, P3 and B1, B2:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Cycle --&amp;gt; P1, P2, P3, P1, P2, P3, P1, ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Lengthen --&amp;gt; B1, B1, B1, B2, B2, B2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//      (each boss is repeated number of players times)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bossMatchups&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Zip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;Cycle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Each&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;regularFighters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;Lengthen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nf&#34;&gt;Each&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bosses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;regularFighters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;bossMatchupFights&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Map2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bossMatchups&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;p2&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34; vs. &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Combine all iterators into one
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;allFightsCombined&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;FlattenArgs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;singlePlayerFights&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bossMatchupFights&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;allFights&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ToSlice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;allFightsCombined&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;slices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Equal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;allFights&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;allExpectedFights&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Fatalf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%v != %v&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;allFights&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;allExpectedFights&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once I started doing things the Go way, it really increased the pace of development as well. Being able to implement each iterator as a simple function meant I could focus on implementation and not boilerplate. Constraining myself to &lt;code&gt;iter.Seq&lt;/code&gt; and &lt;code&gt;iter.Seq2&lt;/code&gt; relieved me of the analysis paralysis of variadic iterators: one value, and when it made sense, two.&lt;/p&gt;
&lt;h1 id=&#34;dont-use-this-as-a-library&#34;&gt;Don&amp;rsquo;t Use This As A Library&lt;/h1&gt;
&lt;p&gt;I&amp;rsquo;ve made this available as an importable library, but many of these patterns are easier to just copy and paste into your code. They should also be inspiration: this is a fun problem to solve! Solve it yourself!&lt;/p&gt;
</description><category domain="https://www.jasonscheirer.com//tags/golang">golang</category>
      <category domain="https://www.jasonscheirer.com//tags/programming">programming</category>
      
    </item>
    
    <item>
      <title>Classicube at Work</title>
      <link>https://www.jasonscheirer.com/weblog/playing-classicube-at-work/</link>
      <pubDate>Wed, 20 Nov 2024 08:00:00 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/playing-classicube-at-work/</guid>
      <description>&lt;h1 id=&#34;problem-space&#34;&gt;Problem Space&lt;/h1&gt;
&lt;p&gt;At &lt;a href=&#34;https://www.academia.edu/&#34;&gt;my new job&lt;/a&gt;, my new team engages in a team activity: every other week we get together for 30 minutes to play a game together online. We&amp;rsquo;re mixed hybrid, meaning about half of us work in office and half of us are grandfathered/exceptioned in to working remotely. this means we can&amp;rsquo;t play a board/card game in person, but has to be procurable over the internet in a Zoom call.&lt;/p&gt;
&lt;p&gt;It is now my turn to host a game.&lt;/p&gt;
&lt;h1 id=&#34;picking-a-game&#34;&gt;Picking a Game&lt;/h1&gt;
&lt;p&gt;I&amp;rsquo;m sure everyone is tired of playing Werewolf and variants at this point. I wanted something easy to pick up in the spirit of the games we&amp;rsquo;ve played on game days since I joined:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Casual&lt;/li&gt;
&lt;li&gt;Multiplayer&lt;/li&gt;
&lt;li&gt;Browser-based&lt;/li&gt;
&lt;li&gt;Very low barrier to entry&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I don&amp;rsquo;t want to pick Yet Another Card Game. That sounds boring.&lt;/p&gt;
&lt;h1 id=&#34;minecraft&#34;&gt;Minecraft?&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/@ActionRetro&#34;&gt;One retro YouTuber I like&lt;/a&gt; pretty consistently plays &lt;a href=&#34;https://www.classicube.net/&#34;&gt;ClassiCube&lt;/a&gt; on the hardware devices he features in his videos. This seemed like a pretty good option: lower software requirements then MC Java Edition, as well as not requiring a paid account to play. It even &lt;a href=&#34;https://www.classicube.net/server/play/&#34;&gt;has a browser-based client&lt;/a&gt; that can connect to servers.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ClassiCube/ClassiCube/blob/master/doc/hosting-flask.md&#34;&gt;ClassiCube has documentation on Github for how to run a browser-based session&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This seems pretty easy: you host a web page that has the ClassiCube JS client on it, and then configure it via Javascript in the page&amp;rsquo;s code to connect to your hosted server.&lt;/p&gt;
&lt;h2 id=&#34;of-course-i-have-to-write-software-to-run-software-it-is-my-wont&#34;&gt;Of Course I Have To Write Software to Run Software, It is My Wont&lt;/h2&gt;
&lt;p&gt;The end product I made was &lt;a href=&#34;https://github.com/jasonbot/cube-with-friends&#34;&gt;Cube With Friends on Github&lt;/a&gt;. It&amp;rsquo;s a very easy to set up little program that does all the above manual steps &amp;ndash; at build time it embeds all the resources it needs from the internet into a single Go executable, and has other niceness like overlaying a pre-authored config that turns off ClassiCube authentication so people can join without having ClassiCube accounts.&lt;/p&gt;
&lt;h1 id=&#34;getting-to-it-from-other-computers&#34;&gt;Getting to It From Other Computers&lt;/h1&gt;
&lt;p&gt;Now that I had something running, how do I get other players on here?&lt;/p&gt;
&lt;p&gt;I spun up &lt;code&gt;cube-with-friends&lt;/code&gt; on my laptop and started thinking my way through that problem.&lt;/p&gt;
&lt;h2 id=&#34;hosting-on-the-internet&#34;&gt;Hosting on the Internet&lt;/h2&gt;
&lt;p&gt;I don&amp;rsquo;t want to sacrifice one of my Raspberry Pis to be a permanent host for this app, and I&amp;rsquo;m not going to mess with seeing if I can get to the public IP that my ISP assigns me.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t want to spin up a new VM on GCP and assign it a Real Internet IP Address and do all the work of exposing a service to the world if I can help it either.&lt;/p&gt;
&lt;h2 id=&#34;hosting-on-tailnet&#34;&gt;Hosting on Tailnet&lt;/h2&gt;
&lt;p&gt;Here comes an idea: my employer pays for a Tailscale corporate account, and all of our dev machines belong to the work tailnet. This is good, I can just point everyone to my work Mac.&lt;/p&gt;
&lt;h3 id=&#34;i-dont-want-to-put-a-personal-device-on-the-work-tailnet&#34;&gt;I Don&amp;rsquo;t Want to Put a Personal Device on the Work Tailnet&lt;/h3&gt;
&lt;p&gt;My Raspberry Pi Collection has begun to dwindle, and I am not a fan of putting personal devices on work networks anyway.&lt;/p&gt;
&lt;h3 id=&#34;my-work-mac-has-a-firewall-i-cant-disable&#34;&gt;My Work Mac Has a Firewall I Can&amp;rsquo;t Disable&lt;/h3&gt;
&lt;p&gt;As is corporate policy, all of our work laptops have a firewall we can&amp;rsquo;t turn off. I can run Cube with Friends locally but the TCP ports are blocked.&lt;/p&gt;
&lt;h3 id=&#34;i-dont-want-to-ask-the-infra-team-how-to-host-a-minecraft-server-thats-embarrassing&#34;&gt;I Don&amp;rsquo;t Want to ask the Infra Team How to Host a Minecraft Server, That&amp;rsquo;s Embarrassing&lt;/h3&gt;
&lt;p&gt;I could host a machine on the Tailnet on our corporate Infrastructure, but I&amp;rsquo;m not on the infra team and I don&amp;rsquo;t know how to do that. I also don&amp;rsquo;t think I&amp;rsquo;d get buy-in for that. I&amp;rsquo;ll save my goodwill for some other day.&lt;/p&gt;
&lt;h2 id=&#34;running-a-non-firewalled-machine-how-about-linux&#34;&gt;Running a Non-Firewalled Machine: How About Linux?&lt;/h2&gt;
&lt;h3 id=&#34;rub-some-docker-on-it&#34;&gt;Rub Some Docker on It&lt;/h3&gt;
&lt;p&gt;I quickly threw together a preliminary Dockerfile to make an image of a cube-with-friends instance, and started making progress. Now how to get it on the Tailnet?&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://tailscale.com/kb/1453/quick-guide-docker&#34;&gt;This guide to using docker-compose to make a container join a Tailnet&lt;/a&gt; made me very sad at the complexity involved, but hopeful. I could run a Docker container on Linux, have the container join the Tailnet, and it would not be subject to the macOS firewall on the hardware network interfaces.&lt;/p&gt;
&lt;p&gt;I switched from Docker Desktop to &lt;a href=&#34;https://github.com/abiosoft/colima&#34;&gt;Colima&lt;/a&gt; a few years back &amp;ndash; I&amp;rsquo;ve been moving away from using brand named Docker utils for a while now since 1) Docker has a &lt;a href=&#34;https://www.docker.com/pricing/&#34;&gt;weird licensing tripwire&lt;/a&gt; I don&amp;rsquo;t want to set off and 2) &lt;a href=&#34;https://github.com/containers/&#34;&gt;containers are just a commodity&lt;/a&gt; in 2024 &amp;ndash; I use Podman on all my Linux machines to do containerization.&lt;/p&gt;
&lt;p&gt;Colima just works, and &lt;a href=&#34;https://github.com/abiosoft/colima?tab=readme-ov-file#runtimes&#34;&gt;has multiple personalities&lt;/a&gt; which was useful at my last job for dicking about with k8s and stuff.&lt;/p&gt;
&lt;h3 id=&#34;colima-is-short-for-containers-on-lima&#34;&gt;CoLima is Short for &amp;ldquo;Containers on Lima&amp;rdquo;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/lima-vm/lima&#34;&gt;The Lima Project&lt;/a&gt; implements the underlying functionality of running a Linux VM on macOS that can then host the containers, since containers require &lt;a href=&#34;https://lwn.net/Articles/236038/&#34;&gt;Linux kernel internals&lt;/a&gt; to work (&lt;a href=&#34;https://wiki.freebsd.org/Containers&#34;&gt;or not&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Why not short-circuit the process and just use the VM directly? Why bother with another abstraction layer? I&amp;rsquo;ll just use Lima directly and not make myself sad with the extra abstraction layer that a &lt;code&gt;compose&lt;/code&gt;-based solution im-&amp;hellip;poses.&lt;/p&gt;
&lt;h2 id=&#34;starting-a-new-vm&#34;&gt;Starting a New VM&lt;/h2&gt;
&lt;p&gt;So I:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cloned the repo &lt;code&gt;git clone git@github.com:jasonbot/cube-with-friends.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Started a new VM using &lt;code&gt;lima create default&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;I edited the configuration so that my auto-mounted home drive was &lt;code&gt;writable: true&lt;/code&gt; before launching (this is important if you&amp;rsquo;re keeping the cloned repo on your Mac home dir and not on the VM)&lt;/li&gt;
&lt;li&gt;Installed prereqs: &lt;code&gt;sudo apt install golang mono-runtime&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Ran &lt;code&gt;lima&lt;/code&gt; to get into the VM&lt;/li&gt;
&lt;li&gt;Edited the &lt;code&gt;/etc/hostname&lt;/code&gt; to something memorable&lt;/li&gt;
&lt;li&gt;Restarted the VM&lt;/li&gt;
&lt;li&gt;Went back in via &lt;code&gt;lima&lt;/code&gt; and Installed Tailscale via &lt;code&gt;curl -fsSL https://tailscale.com/install.sh | sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Signed in to tailscale &lt;code&gt;sudo tailscale up&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Ran the cube-with-friends server: &lt;code&gt;go run cmd/server.go&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Opened a browser to &lt;code&gt;http://my-new-machine:5555/&lt;/code&gt; and verified it worked&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;So there we go! Something a little more interesting than playing another card game.&lt;/p&gt;
&lt;p&gt;
&lt;figure&gt;
  &lt;img src=&#34;https://www.jasonscheirer.com/images/playing-classicube-at-work/ss1.png&#34; alt=&#34;Login Screen&#34; /&gt;
&lt;/figure&gt;


&lt;/p&gt;
&lt;p&gt;
&lt;figure&gt;
  &lt;img src=&#34;https://www.jasonscheirer.com/images/playing-classicube-at-work/ss2.png&#34; alt=&#34;Success &amp;ndash; logged in&#34; /&gt;
&lt;/figure&gt;


&lt;/p&gt;
</description><category domain="https://www.jasonscheirer.com//tags/programming">programming</category>
      <category domain="https://www.jasonscheirer.com//tags/work">work</category>
      <category domain="https://www.jasonscheirer.com//tags/golang">golang</category>
      <category domain="https://www.jasonscheirer.com//tags/minecraft">minecraft</category>
      <category domain="https://www.jasonscheirer.com//tags/games">games</category>
      
    </item>
    
    <item>
      <title>The Anime Watcher: Another Game</title>
      <link>https://www.jasonscheirer.com/weblog/the-anime-watcher/</link>
      <pubDate>Wed, 07 Sep 2022 00:00:00 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/the-anime-watcher/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://jasonbot.itch.io/anime-watcher&#34;&gt;I wrote another game game&lt;/a&gt; for a &lt;a href=&#34;https://itch.io/jam/mini-jam-114-anime&#34;&gt;Weekend Game Jam with an Anime theme&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A short bit of interactive fiction.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s Webassembly using &lt;a href=&#34;https://ebiten.org/&#34;&gt;ebitengine&lt;/a&gt;.&lt;/p&gt;


&lt;iframe src=&#34;https://itch.io/embed-upload/6466103?color=161616&#34; allowfullscreen=&#34;&#34; width=&#34;600&#34; height=&#34;420&#34; frameborder=&#34;0&#34;&gt;&lt;a href=&#34;https://jasonbot.itch.io/anime-watcher&#34;&gt;Play The Anime Watcher on itch.io&lt;/a&gt;&lt;/iframe&gt;

</description><category domain="https://www.jasonscheirer.com//tags/golang">golang</category>
      <category domain="https://www.jasonscheirer.com//tags/programming">programming</category>
      <category domain="https://www.jasonscheirer.com//tags/games">games</category>
      <category domain="https://www.jasonscheirer.com//tags/games-by-jason">games-by-jason</category>
      
    </item>
    
    <item>
      <title>Trump Run: A Game</title>
      <link>https://www.jasonscheirer.com/weblog/trump-run/</link>
      <pubDate>Mon, 25 Jul 2022 00:00:00 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/trump-run/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://jasonbot.itch.io/trump-run&#34;&gt;I wrote a game&lt;/a&gt; inspired by &lt;a href=&#34;https://twitter.com/joolsd/status/1541929360441081857&#34;&gt;a tweet&lt;/a&gt; a coworker shared on a work Slack channel a few weeks back.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s Webassembly using &lt;a href=&#34;https://ebiten.org/&#34;&gt;ebitengine&lt;/a&gt;.&lt;/p&gt;

&lt;iframe src=&#34;https://itch.io/embed-upload/6208200?color=262b44&#34; allowfullscreen=&#34;&#34; width=&#34;640&#34; height=&#34;500&#34; frameborder=&#34;0&#34;&gt;&lt;a href=&#34;https://jasonbot.itch.io/trump-run&#34;&gt;Play Trump Run on itch.io&lt;/a&gt;&lt;/iframe&gt;

</description><category domain="https://www.jasonscheirer.com//tags/golang">golang</category>
      <category domain="https://www.jasonscheirer.com//tags/programming">programming</category>
      <category domain="https://www.jasonscheirer.com//tags/games">games</category>
      <category domain="https://www.jasonscheirer.com//tags/games-by-jason">games-by-jason</category>
      
    </item>
    
    <item>
      <title>Little Guys! A Puzzle Game Without Enough Levels</title>
      <link>https://www.jasonscheirer.com/weblog/little-guys/</link>
      <pubDate>Sun, 24 Jul 2022 00:00:00 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/little-guys/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://jasonbot.itch.io/little-guys&#34;&gt;I wrote another small puzzle game&lt;/a&gt; for a &lt;a href=&#34;https://itch.io/jam/mini-jam-111-colors&#34;&gt;Weekend Game Jam with the theme &lt;em&gt;Colors&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s Webassembly using &lt;a href=&#34;https://ebiten.org/&#34;&gt;ebitengine&lt;/a&gt;.&lt;/p&gt;

&lt;iframe src=&#34;https://itch.io/embed-upload/6226779?color=63c64d&#34; allowfullscreen=&#34;&#34; width=&#34;360&#34; height=&#34;380&#34; frameborder=&#34;0&#34;&gt;&lt;a href=&#34;https://jasonbot.itch.io/little-guys&#34;&gt;Play Little Guys (A Puzzle Game) on itch.io&lt;/a&gt;&lt;/iframe&gt;

</description><category domain="https://www.jasonscheirer.com//tags/golang">golang</category>
      <category domain="https://www.jasonscheirer.com//tags/programming">programming</category>
      <category domain="https://www.jasonscheirer.com//tags/games">games</category>
      <category domain="https://www.jasonscheirer.com//tags/games-by-jason">games-by-jason</category>
      
    </item>
    
  </channel>
</rss>
