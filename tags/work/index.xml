<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>work on Jason Scheirer</title>
    <link>https://www.jasonscheirer.com/tags/work/</link>
    <description>Recent content in work on Jason Scheirer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 02 May 2024 00:55:10 -0800</lastBuildDate><atom:link href="https://www.jasonscheirer.com/tags/work/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Job #1 of Codebases is Onboardability</title>
      <link>https://www.jasonscheirer.com/weblog/onboardable-codebases/</link>
      <pubDate>Thu, 02 May 2024 00:55:10 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/onboardable-codebases/</guid>
      <description>&lt;p&gt;I got my first job as a software engineer in 2000, so in 2024 I&amp;rsquo;m pushing a quarter century of being a developer. This is one of the topics I have begun to hold near and dear to my heart.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;absolute first goal&lt;/em&gt; of your codebase is to make it easy to get up and running for a new developer.&lt;/p&gt;
&lt;h1 id=&#34;good-getting-started-resources&#34;&gt;Good Getting Started Resources&lt;/h1&gt;
&lt;p&gt;Your codebase &lt;em&gt;must&lt;/em&gt; have a base readme file with a getting started guide. It must be simple but comprehensive and step-by-step. This must also be kept up-to-date. It should be opinionated. &amp;ldquo;You can do it this way or this other way&amp;rdquo; is only going to spawn a &amp;ldquo;well which way should I do it?????&amp;rdquo; conversation in Slack. If you spend an hour a month grooming this document it will save you person-weeks a month in pairing sessions getting a new developer up and running. It is disrespectful to yourself and others&amp;rsquo; time to be proud enough to think your code is &amp;ldquo;special&amp;rdquo; or you can&amp;rsquo;t be bothered to engage in some form of service to your peers.&lt;/p&gt;
&lt;h1 id=&#34;good-documentation-on-the-deep-stuff&#34;&gt;Good Documentation on the &amp;ldquo;Deep&amp;rdquo; Stuff&lt;/h1&gt;
&lt;p&gt;Code gains complexity, complexity is the demon that makes code unmaintainable. By forcing developers to explain (in documentation) their decisions you 1) make them concrete and force them to be justified (code complete is not complete) 2) throttle developers who code for the sake of coding and make them explain why they did what they did (aside from the wrong reason &amp;ldquo;I like coding&amp;rdquo;).&lt;/p&gt;
&lt;h1 id=&#34;organizational-conventions&#34;&gt;Organizational Conventions&lt;/h1&gt;
&lt;p&gt;Every codebase in the organization should follow conventions so that a new developer is able to get rudimentarily started without any prior knowledge.&lt;/p&gt;
&lt;p&gt;Convention means that skills learned in one place can continue to be used elsewhere, and reduce cognitive load on remembering project-specific quirks when one is in e.g. a firefighting situation.&lt;/p&gt;
&lt;p&gt;When I worked at Nerdwallet, we had this to an absurd degree with our internal tool &lt;code&gt;indy&lt;/code&gt;. You could &lt;code&gt;indy get&lt;/code&gt; a repo, &lt;code&gt;indy build&lt;/code&gt; to produce a deployable artifact, &lt;code&gt;indy test&lt;/code&gt; to run test suites, etc. This was regardless of stack or language, if you were not a Go or Node developer you could still use your &lt;code&gt;indy&lt;/code&gt; knowledge to get up and running in a repo in an unfamiliar stack.&lt;/p&gt;
&lt;p&gt;Usually this is done via Makefiles in most startups I work in. Make sure you have common &lt;code&gt;{install,build,test,run}&lt;/code&gt; targets in every repo.&lt;/p&gt;
&lt;h1 id=&#34;local-development-is-not-optional&#34;&gt;Local Development Is Not Optional&lt;/h1&gt;
&lt;p&gt;Your employer has given you a tremendously powerful laptop. It makes sense so utilize that hardware, and by keeping the running code close to the developer it makes it easier to instrument the code, start and stop individual components in the case of a constellation of services, and more effectively enter feedback loops and end-to-end development in an emotionally secure environment.&lt;/p&gt;
&lt;h1 id=&#34;end&#34;&gt;End&lt;/h1&gt;
&lt;p&gt;I don&amp;rsquo;t care how &amp;ldquo;complex&amp;rdquo; your needs are, your code is not special. You owe the respect to the people around you to make it possible (and, with empathy, &lt;em&gt;easy&lt;/em&gt;) to get started on your team.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Framework Syndrome: Solving Software Problems by Not Solving Them</title>
      <link>https://www.jasonscheirer.com/weblog/framework-syndrome/</link>
      <pubDate>Wed, 01 May 2024 19:55:10 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/framework-syndrome/</guid>
      <description>&lt;p&gt;A common antipattern I&amp;rsquo;ve been both perpetrator of and victim to is what I describe as &lt;em&gt;Framework Syndrome&lt;/em&gt;. This is the act of writing software that does not solve the inherent problem at hand, but provides a poorly designed scaffold in which one is expected to eventually &amp;ldquo;fill in the blanks.&amp;rdquo; That is, in the absence of the ability or desire to make the code do what it needs to do, kick the can down the road while at the same time writing mountains of not particularly useful code that will never be fully excised from the codebase.&lt;/p&gt;
&lt;h1 id=&#34;you-dont-understand-the-problem-so-you-code-around-it&#34;&gt;You Don&amp;rsquo;t Understand the Problem, So You Code Around It&lt;/h1&gt;
&lt;p&gt;It was 2005. I was working on an early SaaS product for automating Intro to Statistical Methods courses for Psychology undergraduates. We had a few functional requirements that I could do easily (user generation, logins, survey generators) and others I simply did not have the ability to do well (namely, actually do the statistical analysis that the grant required). So I worked around it. I added support to slice and dice data and export to Excel. I added natural language date parsing for forms. I polished the hell out of the admin interface. &amp;ldquo;This system is perfect,&amp;rdquo; I declared, &amp;ldquo;we just need someone to plug in the code to do that one thing it was designed to do: statistical methods. You just need to drop it in&amp;hellip;here. See how elegant it is?&amp;rdquo;&lt;/p&gt;
&lt;h1 id=&#34;it-can-do-anything-you-just-have-to-provide-the-code&#34;&gt;&amp;ldquo;It Can Do Anything, You Just Have to Provide the Code&amp;rdquo;&lt;/h1&gt;
&lt;p&gt;Code that does not solve the problem, but provides an environment to add code that solves the problem, is ridiculous on its face. It&amp;rsquo;s just another level of abstraction that was added for the sake of engaging in the act of coding and not taking into mind any practical or business concerns.&lt;/p&gt;
&lt;h1 id=&#34;youve-done-the-fun-part-and-gotten-the-credit-someone-else-does-the-actual-work&#34;&gt;You&amp;rsquo;ve Done the &amp;ldquo;Fun&amp;rdquo; Part and Gotten The Credit, Someone Else Does the Actual Work&lt;/h1&gt;
&lt;p&gt;This is the unfair part of Framework Syndrome, and something that makes me deeply resentful when I run into it. A developer who arrives at the project first &amp;ldquo;designs&amp;rdquo; a solution, runs it past management, declares it Mission Complete, and moves on. The person who has to work within the constraints established by that long-gone person does the actual work that adds the business value, and is ignored by management.&lt;/p&gt;
&lt;h1 id=&#34;let-the-implementors-do-the-framework-clean-up-later&#34;&gt;Let The Implementors do the Framework, Clean Up Later&lt;/h1&gt;
&lt;p&gt;From the resentment part of the section above, I propose that software be written in the following way:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Prototype written by domain expert as messy code&lt;/li&gt;
&lt;li&gt;Professional engineers clean it up, finding common patterns across codebases and standardizing&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By inverting the process from framework to solution to solution to framework, the frameworks themselves will be far more appropriate to the solutions they encompass.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The 2020s and the Post-Office World</title>
      <link>https://www.jasonscheirer.com/weblog/the-post-office-world/</link>
      <pubDate>Mon, 08 Feb 2021 07:00:00 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/the-post-office-world/</guid>
      <description>&lt;p&gt;I moved to the Bay Area 6 years ago after stubbornly refusing to for over a decade before because I wanted to be in the middle of the world of software. 2020 made some of that luster wear off.&lt;/p&gt;
&lt;p&gt;Our office closed at the end of March, 2020, for what was scheduled to be 2 months, which eventually stretched out into over 6 months, until finally we were told to clean off our desks by Thanksgiving as we were permanently remote.&lt;/p&gt;
&lt;p&gt;I did poorly doing remote work in 2012 when I first tried it and didn&amp;rsquo;t look forward to doing it again. A big part of my day was framed around a commute, a large part of my productivity are 3 minute snippets of conversation with random people on the elevator to get an idea for what I could provide my coworkers, the majority of my socialization is in the context of work, and a large part of my sanity was my enthusiasm for figuring out byzantine ways to get around solely by public transit.&lt;/p&gt;
&lt;p&gt;Working from home has been varied as I adjust to it and go through cycles of acceptance, as well as the variance in the openness of the Bay Area. At one point places were open, which was great, and appointment based, which was even better because there was limited admittance and things were empty enough to appreciate in a way we hadn&amp;rsquo;t before. The SF and Oakland Zoos, 2 of my kid&amp;rsquo;s favorite places, were noticeably better experiences until they locked down and shut again.&lt;/p&gt;
&lt;p&gt;Now that I&amp;rsquo;m adjusting to working from home I am noting probably the same things everyone else is: that work/home boundaries are hard, that having a dedicated workspace is essential, and keeping a routine &lt;em&gt;with good sleep hygiene&lt;/em&gt; is absolutely paramount to not breaking down.&lt;/p&gt;
&lt;p&gt;A benefit of the events of 2020 was that I lost over 40 pounds &amp;ndash; no more being too tired to cook 3 nights a week and ordering out. No more eating a $20 lunch in the Financial District at a restaurant every day. No more cocktails on Fridays.&lt;/p&gt;
&lt;p&gt;Another benefit was saving money &amp;ndash; hundreds of dollars a month in eating out, hundreds of dollars in gas, hundreds of dollars on my Clipper card, hundreds of dollars in things like movie tickets and indoor playground fees. With that we were able to save more aggressively, and with our extra time able to do paperwork and visit house showings, so we were able to pounce and buy a home.&lt;/p&gt;
&lt;p&gt;I was a little reluctant to buy a home in the Bay Area initially because &amp;ldquo;everyone is leaving,&amp;rdquo; but exoduses have happened here before and I honestly don&amp;rsquo;t anticipate things will stay like this forever, at the worst we&amp;rsquo;ll have to wait a decade. Our lifestyles won&amp;rsquo;t go entirely back to 2019, but people like living in cities and having interesting things to do nearby, and I&amp;rsquo;m sure even if the lucky Millennials who can afford it are permanently committing to the suburbs the next generation will cycle back and flock back to major cities and their surroundings.&lt;/p&gt;
&lt;p&gt;My new office is my garage &amp;ndash; we&amp;rsquo;re going to put in the money to turn it into a mock office, complete with a sealed &amp;ldquo;phone booth&amp;rdquo; room and cubicle-like partitions. Right now, it&amp;rsquo;s just a garage with a couple of desks that I share with the Christmas decorations, but it&amp;rsquo;s somewhere where my work life is separate from my home life.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s been weird, but it&amp;rsquo;s been weird for everyone.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Update 2021-02-10&lt;/em&gt; &lt;a href=&#34;https://www.wired.com/story/the-secret-essential-geography-of-the-office/&#34;&gt;This essay by Paul Ford&lt;/a&gt; covers a lot of my thinking about the office, too.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Update 2021-03-27&lt;/em&gt; &lt;a href=&#34;https://twitter.com/cafedujord/status/1375255355962261504&#34;&gt;This tweet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;figure&gt;
  &lt;img src=&#34;https://www.jasonscheirer.com/images/the-post-office-world/tweet.png&#34; alt=&#34;This toot&#34; /&gt;
&lt;/figure&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Own Your Infrastructure</title>
      <link>https://www.jasonscheirer.com/weblog/own-your-infrastructure/</link>
      <pubDate>Tue, 04 Feb 2020 16:45:45 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/own-your-infrastructure/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been sharecropping on Amazon&amp;rsquo;s server farms since I moved to the Bay Area 5 years ago. That is, every startup I&amp;rsquo;ve worked for has utilized AWS (and sometimes GCP or Azure in addition).&lt;/p&gt;
&lt;p&gt;This started out great for my career because I have not built a server machine from parts out since I was in college and I could use all my developer muscles to be operations person.&lt;/p&gt;
&lt;p&gt;However, when you&amp;rsquo;re on-call, you no longer own your uptime. Amazon will randomly flip bits. Its hosted services will go down without warning and leave you helpless but to wait &amp;ndash; you&amp;rsquo;re down until Amazon Hosted Whatever Thing decides to go back up (and the status page will lie about it being up).&lt;/p&gt;
&lt;p&gt;Now I&amp;rsquo;m at a new place where the systems team (I am back in plain old Software Engineering, hopefully out of DevOps forever) actually runs data centers. Everything is done in VMs and not containers. And it&amp;rsquo;s so refreshing. Not only can we be 100% responsible for fixing downtime, but it provides a much stabler and less abstract system to build software on top of. When the solution to a problem is &amp;ldquo;this Bash script&amp;rdquo; and not &amp;ldquo;this Byzantine pipeline only one guy understands&amp;rdquo; it makes the infrastructure easier to reason about and less prone to failure.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python Meetup Talk - 2019-10-09</title>
      <link>https://www.jasonscheirer.com/weblog/python-meetup-sf-2019/</link>
      <pubDate>Thu, 10 Oct 2019 10:18:17 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/python-meetup-sf-2019/</guid>
      <description>&lt;p&gt;I gave a short (~10) minute talk on &lt;a href=&#34;https://github.com/jasonbot/python-meetup-2019-10-09&#34;&gt;preparing to move to microservices&lt;/a&gt; at the Python meetup in San Francisco.&lt;/p&gt;
&lt;p&gt;The main points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We all start out with a monolith&lt;/li&gt;
&lt;li&gt;The monolith never fully goes away&lt;/li&gt;
&lt;li&gt;That&amp;rsquo;s fine&lt;/li&gt;
&lt;li&gt;Scope out a new project to make your first microservice&lt;/li&gt;
&lt;li&gt;Pull out a relatively isolated piece of code in the monolith to make your next microservice&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What I Like About My New Job</title>
      <link>https://www.jasonscheirer.com/weblog/things-i-like-about-my-new-job/</link>
      <pubDate>Mon, 11 May 2015 19:55:10 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/things-i-like-about-my-new-job/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This is &lt;a href=&#34;https://jason.cleanstick.net/post/118755320730/things-i-like-about-my-new-job&#34;&gt;a recycled post from my tumblr weblog&lt;/a&gt;. I&amp;rsquo;ve since had three other jobs, but a lot of what I like still rings true 5 years later in 2020.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Please note I am contractually prohibited from saying what I &lt;em&gt;don&amp;rsquo;t&lt;/em&gt; like about most of my prior employers so don&amp;rsquo;t expect any negative posts.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve gone from developer at a large software corporation in the suburbs of Southern California to being a developer at a startup in SoMa in San Francisco. I&amp;rsquo;ve been here about three months now and this is a list of (some) of the things I like about my new job.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Continuous Integration&lt;/strong&gt;: This is something that I took for granted almost a decade ago at a former employer and haven&amp;rsquo;t had since. When I make a change and push it to GitHub, a set of tests automatically spin up and I can&amp;rsquo;t merge to master until those tests pass. This is good, I have a self-service QA agent where I can iteratively work on an issue and finally do a PR when it&amp;rsquo;s ready.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Actual Decent Test Coverage&lt;/strong&gt;: There&amp;rsquo;s a test suite built in to the code, not saved as an auxiliary repository. When the codebase has a decent set of tests it helps you make sure your changes don&amp;rsquo;t break anything, and it also works to make you feel guilty if you aren&amp;rsquo;t keeping the coverage levels up with your new code, creating a virtuous cycle of test writing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Code Reviews that Actually Happen&lt;/strong&gt;: The tooling for deploys is set up so that no code can be merged into the master branch until it gets a code review/thumbs up by at least one other non-author developer. Code can&amp;rsquo;t be checked in, period, unless it&amp;rsquo;s been hit by at least two sets of eyes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You Can Ship a Feature Same-Day&lt;/strong&gt;: Assuming the feature is small enough, you could sit down at 9:00 AM, implement a feature, write tests, get it code reviewed and have the code shipping by 5:00 PM to real live clients. It was frustrating waiting 16+ months to ship features/fixes at the last place, it&amp;rsquo;s refreshing to get immediate feedback on my work.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The CTO/Cofounder Still Writes Code&lt;/strong&gt;: Certainly he doesn&amp;rsquo;t write the same volume of code he did when there were 4 developers, but the fact that the CTO still finds time to write code/add features to the product shows upper management actually cares about what&amp;rsquo;s under the hood of the product.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;No Silos&lt;/strong&gt;: There are functional teams, and there are specialists, but for the most part everyone works transparently. Meeting notes from each meeting go to an email alias everyone is subscribed to, all GitHub repos are accessible by every engineer, if you want to know how something works all you have to do is look.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Up-to-Date Documents&lt;/strong&gt;: We use a Wiki and we&amp;rsquo;ve got people engaged enough and motivated enough to tend to it like a garden. No 5-year-old Word documents hiding as sharepoint attachments that require you to ask 5 people to see what&amp;rsquo;s no longer true/correct. If anyone finds a set of instructions confusing on a page, they go in and change it so they&amp;rsquo;re less confusing/more correct for the next person, which leads to the next point:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If Something&amp;rsquo;s Broken, You Don&amp;rsquo;t Need Permission to Fix It&lt;/strong&gt;: We get used to little and big annoyances in every software product we use. When I first started I was a little timid about suggesting fixes, figuring things were the way they were for a reason. I&amp;rsquo;m learning now that I can fix annoyances with impunity—nobody gets mad if you make the software better, even if it&amp;rsquo;s in code you wouldn&amp;rsquo;t normally be responsible for. They&amp;rsquo;re thankful, in fact. We&amp;rsquo;ve just begun to formalize this in &amp;lsquo;Spring Cleaning:&amp;rsquo; one day a month we just work on back burner/wish list items. And it&amp;rsquo;s fun.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If You Want to Do More, Do More&lt;/strong&gt;: This is fairly straightforward: if you want to learn something new, go ahead and do it. If you want to be responsible for X, start working on X. No need for formal requests or transfers. As a riff on the above, if you want to do it, do it. This is a fantastic way to work and makes it possible to do professional development in all sorts of directions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Public Transportation&lt;/strong&gt;: This is more a living in the Bay Area thing. In Redlands my strategy for making a painless commute was to live as close as possible to work. Now my strategy is to just live near a train station. My commute from near SFO up to the Caltrain station in SF is about 25 minutes most mornings. In that time I can read or use my laptop, rather than feather my clutch in stop-and-go traffic and scream at other drivers. It&amp;rsquo;s nice.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Officially Sanctioned Social Events&lt;/strong&gt;: Hearsay Social puts on little social events all the time. It&amp;rsquo;s the best way to learn what other people are up to and to form bonds outside of meetings and email. It&amp;rsquo;s really nice getting to know your coworkers in this manner and makes things smoother while actually working together.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Unofficially Sanctioned Social Events&lt;/strong&gt;: A lot of people have common interests and like each other enough to organize small group activities. Some people do rock climbing or go to amusement parks or do a weekly board game night. It&amp;rsquo;s pretty great.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The People&lt;/strong&gt;: As a San Francisco tech startup, the people skew a little younger than I&amp;rsquo;m used to, but everyone is smart and reasonable and easy to talk to. There&amp;rsquo;s no &amp;ldquo;watch out for that guy&amp;rdquo; warnings because there are no &amp;ldquo;that guy&amp;quot;s.&lt;/p&gt;
&lt;p&gt;All in all I&amp;rsquo;m glad I came up and I&amp;rsquo;m happy with Hearsay Social.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
