<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Toys on Jason Scheirer</title>
    <link>https://www.jasonscheirer.com/tags/toys/</link>
    <description>Recent content in Toys on Jason Scheirer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="https://www.jasonscheirer.com/tags/toys/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Match-O-Matic</title>
      <link>https://www.jasonscheirer.com/match-o-matic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.jasonscheirer.com/match-o-matic/</guid>
      <description>&lt;p&gt;This is a small toy for figuring out what to do with a set of letters. Use &lt;code&gt;_&lt;/code&gt; as a wildcard.&lt;/p&gt;

    &lt;script&gt;
      const rootWordNode = [
        0,
        {
          b: [0, { r: [0, { e: [0, { a: [0, { d: [1] }] }] }] }],
          c: [
            0,
            {
              h: [
                0,
                {
                  e: [
                    0,
                    {
                      a: [0, { p: [0, { s: [1] }] }],
                      e: [0, { s: [0, { e: [1] }] }],
                    },
                  ],
                  i: [0, { c: [0, { k: [0, { e: [0, { n: [1] }] }] }] }],
                },
              ],
            },
          ],
          h: [0, { a: [0, { m: [1] }] }],
          s: [
            0,
            {
              a: [
                0,
                {
                  n: [
                    0,
                    { d: [0, { w: [0, { i: [0, { c: [0, { h: [1] }] }] }] }] },
                  ],
                },
              ],
            },
          ],
        },
      ];

      let generation = 0;

      const letterCombination = function* (wordList) {
        const wl = Array.from(wordList);
        const visited = new Set();

        for (const index in wl) {
          const item = wl[index];
          if (visited.has(item)) {
            continue;
          }
          visited.add(item);
          const listCopy = [...wl];
          listCopy.splice(index, 1);

          yield [item, listCopy];
        }
      };

      const calculatePossibilities = (
        letterList,
        allLengthPossibilities = true
      ) =&gt; {
        const gen = generation;
        const words = [];
        const visited = new Set();

        const startTime = Date.now();
        const nodes = [[&#34;&#34;, letterList, rootWordNode]];
        while (nodes.length &gt; 0) {
          const [wordSoFar, lettersLeft, node] = nodes.shift();
          const [isTerminal, childMap] = node;

          if (
            isTerminal &amp;&amp;
            (allLengthPossibilities || lettersLeft.length === 0)
          ) {
            if (!visited.has(wordSoFar)) {
              words.push(wordSoFar);
              visited.add(wordSoFar);
            }
          }

          for (const combo of letterCombination(lettersLeft)) {
            const [letter, letters] = combo;
            if (childMap === undefined) {
            } else if (childMap[letter] !== undefined) {
              nodes.push([wordSoFar + letter, letters, childMap[letter]]);
            } else if (letter === &#34;_&#34;) {
              for (const [innerletter, innernode] of Object.entries(childMap)) {
                nodes.push([wordSoFar + innerletter, letters, innernode]);
              }
            }

            if (Date.now() - startTime &gt; 250 || generation !== gen) {
              return words;
            }
          }
        }

        if (allLengthPossibilities) {
          words.sort((a, b) =&gt;
            a.length !== b.length ? b.length - a.length : a.localeCompare(b)
          );
        }

        return words;
      };

      const debounce = (func, delay) =&gt; {
        let timeoutId;

        return function (...args) {
          clearTimeout(timeoutId);

          timeoutId = setTimeout(() =&gt; {
            func.apply(this, args);
          }, delay);
        };
      };

      const setItems = (itemList) =&gt; {
        const resultElt = document.getElementById(&#34;results&#34;);
        resultElt.innerText = null;

        for (const word of itemList) {
          const elt = document.createElement(&#34;div&#34;);
          elt.classList.add(&#34;match-o-matic-result&#34;);
          elt.innerText = word;
          resultElt.appendChild(elt);
        }

        if (itemList.length === 0) {
          const elt = document.createElement(&#34;div&#34;);
          elt.classList.add(&#34;match-o-matic-message&#34;);
          elt.innerText = &#34;Nothing found&#34;;
          resultElt.appendChild(elt);
        }
      };

      const populatePossbilities = (valueString, matchLength) =&gt; {
        const resultElt = document.getElementById(&#34;results&#34;);
        resultElt.innerText = &#34;Thinking&#34;;

        setItems(
          calculatePossibilities(valueString.toLowerCase(), matchLength)
        );
      };

      let matchLength = true;

      const updateValue = (e) =&gt; {
        const str = e.target.value;
        generation += 1;
        if (generation &gt; 1000) {
          generation = 0;
        }

        populatePossbilities(str, matchLength);
      };

      const bind = () =&gt; {
        const inputElt = document.getElementById(&#34;textinput&#34;);
        inputElt.addEventListener(&#34;input&#34;, debounce(updateValue, 250));

        // On load
        populatePossbilities(inputElt.value, matchLength);

        const matchlengthCheck = document.getElementById(&#34;matchlength&#34;);
        matchlengthCheck.checked = !matchLength;
        matchlengthCheck.addEventListener(&#34;change&#34;, (e) =&gt; {
          matchLength = !e.target.checked;
          populatePossbilities(inputElt.value, matchLength);
        });
      };

      document.addEventListener(&#34;DOMContentLoaded&#34;, bind);
    &lt;/script&gt;
    &lt;style type=&#34;text/css&#34;&gt;
      .match-o-matic {
        margin-top: 12px;
        border: 1px solid var(--borders);
        border-radius: 4px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        padding: 4px;
        background: var(--main-color);
        color: var(--text-color);
      }

      .match-o-matic-input-area {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
        margin: 8px;
      }

      .match-o-matic-input {
        margin: 4px;
        padding: 4px;
        border: none;
        border-radius: none;
        border-bottom: 1px solid var(--main-border);
        font-size: xx-large;
        flex-grow: 1;
        background: var(--main-color);
        color: var(--text-color);
      }

      .match-o-matic-results {
        margin-top: 4px;
        border: 1px solid var(--main-border);
        border-radius: 4px;
        flex-grow: 1;
        font-size: large;
        padding: 4px;
      }

      .match-o-matic-results:empty {
        display: none;
      }

      .match-o-matic-results div + div {
        border-top: 1px solid var(--main-border);
      }

      .match-o-matic-result {
        font-size: x-large;
        padding: 4px;
        user-select: all;
      }

      .match-o-matic-message {
        text-align: center;
        padding: 16px;
        font-family: sans-serif;
      }

      @media only screen and (max-width: 800px) {
        .match-o-matic-input-area {
          flex-direction: column;
        }

        .match-o-matic-input {
          align-self: stretch;
          font-size: xx-large;
        }
      }
    &lt;/style&gt;
    &lt;div class=&#34;match-o-matic&#34;&gt;
      &lt;div class=&#34;match-o-matic-input-area&#34;&gt;
        &lt;input
          class=&#34;match-o-matic-input&#34;
          placeholder=&#34;Type in letters here&#34;
          type=&#34;text&#34;
          id=&#34;textinput&#34;
        /&gt;
        &lt;label&gt;&lt;input type=&#34;checkbox&#34; id=&#34;matchlength&#34; /&gt;Use all letters&lt;/label&gt;
      &lt;/div&gt;
      &lt;div class=&#34;match-o-matic-results&#34; id=&#34;results&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
  
</description><category domain="https://www.jasonscheirer.com//tags/toys">toys</category>
      
    </item>
    
    <item>
      <title>Multialphabet</title>
      <link>https://www.jasonscheirer.com/multialphabet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.jasonscheirer.com/multialphabet/</guid>
      <description>&lt;p&gt;There are so many tools to do this online and a lot of them are annoying or covered in ads or both. Type text, get transforms.&lt;/p&gt;

    &lt;script&gt;
      const randomChoice = (array) =&gt;
        array[Math.floor(Math.random() * array.length)];

      const plainAlphabetMapping = (...alphabetString) =&gt; {
        return (mappingString) =&gt;
          [
            ...(mappingString.trim().length === 0
              ? randomChoice([
                  &#34;We hold these truths to be self-evident, that all men are created equal, that they are endowed by their Creator with certain unalienable Rights, that among these are Life, Liberty and the pursuit of Happiness.&#34;,
                  &#34;Whereas recognition of the inherent dignity and of the equal and inalienable rights of all members of the human family is the foundation of freedom, justice and peace in the world,&#34;,
                  &#34;Space: the final frontier. These are the voyages of the starship Enterprise. Its continuing mission: to explore strange new worlds, to seek out new life and new civilizations, to boldly go where no man has gone before&#34;,
                  `So, I want you to get up now. I want all of you to get up out of your chairs. I want you to get up right now and go to the window, open it, and stick your head out and yell, &#34;I&#39;m as mad as hell, and I&#39;m not going to take this anymore!!&#34;`,
                  &#34;Hello from the children of planet Earth.&#34;,
                  `I know how hard it is down in Chino
I know how you struggle just to get by
I know they got farm fresh eggs down in Chino
And tract homes reasonably priced`,
                  `I don&#39;t wanna pay for anything
Clothes and food and drugs for free
If it was 1970
I&#39;d have a job at a factory`,
                ])
              : mappingString),
          ]
            .map((letter, i) =&gt; {
              const charCode = letter.charCodeAt(0);
              if (charCode &gt;= 65 &amp;&amp; charCode &lt;= 91) {
                return alphabetString[charCode - 65] ?? letter;
              }
              if (charCode &gt;= 97 &amp;&amp; charCode &lt;= 123) {
                return alphabetString[charCode - 97 + 26] ?? letter;
              }

              return letter;
            })
            .join(&#34;&#34;);
      };

      const translators = {
        Bold: plainAlphabetMapping(
          &#34;𝐀&#34;,
          &#34;𝐁&#34;,
          &#34;𝐂&#34;,
          &#34;𝐃&#34;,
          &#34;𝐄&#34;,
          &#34;𝐅&#34;,
          &#34;𝐆&#34;,
          &#34;𝐇&#34;,
          &#34;𝐈&#34;,
          &#34;𝐉&#34;,
          &#34;𝐊&#34;,
          &#34;𝐋&#34;,
          &#34;𝐌&#34;,
          &#34;𝐍&#34;,
          &#34;𝐎&#34;,
          &#34;𝐏&#34;,
          &#34;𝐐&#34;,
          &#34;𝐑&#34;,
          &#34;𝐒&#34;,
          &#34;𝐓&#34;,
          &#34;𝐔&#34;,
          &#34;𝐕&#34;,
          &#34;𝐖&#34;,
          &#34;𝐗&#34;,
          &#34;𝐘&#34;,
          &#34;𝐙&#34;,
          &#34;𝐚&#34;,
          &#34;𝐛&#34;,
          &#34;𝐜&#34;,
          &#34;𝐝&#34;,
          &#34;𝐞&#34;,
          &#34;𝐟&#34;,
          &#34;𝐠&#34;,
          &#34;𝐡&#34;,
          &#34;𝐢&#34;,
          &#34;𝐣&#34;,
          &#34;𝐤&#34;,
          &#34;𝐥&#34;,
          &#34;𝐦&#34;,
          &#34;𝐧&#34;,
          &#34;𝐨&#34;,
          &#34;𝐩&#34;,
          &#34;𝐪&#34;,
          &#34;𝐫&#34;,
          &#34;𝐬&#34;,
          &#34;𝐭&#34;,
          &#34;𝐮&#34;,
          &#34;𝐯&#34;,
          &#34;𝐰&#34;,
          &#34;𝐱&#34;,
          &#34;𝐲&#34;,
          &#34;𝐳&#34;
        ),
        Italic: plainAlphabetMapping(
          &#34;𝐴&#34;,
          &#34;𝐵&#34;,
          &#34;𝐶&#34;,
          &#34;𝐷&#34;,
          &#34;𝐸&#34;,
          &#34;𝐹&#34;,
          &#34;𝐺&#34;,
          &#34;𝐻&#34;,
          &#34;𝐼&#34;,
          &#34;𝐽&#34;,
          &#34;𝐾&#34;,
          &#34;𝐿&#34;,
          &#34;𝑀&#34;,
          &#34;𝑁&#34;,
          &#34;𝑂&#34;,
          &#34;𝑃&#34;,
          &#34;𝑄&#34;,
          &#34;𝑅&#34;,
          &#34;𝑆&#34;,
          &#34;𝑇&#34;,
          &#34;𝑈&#34;,
          &#34;𝑉&#34;,
          &#34;𝑊&#34;,
          &#34;𝑋&#34;,
          &#34;𝑌&#34;,
          &#34;𝑍&#34;,
          &#34;𝑎&#34;,
          &#34;𝑏&#34;,
          &#34;𝑐&#34;,
          &#34;𝑑&#34;,
          &#34;𝑒&#34;,
          &#34;𝑓&#34;,
          &#34;𝑔&#34;,
          &#34;𝒉&#34;,
          &#34;𝑖&#34;,
          &#34;𝑗&#34;,
          &#34;𝑘&#34;,
          &#34;𝑙&#34;,
          &#34;𝑚&#34;,
          &#34;𝑛&#34;,
          &#34;𝑜&#34;,
          &#34;𝑝&#34;,
          &#34;𝑞&#34;,
          &#34;𝑟&#34;,
          &#34;𝑠&#34;,
          &#34;𝑡&#34;,
          &#34;𝑢&#34;,
          &#34;𝑣&#34;,
          &#34;𝑤&#34;,
          &#34;𝑥&#34;,
          &#34;𝑦&#34;,
          &#34;𝑧&#34;
        ),
        &#34;Bold Italic&#34;: plainAlphabetMapping(
          &#34;𝑨&#34;,
          &#34;𝑩&#34;,
          &#34;𝑪&#34;,
          &#34;𝑫&#34;,
          &#34;𝑬&#34;,
          &#34;𝑭&#34;,
          &#34;𝑮&#34;,
          &#34;𝑯&#34;,
          &#34;𝑰&#34;,
          &#34;𝑱&#34;,
          &#34;𝑲&#34;,
          &#34;𝑳&#34;,
          &#34;𝑴&#34;,
          &#34;𝑵&#34;,
          &#34;𝑶&#34;,
          &#34;𝑷&#34;,
          &#34;𝑸&#34;,
          &#34;𝑹&#34;,
          &#34;𝑺&#34;,
          &#34;𝑻&#34;,
          &#34;𝑼&#34;,
          &#34;𝑽&#34;,
          &#34;𝑾&#34;,
          &#34;𝑿&#34;,
          &#34;𝒀&#34;,
          &#34;𝒁&#34;,
          &#34;𝒂&#34;,
          &#34;𝒃&#34;,
          &#34;𝒄&#34;,
          &#34;𝒅&#34;,
          &#34;𝒆&#34;,
          &#34;𝒇&#34;,
          &#34;𝒈&#34;,
          &#34;𝒉&#34;,
          &#34;𝒊&#34;,
          &#34;𝒋&#34;,
          &#34;𝒌&#34;,
          &#34;𝒍&#34;,
          &#34;𝒎&#34;,
          &#34;𝒏&#34;,
          &#34;𝒐&#34;,
          &#34;𝒑&#34;,
          &#34;𝒒&#34;,
          &#34;𝒓&#34;,
          &#34;𝒔&#34;,
          &#34;𝒕&#34;,
          &#34;𝒖&#34;,
          &#34;𝒗&#34;,
          &#34;𝒘&#34;,
          &#34;𝒙&#34;,
          &#34;𝒚&#34;,
          &#34;𝒛&#34;
        ),
        &#34;Italic Cursive&#34;: plainAlphabetMapping(
          &#34;𝒜&#34;,
          &#34;𝓑&#34;,
          &#34;𝒞&#34;,
          &#34;𝒟&#34;,
          &#34;𝓔&#34;,
          &#34;𝓕&#34;,
          &#34;𝒢&#34;,
          &#34;𝓗&#34;,
          &#34;I&#34;,
          &#34;𝓘&#34;,
          &#34;𝒥&#34;,
          &#34;𝒦&#34;,
          &#34;𝓛&#34;,
          &#34;𝓜&#34;,
          &#34;𝒩&#34;,
          &#34;𝒪&#34;,
          &#34;𝒫&#34;,
          &#34;𝒬&#34;,
          &#34;𝒮&#34;,
          &#34;𝒯&#34;,
          &#34;𝒰&#34;,
          &#34;𝒱&#34;,
          &#34;𝒲&#34;,
          &#34;𝒳&#34;,
          &#34;𝒴&#34;,
          &#34;𝒵&#34;,
          &#34;𝒶&#34;,
          &#34;𝒷&#34;,
          &#34;𝒸&#34;,
          &#34;𝒹&#34;,
          &#34;𝓮&#34;,
          &#34;𝒻&#34;,
          &#34;𝓰&#34;,
          &#34;𝒽&#34;,
          &#34;𝒾&#34;,
          &#34;𝒿&#34;,
          &#34;𝓀&#34;,
          &#34;𝓁&#34;,
          &#34;𝓂&#34;,
          &#34;𝓃&#34;,
          &#34;𝓸&#34;,
          &#34;𝓅&#34;,
          &#34;𝓆&#34;,
          &#34;𝓇&#34;,
          &#34;𝓈&#34;,
          &#34;𝓉&#34;,
          &#34;𝓊&#34;,
          &#34;𝓋&#34;,
          &#34;𝓌&#34;,
          &#34;𝓍&#34;,
          &#34;𝓎&#34;,
          &#34;𝓏&#34;
        ),
        &#34;Bold Italic Cursive&#34;: plainAlphabetMapping(
          &#34;𝓐&#34;,
          &#34;𝓑&#34;,
          &#34;𝓒&#34;,
          &#34;𝓓&#34;,
          &#34;𝓔&#34;,
          &#34;𝓕&#34;,
          &#34;𝓖&#34;,
          &#34;𝓗&#34;,
          &#34;𝓘&#34;,
          &#34;𝓙&#34;,
          &#34;𝓚&#34;,
          &#34;𝓛&#34;,
          &#34;𝓜&#34;,
          &#34;𝓝&#34;,
          &#34;𝓞&#34;,
          &#34;𝓟&#34;,
          &#34;𝓠&#34;,
          &#34;𝓡&#34;,
          &#34;𝓢&#34;,
          &#34;𝓣&#34;,
          &#34;𝓤&#34;,
          &#34;𝓥&#34;,
          &#34;𝓦&#34;,
          &#34;𝓧&#34;,
          &#34;𝓨&#34;,
          &#34;𝓩&#34;,
          &#34;𝓪&#34;,
          &#34;𝓫&#34;,
          &#34;𝓬&#34;,
          &#34;𝓭&#34;,
          &#34;𝓮&#34;,
          &#34;𝓯&#34;,
          &#34;𝓰&#34;,
          &#34;𝓱&#34;,
          &#34;𝓲&#34;,
          &#34;𝓳&#34;,
          &#34;𝓴&#34;,
          &#34;𝓵&#34;,
          &#34;𝓶&#34;,
          &#34;𝓷&#34;,
          &#34;𝓸&#34;,
          &#34;𝓹&#34;,
          &#34;𝓺&#34;,
          &#34;𝓻&#34;,
          &#34;𝓼&#34;,
          &#34;𝓽&#34;,
          &#34;𝓾&#34;,
          &#34;𝓿&#34;,
          &#34;𝔀&#34;,
          &#34;𝔁&#34;,
          &#34;𝔂&#34;,
          &#34;𝔃&#34;
        ),
        Fraktur: plainAlphabetMapping(
          &#34;𝔄&#34;,
          &#34;𝔅&#34;,
          &#34;𝕮&#34;,
          &#34;𝔇&#34;,
          &#34;𝔈&#34;,
          &#34;𝔉&#34;,
          &#34;𝔊&#34;,
          &#34;𝕳&#34;,
          &#34;𝕴&#34;,
          &#34;𝔍&#34;,
          &#34;𝔎&#34;,
          &#34;𝔏&#34;,
          &#34;𝔐&#34;,
          &#34;𝔑&#34;,
          &#34;𝔒&#34;,
          &#34;𝔓&#34;,
          &#34;𝔔&#34;,
          &#34;𝕽&#34;,
          &#34;𝔖&#34;,
          &#34;𝔗&#34;,
          &#34;𝔘&#34;,
          &#34;𝔙&#34;,
          &#34;𝔚&#34;,
          &#34;𝔛&#34;,
          &#34;𝔜&#34;,
          &#34;Z&#34;,
          &#34;𝔞&#34;,
          &#34;𝔟&#34;,
          &#34;𝔠&#34;,
          &#34;𝔡&#34;,
          &#34;𝔢&#34;,
          &#34;𝔣&#34;,
          &#34;𝔤&#34;,
          &#34;𝔥&#34;,
          &#34;𝔦&#34;,
          &#34;𝔧&#34;,
          &#34;𝔨&#34;,
          &#34;𝔩&#34;,
          &#34;𝔪&#34;,
          &#34;𝔫&#34;,
          &#34;𝔬&#34;,
          &#34;𝔭&#34;,
          &#34;𝔮&#34;,
          &#34;𝔯&#34;,
          &#34;𝔰&#34;,
          &#34;𝔱&#34;,
          &#34;𝔲&#34;,
          &#34;𝔳&#34;,
          &#34;𝔴&#34;,
          &#34;𝔵&#34;,
          &#34;𝔶&#34;,
          &#34;𝔷&#34;
        ),
        &#34;Bold Fraktur&#34;: plainAlphabetMapping(
          &#34;𝕬&#34;,
          &#34;𝕭&#34;,
          &#34;𝕮&#34;,
          &#34;𝕯&#34;,
          &#34;𝕰&#34;,
          &#34;𝕱&#34;,
          &#34;𝕲&#34;,
          &#34;𝕳&#34;,
          &#34;𝕴&#34;,
          &#34;𝕵&#34;,
          &#34;𝕶&#34;,
          &#34;𝕷&#34;,
          &#34;𝕸&#34;,
          &#34;𝕹&#34;,
          &#34;𝕺&#34;,
          &#34;𝕻&#34;,
          &#34;𝕼&#34;,
          &#34;𝕽&#34;,
          &#34;𝕾&#34;,
          &#34;𝕿&#34;,
          &#34;𝖀&#34;,
          &#34;𝖁&#34;,
          &#34;𝖂&#34;,
          &#34;𝖃&#34;,
          &#34;𝖄&#34;,
          &#34;𝖅&#34;,
          &#34;𝖆&#34;,
          &#34;𝖇&#34;,
          &#34;𝖈&#34;,
          &#34;𝖉&#34;,
          &#34;𝖊&#34;,
          &#34;𝖋&#34;,
          &#34;𝖌&#34;,
          &#34;𝖍&#34;,
          &#34;𝖎&#34;,
          &#34;𝖏&#34;,
          &#34;𝖐&#34;,
          &#34;𝖑&#34;,
          &#34;𝖒&#34;,
          &#34;𝖓&#34;,
          &#34;𝖔&#34;,
          &#34;𝖕&#34;,
          &#34;𝖖&#34;,
          &#34;𝖗&#34;,
          &#34;𝖘&#34;,
          &#34;𝖙&#34;,
          &#34;𝖚&#34;,
          &#34;𝖛&#34;,
          &#34;𝖜&#34;,
          &#34;𝖝&#34;,
          &#34;𝖞&#34;,
          &#34;𝖟&#34;
        ),
        Draftsman: plainAlphabetMapping(
          &#34;𝔸&#34;,
          &#34;𝔹&#34;,
          &#34;C&#34;,
          &#34;𝔻&#34;,
          &#34;𝔼&#34;,
          &#34;𝔽&#34;,
          &#34;𝔾&#34;,
          &#34;H&#34;,
          &#34;𝕀&#34;,
          &#34;𝕁&#34;,
          &#34;𝕂&#34;,
          &#34;𝕃&#34;,
          &#34;𝕄&#34;,
          &#34;N&#34;,
          &#34;𝕆&#34;,
          &#34;P&#34;,
          &#34;Q&#34;,
          &#34;R&#34;,
          &#34;𝕊&#34;,
          &#34;𝕋&#34;,
          &#34;𝕌&#34;,
          &#34;𝕍&#34;,
          &#34;𝕎&#34;,
          &#34;𝕏&#34;,
          &#34;𝕐&#34;,
          &#34;Z&#34;,
          &#34;𝕒&#34;,
          &#34;𝕓&#34;,
          &#34;𝕔&#34;,
          &#34;𝕕&#34;,
          &#34;𝕖&#34;,
          &#34;𝕗&#34;,
          &#34;𝕘&#34;,
          &#34;𝕙&#34;,
          &#34;𝕚&#34;,
          &#34;𝕛&#34;,
          &#34;𝕜&#34;,
          &#34;𝕝&#34;,
          &#34;𝕞&#34;,
          &#34;𝕟&#34;,
          &#34;𝕠&#34;,
          &#34;𝕡&#34;,
          &#34;𝕢&#34;,
          &#34;𝕣&#34;,
          &#34;𝕤&#34;,
          &#34;𝕥&#34;,
          &#34;𝕦&#34;,
          &#34;𝕧&#34;,
          &#34;𝕨&#34;,
          &#34;𝕩&#34;,
          &#34;𝕪&#34;,
          &#34;𝕫&#34;
        ),
        Wide: plainAlphabetMapping(
          &#34;𝖠&#34;,
          &#34;𝖡&#34;,
          &#34;𝖢&#34;,
          &#34;𝖣&#34;,
          &#34;𝖤&#34;,
          &#34;𝖥&#34;,
          &#34;𝖦&#34;,
          &#34;𝖧&#34;,
          &#34;𝖨&#34;,
          &#34;𝖩&#34;,
          &#34;𝖪&#34;,
          &#34;𝖫&#34;,
          &#34;𝖬&#34;,
          &#34;𝖭&#34;,
          &#34;𝖮&#34;,
          &#34;𝖯&#34;,
          &#34;𝖰&#34;,
          &#34;𝖱&#34;,
          &#34;𝖲&#34;,
          &#34;𝖳&#34;,
          &#34;𝖴&#34;,
          &#34;𝖵&#34;,
          &#34;𝖶&#34;,
          &#34;𝖷&#34;,
          &#34;𝖸&#34;,
          &#34;𝖹&#34;,
          &#34;𝖺&#34;,
          &#34;𝖻&#34;,
          &#34;𝖼&#34;,
          &#34;𝖽&#34;,
          &#34;𝖾&#34;,
          &#34;𝖿&#34;,
          &#34;𝗀&#34;,
          &#34;𝗁&#34;,
          &#34;𝗂&#34;,
          &#34;𝗃&#34;,
          &#34;𝗄&#34;,
          &#34;𝗅&#34;,
          &#34;𝗆&#34;,
          &#34;𝗇&#34;,
          &#34;𝗈&#34;,
          &#34;𝗉&#34;,
          &#34;𝗊&#34;,
          &#34;𝗋&#34;,
          &#34;𝗌&#34;,
          &#34;𝗍&#34;,
          &#34;𝗎&#34;,
          &#34;𝗏&#34;,
          &#34;𝗐&#34;,
          &#34;𝗑&#34;,
          &#34;𝗒&#34;,
          &#34;𝗓&#34;
        ),
        &#34;Bold Wide&#34;: plainAlphabetMapping(
          &#34;𝗔&#34;,
          &#34;𝗕&#34;,
          &#34;𝗖&#34;,
          &#34;𝗗&#34;,
          &#34;𝗘&#34;,
          &#34;𝗙&#34;,
          &#34;𝗚&#34;,
          &#34;𝗛&#34;,
          &#34;𝗜&#34;,
          &#34;𝗝&#34;,
          &#34;𝗞&#34;,
          &#34;𝗟&#34;,
          &#34;𝗠&#34;,
          &#34;𝗡&#34;,
          &#34;𝗢&#34;,
          &#34;𝗣&#34;,
          &#34;𝗤&#34;,
          &#34;𝗥&#34;,
          &#34;𝗦&#34;,
          &#34;𝗧&#34;,
          &#34;𝗨&#34;,
          &#34;𝗩&#34;,
          &#34;𝗪&#34;,
          &#34;𝗫&#34;,
          &#34;𝗬&#34;,
          &#34;𝗭&#34;,
          &#34;𝗮&#34;,
          &#34;𝗯&#34;,
          &#34;𝗰&#34;,
          &#34;𝗱&#34;,
          &#34;𝗲&#34;,
          &#34;𝗳&#34;,
          &#34;𝗴&#34;,
          &#34;𝗵&#34;,
          &#34;𝗶&#34;,
          &#34;𝗷&#34;,
          &#34;𝗸&#34;,
          &#34;𝗹&#34;,
          &#34;𝗺&#34;,
          &#34;𝗻&#34;,
          &#34;𝗼&#34;,
          &#34;𝗽&#34;,
          &#34;𝗾&#34;,
          &#34;𝗿&#34;,
          &#34;𝘀&#34;,
          &#34;𝘁&#34;,
          &#34;𝘂&#34;,
          &#34;𝘃&#34;,
          &#34;𝘄&#34;,
          &#34;𝘅&#34;,
          &#34;𝘆&#34;,
          &#34;𝘇&#34;
        ),
        &#34;Wide Italic&#34;: plainAlphabetMapping(
          &#34;𝘈&#34;,
          &#34;𝘉&#34;,
          &#34;𝘊&#34;,
          &#34;𝘋&#34;,
          &#34;𝘌&#34;,
          &#34;𝘍&#34;,
          &#34;𝘎&#34;,
          &#34;𝘏&#34;,
          &#34;𝘐&#34;,
          &#34;𝘑&#34;,
          &#34;𝘒&#34;,
          &#34;𝘓&#34;,
          &#34;𝘔&#34;,
          &#34;𝘕&#34;,
          &#34;𝘖&#34;,
          &#34;𝘗&#34;,
          &#34;𝘘&#34;,
          &#34;𝘙&#34;,
          &#34;𝘚&#34;,
          &#34;𝘛&#34;,
          &#34;𝘜&#34;,
          &#34;𝘝&#34;,
          &#34;𝘞&#34;,
          &#34;𝘟&#34;,
          &#34;𝘠&#34;,
          &#34;𝘡&#34;,
          &#34;𝘢&#34;,
          &#34;𝘣&#34;,
          &#34;𝘤&#34;,
          &#34;𝘥&#34;,
          &#34;𝘦&#34;,
          &#34;𝘧&#34;,
          &#34;𝘨&#34;,
          &#34;𝘩&#34;,
          &#34;𝘪&#34;,
          &#34;𝘫&#34;,
          &#34;𝘬&#34;,
          &#34;𝘭&#34;,
          &#34;𝘮&#34;,
          &#34;𝘯&#34;,
          &#34;𝘰&#34;,
          &#34;𝘱&#34;,
          &#34;𝘲&#34;,
          &#34;𝘳&#34;,
          &#34;𝘴&#34;,
          &#34;𝘵&#34;,
          &#34;𝘶&#34;,
          &#34;𝘷&#34;,
          &#34;𝘸&#34;,
          &#34;𝘹&#34;,
          &#34;𝘺&#34;,
          &#34;𝘻&#34;
        ),
        &#34;Bold Wide Italic&#34;: plainAlphabetMapping(
          &#34;𝘼&#34;,
          &#34;𝘽&#34;,
          &#34;𝘾&#34;,
          &#34;𝘿&#34;,
          &#34;𝙀&#34;,
          &#34;𝙁&#34;,
          &#34;𝙂&#34;,
          &#34;𝙃&#34;,
          &#34;𝙄&#34;,
          &#34;𝙅&#34;,
          &#34;𝙆&#34;,
          &#34;𝙇&#34;,
          &#34;𝙈&#34;,
          &#34;𝙉&#34;,
          &#34;𝙊&#34;,
          &#34;𝙋&#34;,
          &#34;𝙌&#34;,
          &#34;𝙍&#34;,
          &#34;𝙎&#34;,
          &#34;𝙏&#34;,
          &#34;𝙐&#34;,
          &#34;𝙑&#34;,
          &#34;𝙒&#34;,
          &#34;𝙓&#34;,
          &#34;𝙔&#34;,
          &#34;𝙕&#34;,
          &#34;𝙖&#34;,
          &#34;𝙗&#34;,
          &#34;𝙘&#34;,
          &#34;𝙙&#34;,
          &#34;𝙚&#34;,
          &#34;𝙛&#34;,
          &#34;𝙜&#34;,
          &#34;𝙝&#34;,
          &#34;𝙞&#34;,
          &#34;𝙟&#34;,
          &#34;𝙠&#34;,
          &#34;𝙡&#34;,
          &#34;𝙢&#34;,
          &#34;𝙣&#34;,
          &#34;𝙤&#34;,
          &#34;𝙥&#34;,
          &#34;𝙦&#34;,
          &#34;𝙧&#34;,
          &#34;𝙨&#34;,
          &#34;𝙩&#34;,
          &#34;𝙪&#34;,
          &#34;𝙫&#34;,
          &#34;𝙬&#34;,
          &#34;𝙭&#34;,
          &#34;𝙮&#34;,
          &#34;𝙯&#34;
        ),
        Typewriter: plainAlphabetMapping(
          &#34;𝙰&#34;,
          &#34;𝙱&#34;,
          &#34;𝙲&#34;,
          &#34;𝙳&#34;,
          &#34;𝙴&#34;,
          &#34;𝙵&#34;,
          &#34;𝙶&#34;,
          &#34;𝙷&#34;,
          &#34;𝙸&#34;,
          &#34;𝙹&#34;,
          &#34;𝙺&#34;,
          &#34;𝙻&#34;,
          &#34;𝙼&#34;,
          &#34;𝙽&#34;,
          &#34;𝙾&#34;,
          &#34;𝙿&#34;,
          &#34;𝚀&#34;,
          &#34;𝚁&#34;,
          &#34;𝚂&#34;,
          &#34;𝚃&#34;,
          &#34;𝚄&#34;,
          &#34;𝚅&#34;,
          &#34;𝚆&#34;,
          &#34;𝚇&#34;,
          &#34;𝚈&#34;,
          &#34;𝚉&#34;,
          &#34;𝚊&#34;,
          &#34;𝚋&#34;,
          &#34;𝚌&#34;,
          &#34;𝚍&#34;,
          &#34;𝚎&#34;,
          &#34;𝚏&#34;,
          &#34;𝚐&#34;,
          &#34;𝚑&#34;,
          &#34;𝚒&#34;,
          &#34;𝚓&#34;,
          &#34;𝚔&#34;,
          &#34;𝚕&#34;,
          &#34;𝚖&#34;,
          &#34;𝚗&#34;,
          &#34;𝚘&#34;,
          &#34;𝚙&#34;,
          &#34;𝚚&#34;,
          &#34;𝚛&#34;,
          &#34;𝚜&#34;,
          &#34;𝚝&#34;,
          &#34;𝚞&#34;,
          &#34;𝚟&#34;,
          &#34;𝚠&#34;,
          &#34;𝚡&#34;,
          &#34;𝚢&#34;,
          &#34;𝚣&#34;
        ),
        Doublewide: plainAlphabetMapping(
          &#34;Ａ&#34;,
          &#34;Ｂ&#34;,
          &#34;Ｃ&#34;,
          &#34;Ｄ&#34;,
          &#34;Ｅ&#34;,
          &#34;Ｆ&#34;,
          &#34;Ｇ&#34;,
          &#34;Ｈ&#34;,
          &#34;Ｉ&#34;,
          &#34;Ｊ&#34;,
          &#34;Ｋ&#34;,
          &#34;Ｌ&#34;,
          &#34;Ｍ&#34;,
          &#34;Ｎ&#34;,
          &#34;Ｏ&#34;,
          &#34;Ｐ&#34;,
          &#34;Ｑ&#34;,
          &#34;Ｒ&#34;,
          &#34;Ｓ&#34;,
          &#34;Ｔ&#34;,
          &#34;Ｕ&#34;,
          &#34;Ｖ&#34;,
          &#34;Ｗ&#34;,
          &#34;Ｘ&#34;,
          &#34;Ｙ&#34;,
          &#34;Ｚ&#34;,
          &#34;ａ&#34;,
          &#34;ｂ&#34;,
          &#34;ｃ&#34;,
          &#34;ｄ&#34;,
          &#34;ｅ&#34;,
          &#34;ｆ&#34;,
          &#34;ｇ&#34;,
          &#34;ｈ&#34;,
          &#34;ｉ&#34;,
          &#34;ｊ&#34;,
          &#34;ｋ&#34;,
          &#34;ｌ&#34;,
          &#34;ｍ&#34;,
          &#34;ｎ&#34;,
          &#34;ｏ&#34;,
          &#34;ｐ&#34;,
          &#34;ｑ&#34;,
          &#34;ｒ&#34;,
          &#34;ｓ&#34;,
          &#34;ｔ&#34;,
          &#34;ｕ&#34;,
          &#34;ｖ&#34;,
          &#34;ｗ&#34;,
          &#34;ｘ&#34;,
          &#34;ｙ&#34;,
          &#34;ｚ&#34;
        ),
      };

      const activeTranslations = [];

      const debounce = (func, delay) =&gt; {
        let timeoutId;

        return function (...args) {
          clearTimeout(timeoutId);

          timeoutId = setTimeout(() =&gt; {
            func.apply(this, args);
          }, delay);
        };
      };

      const inputTextHasChanged = () =&gt; {
        const t = document.getElementById(&#34;multi-alphabet-input&#34;);
        const text = t.innerText;

        if (!!text &amp;&amp; activeTranslations.length === 0) {
          addToListOfActiveTranslations(
            randomChoice(Object.keys(translators)),
            true
          );
        }

        activeTranslations.forEach((display) =&gt; {
          display.update(text);
        });
      };

      const updateSelectedTranslationItemsInList = () =&gt; {
        namesUsed = new Set(activeTranslations.map((b) =&gt; b.name));

        const selectElt = document.getElementById(&#34;multi-alphabet-selector&#34;);
        [...selectElt.querySelectorAll(&#34;option&#34;)].forEach((e, i) =&gt; {
          if (i === 0) {
            e.innerText = randomChoice([&#34;One more?&#34;, &#34;Another&#34;, &#34;Keep going&#34;]);
            e.disabled = true;
          } else {
            e.disabled = namesUsed.has(e.value);
          }
        });
        inputTextHasChanged();
      };

      const addToListOfActiveTranslations = (name, addedByDefault) =&gt; {
        const template = document.getElementById(&#34;translation-item-template&#34;);
        const resultElt = document.getElementById(&#34;multi-alphabet-results&#34;);

        const translationElt = document.importNode(
          template.content,
          true
        ).firstElementChild;
        resultElt.appendChild(translationElt);

        translationElt.querySelector(
          &#34;.name&#34;
        ).innerText = `${name} (${translators[name](name)})`;

        const translationTextelt = translationElt.querySelector(&#34;.translation&#34;);
        const copyButton = translationElt.querySelector(&#34;.copy-button&#34;);
        const deleteButton = translationElt.querySelector(&#34;.remove-button&#34;);

        copyButton.addEventListener(&#34;click&#34;, (e) =&gt; {
          navigator.clipboard.writeText(translationTextelt.innerText);
        });

        const deleteMethod = () =&gt; {
          const idx = activeTranslations.findIndex((e) =&gt; e.name === name);
          if (idx &gt;= 0) {
            activeTranslations.splice(idx, 1);
            updateSelectedTranslationItemsInList();
            resultElt.removeChild(translationElt);
          }
        };
        deleteButton.addEventListener(&#34;click&#34;, deleteMethod);

        activeTranslations.push({
          name,
          addedByDefault,
          update: (text) =&gt; {
            const translationBlank = text.trim().length === 0;
            copyButton.disabled = translationBlank;

            translationTextelt.innerText = translators[name](text);
          },
          remove: deleteMethod,
        });

        updateSelectedTranslationItemsInList();
      };

      const startupAndBindElements = () =&gt; {
        const selectElt = document.getElementById(&#34;multi-alphabet-selector&#34;);
        selectElt.addEventListener(&#34;change&#34;, (e) =&gt; {
          addToListOfActiveTranslations(e.target.value);
          selectElt.value = &#34;&#34;;
        });

        Object.entries(translators).forEach(([name, translator]) =&gt; {
          const option = document.createElement(&#34;option&#34;);
          option.value = name;
          option.textContent = `${name} (${translator(name)})`;

          selectElt.appendChild(option);
        });

        const inputElt = document.getElementById(&#34;multi-alphabet-input&#34;);
        inputElt.addEventListener(&#34;input&#34;, debounce(inputTextHasChanged, 50));
      };

      document.addEventListener(&#34;DOMContentLoaded&#34;, startupAndBindElements);
    &lt;/script&gt;
    &lt;style type=&#34;text/css&#34;&gt;
      div.multi-alphabet-input-area {
        border: 1px solid var(--borders);
        border-radius: 4px;
        padding: 4px;
        font-size: larger;

        &amp;:empty::before {
          content: &#34;Type what you want to make 𝒶𝓮𝓈𝓉𝒽𝓮𝓉𝒾𝒸 here&#34;;
          opacity: 0.75;
          font-style: italic;
        }

        margin-bottom: 1em;
      }

      div.translation-item {
        border: 1px solid var(--borders);
        border-radius: 4px;
        overflow: hidden;
      }

      div.translation-text {
        padding: 4px;
        white-space: pre-wrap;
        padding: 4px;
        font-size: larger;
      }

      div.translation-header {
        background: var(--main-border);
        padding: 2px;
        user-select: none;
        display: flex;
        flex-direction: row;

        .translator-name {
          text-align: center;
        }

        &amp; &gt; * {
          flex-grow: 1;
          align-items: center;
        }

        .copy-button,
        .remove-button {
          flex-grow: 0;
        }
      }

      div.multi-alphabet-add-another {
        select {
          font-size: large;
          font-weight: bold;
        }

        margin-top: 4px;
        margin-bottom: 4px;
        user-select: none;
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;

        #multi-alphabet-selector {
          font-size: x-large;
        }
      }

      div.translation-item:not(:last-child) {
        border-bottom: 1px solid rgba(0, 0, 0, 0.125);
        padding-bottom: 4px;
        margin-bottom: 4px;
      }
    &lt;/style&gt;
    &lt;div class=&#34;multi-alphabet&#34;&gt;
      &lt;div
        id=&#34;multi-alphabet-input&#34;
        class=&#34;multi-alphabet-input-area&#34;
        contenteditable=&#34;true&#34;
      &gt;&lt;/div&gt;
      &lt;div class=&#34;multi-alphabet-results&#34; id=&#34;multi-alphabet-results&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;multi-alphabet-add-another&#34;&gt;
        &lt;select
          class=&#34;multi-alphabet-translation-selector&#34;
          id=&#34;multi-alphabet-selector&#34;
        &gt;
          &lt;option disabled value=&#34;&#34; selected&gt;Choose a transformation&lt;/option&gt;
        &lt;/select&gt;
      &lt;/div&gt;

      &lt;template id=&#34;translation-item-template&#34;&gt;
        &lt;div class=&#34;translation-item&#34;&gt;
          &lt;div class=&#34;translation-header&#34;&gt;
            &lt;div class=&#34;name translator-name&#34;&gt;&lt;/div&gt;
            &lt;button class=&#34;copy-button&#34;&gt;⧉Copy&lt;/button&gt;
            &lt;button class=&#34;remove-button&#34;&gt;×&lt;/button&gt;
          &lt;/div&gt;
          &lt;div class=&#34;translation translation-text&#34;&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/template&gt;
    &lt;/div&gt;
  
</description><category domain="https://www.jasonscheirer.com//tags/toys">toys</category>
      
    </item>
    
  </channel>
</rss>
