<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Jason Scheirer</title>
    <link>https://www.jasonscheirer.com/tags/python/</link>
    <description>Recent content in python on Jason Scheirer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 31 Mar 2021 00:00:00 -0800</lastBuildDate><atom:link href="https://www.jasonscheirer.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>__all__ is a Sacred Space and you Murderous Goblins are all Profaning it</title>
      <link>https://www.jasonscheirer.com/weblog/dunder-all-is-a-sacred-space-and-everyone-is-profaning-it/</link>
      <pubDate>Wed, 31 Mar 2021 00:00:00 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/dunder-all-is-a-sacred-space-and-everyone-is-profaning-it/</guid>
      <description>Let me spell something out for you trickster-meanies:
# HELLO I AM thingy.py __all__ = [X, Y, Z] X = True Y = True Z = True Reasonable, right?
&amp;gt;&amp;gt;&amp;gt; from thingy import * Traceback (most recent call last): File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 1, in &amp;lt;module&amp;gt; File &amp;#34;/Users/scheirer/thingy.py&amp;#34;, line 1, in &amp;lt;module&amp;gt; __all__ = [X, Y, Z] NameError: name &amp;#39;X&amp;#39; is not defined Python is older than my son (who is 3) and yet you abuse it.</description>
    </item>
    
    <item>
      <title>You Don&#39;t Need to Make That Temporary File, Dude</title>
      <link>https://www.jasonscheirer.com/weblog/dont-use-tempfiles/</link>
      <pubDate>Fri, 12 Feb 2021 08:00:00 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/dont-use-tempfiles/</guid>
      <description>This was initially a blog post I wrote on my employer&amp;rsquo;s internal system, but it&amp;rsquo;s interestingly useful and it doesn&amp;rsquo;t contain any trade secrets so I figure I&amp;rsquo;ll share.
 A common pattern that seems obvious when you need to shuttle data around in file form is to use a temporary file against the filesystem using the tempfile module.
You very seldom ACTUALLY need to do this. The BytesIO class follows the exact same protocol, the file protocol, so any API that accepts a &amp;ldquo;file-like object&amp;rdquo; will accept an in-memory piece of information in addition to a file on disk.</description>
    </item>
    
    <item>
      <title>Python Meetup Talk - 2019-10-09</title>
      <link>https://www.jasonscheirer.com/weblog/python-meetup-sf-2019/</link>
      <pubDate>Thu, 10 Oct 2019 10:18:17 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/python-meetup-sf-2019/</guid>
      <description>I gave a short (~10) minute talk on preparing to move to microservices at the Python meetup in San Francisco.
The main points:
 We all start out with a monolith The monolith never fully goes away That&amp;rsquo;s fine Scope out a new project to make your first microservice Pull out a relatively isolated piece of code in the monolith to make your next microservice  </description>
    </item>
    
    <item>
      <title>Stupid simple API reference for bottle.py web services</title>
      <link>https://www.jasonscheirer.com/weblog/bottle-introspection/</link>
      <pubDate>Sun, 25 Mar 2012 22:11:11 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/bottle-introspection/</guid>
      <description>I have a stupid json-only REST API I implemented in bottle.py. This introspects the default app, gives a dumb readout that should act as an adequate reference for discovery:
@bottle.route(&amp;#39;/&amp;#39;) def index(): bottle.response.content_type = &amp;#39;text/plain&amp;#39; return (&amp;#34;=== API REFERENCE ===\n&amp;#34; + &amp;#34;\n&amp;#34;.join(x[&amp;#39;rule&amp;#39;] for x in bottle.app().routes)) </description>
    </item>
    
  </channel>
</rss>
