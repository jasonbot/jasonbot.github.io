<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Jason Scheirer</title>
    <link>https://www.jasonscheirer.com/tags/python/</link>
    <description>Recent content in python on Jason Scheirer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 10 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.jasonscheirer.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python as a Language is Unescabably Coupled with its Implementation Part 2: The Tracer</title>
      <link>https://www.jasonscheirer.com/weblog/python-will-never-be-decoupled-from-its-implementation-2/</link>
      <pubDate>Wed, 10 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/python-will-never-be-decoupled-from-its-implementation-2/</guid>
      <description>I was recently discussing some dumb PYthon tricks at work with some colleagues and showed them this old Gist I wrote, which in modern times I would rewrite to look like this:
import functools import inspect import sys @functools.lru_cache def getlines(filename): with open(filename, &amp;#34;r&amp;#34;) as file_handle: return tuple(file_handle) @functools.lru_cache def getline(filename, line_number): return getlines(filename)[line_number - 1] def tracefunction(frame, event, arg): if event == &amp;#34;line&amp;#34;: info = inspect.getframeinfo(frame) fname, lineno, fn = info.</description>
    </item>
    
    <item>
      <title>Async programming: understanding it from fundamentals</title>
      <link>https://www.jasonscheirer.com/weblog/understanding-async-programming-from-fundamentals/</link>
      <pubDate>Tue, 12 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/understanding-async-programming-from-fundamentals/</guid>
      <description>This was inspired by a short chat I had with a coworker, trying to give a simple, 15 minute explanation of something that took me a decade to wrap my head around due to poor teaching resources online.
Async programming in modern &amp;ldquo;industrial&amp;rdquo; languages is shrouded in magic, abstractions, and years of atrocious decisions (looking at you, Javascript/Python). Most tutorials start out with &amp;ldquo;just mark your function async and await it and use these magic incantations and you&amp;rsquo;re good to go!</description>
    </item>
    
    <item>
      <title>Modern Python: Features I Haven&#39;t Used But Plan To</title>
      <link>https://www.jasonscheirer.com/weblog/modern-python-features-that-are-still-sinking-in/</link>
      <pubDate>Mon, 11 Jul 2022 00:00:00 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/modern-python-features-that-are-still-sinking-in/</guid>
      <description>Python has continued to progress and introduce new features and modules. In this post I&amp;rsquo;ll cover features I haven&amp;rsquo;t used much (or at all) and how I plan on using or not using them.
Walrus Operator I&amp;rsquo;ve been aware of this for a few years. I&amp;rsquo;ve found about 3 times where I&amp;rsquo;ve found it appropriate to use. It&amp;rsquo;s nice but not a huge change to the way I code. Generally in the pattern</description>
    </item>
    
    <item>
      <title>Modern Python has Changed How I Code</title>
      <link>https://www.jasonscheirer.com/weblog/modern-python-has-changed-how-i-code/</link>
      <pubDate>Thu, 07 Jul 2022 00:00:00 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/modern-python-has-changed-how-i-code/</guid>
      <description>I can&amp;rsquo;t understate the importance of how much the following have changed and improved the way I write Python and have confidence in its correctness:
Continuous Integration Black Dataclasses Mypy Type Hints Continuous Integration This isn&amp;rsquo;t particularly new to me (or the industry), but a good CI workflow that runs tests and linting on every commit pushed to the repo tracker gives confidence that the code is clean to merge into the main branch.</description>
    </item>
    
    <item>
      <title>Python as a Language is Unescabably Coupled with its Implementation Part 1: LET&#39;S DO DUMB SHIT WITH THE GC</title>
      <link>https://www.jasonscheirer.com/weblog/python-will-never-be-decoupled-from-its-implementation/</link>
      <pubDate>Sun, 04 Apr 2021 00:00:00 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/python-will-never-be-decoupled-from-its-implementation/</guid>
      <description>There is a convenient but untrue fiction about Python that the language specification is somehow cleanroom and CPython is actually &amp;ldquo;just an implementation.&amp;rdquo;
This has always been false, and harmful at best.
Look at __dict__. Near every Python object has a dictionary that fuels and consumes it. All your dotted getters are mere passthroughs for dot __getitem__ers.
Another fun thing is the leaking of implementation details in Bad Ways. Here&amp;rsquo;s something you can do but should not do, lest I find out where you live and poop in your mailbox:</description>
    </item>
    
    <item>
      <title>__all__ is a Sacred Space and you Murderous Goblins are all Profaning it</title>
      <link>https://www.jasonscheirer.com/weblog/dunder-all-is-a-sacred-space-and-everyone-is-profaning-it/</link>
      <pubDate>Wed, 31 Mar 2021 00:00:00 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/dunder-all-is-a-sacred-space-and-everyone-is-profaning-it/</guid>
      <description>Let me spell something out for you trickster-meanies:
# HELLO I AM thingy.py __all__ = [X, Y, Z] X = True Y = True Z = True Reasonable, right?
&amp;gt;&amp;gt;&amp;gt; from thingy import * Traceback (most recent call last): File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 1, in &amp;lt;module&amp;gt; File &amp;#34;/Users/scheirer/thingy.py&amp;#34;, line 1, in &amp;lt;module&amp;gt; __all__ = [X, Y, Z] NameError: name &amp;#39;X&amp;#39; is not defined Python is older than my son (who is 3) and yet you abuse it.</description>
    </item>
    
    <item>
      <title>You Don&#39;t Need to Make That Temporary File, Dude</title>
      <link>https://www.jasonscheirer.com/weblog/dont-use-tempfiles/</link>
      <pubDate>Fri, 12 Feb 2021 08:00:00 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/dont-use-tempfiles/</guid>
      <description>This was initially a blog post I wrote on my employer&amp;rsquo;s internal system, but it&amp;rsquo;s interestingly useful and it doesn&amp;rsquo;t contain any trade secrets so I figure I&amp;rsquo;ll share.
A common pattern that seems obvious when you need to shuttle data around in file form is to use a temporary file against the filesystem using the tempfile module.
You very seldom ACTUALLY need to do this. The BytesIO class follows the exact same protocol, the file protocol, so any API that accepts a &amp;ldquo;file-like object&amp;rdquo; will accept an in-memory piece of information in addition to a file on disk.</description>
    </item>
    
    <item>
      <title>Python Meetup Talk - 2019-10-09</title>
      <link>https://www.jasonscheirer.com/weblog/python-meetup-sf-2019/</link>
      <pubDate>Thu, 10 Oct 2019 10:18:17 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/python-meetup-sf-2019/</guid>
      <description>I gave a short (~10) minute talk on preparing to move to microservices at the Python meetup in San Francisco.
The main points:
We all start out with a monolith The monolith never fully goes away That&amp;rsquo;s fine Scope out a new project to make your first microservice Pull out a relatively isolated piece of code in the monolith to make your next microservice </description>
    </item>
    
    <item>
      <title>Stupid simple API reference for bottle.py web services</title>
      <link>https://www.jasonscheirer.com/weblog/bottle-introspection/</link>
      <pubDate>Sun, 25 Mar 2012 22:11:11 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/bottle-introspection/</guid>
      <description>I have a stupid json-only REST API I implemented in bottle.py. This introspects the default app, gives a dumb readout that should act as an adequate reference for discovery:
@bottle.route(&amp;#39;/&amp;#39;) def index(): bottle.response.content_type = &amp;#39;text/plain&amp;#39; return (&amp;#34;=== API REFERENCE ===\n&amp;#34; + &amp;#34;\n&amp;#34;.join(x[&amp;#39;rule&amp;#39;] for x in bottle.app().routes)) </description>
    </item>
    
  </channel>
</rss>
