<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Html on Jason Scheirer</title>
    <link>https://www.jasonscheirer.com/tags/html/</link>
    <description>Recent content in Html on Jason Scheirer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 23 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://www.jasonscheirer.com/tags/html/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>There and Back Again: My Journey Into (And Out Of) Tailwind</title>
      <link>https://www.jasonscheirer.com/weblog/tailwind/</link>
      <pubDate>Wed, 23 Jul 2025 00:00:00 +0000</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/tailwind/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been using &lt;a href=&#34;https://tailwindcss.com/&#34;&gt;the Tailwind CSS Framework&lt;/a&gt; for about two and a half years (as of July 2025) for my personal projects, and I used it professionally in my time at &lt;a href=&#34;https://unstructured.io/&#34;&gt;unstructured&lt;/a&gt; as well. In all, I think it&amp;rsquo;s a good thing. However, I don&amp;rsquo;t find myself thinking I&amp;rsquo;d use it for new projects at this point: I believe I have outgrown it. Here is a short story.&lt;/p&gt;
&lt;h1 id=&#34;tailwind-as-style-guide&#34;&gt;Tailwind as Style Guide&lt;/h1&gt;
&lt;p&gt;Tailwind has a set of that encourages a &lt;a href=&#34;https://en.wikipedia.org/wiki/Linguistic_relativity&#34;&gt;specific styling worldview&lt;/a&gt; that gets you a &amp;ldquo;modern&amp;rdquo; looking UI which doesn&amp;rsquo;t feel offensive versus any other site on the internet. The &lt;a href=&#34;https://tailwindcss.com/docs/colors&#34;&gt;pre-baked color choices&lt;/a&gt; and reasonable framing around &lt;a href=&#34;https://tailwindcss.com/docs/columns&#34;&gt;layout options like columns&lt;/a&gt; give you a framework (ha!) within which to work and make a decent site. It&amp;rsquo;s less greenfield than a blank page and an &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS&#34;&gt;open documentation tab&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;tailwind-as-tutorial&#34;&gt;Tailwind as Tutorial&lt;/h1&gt;
&lt;p&gt;I&amp;rsquo;ve been doing web development on and off for&amp;hellip;well, since my teenage days but I don&amp;rsquo;t specialize in frontend dev and every few years when I come back to focus on it, things have changed. I don&amp;rsquo;t know what&amp;rsquo;s popular, I don&amp;rsquo;t know what&amp;rsquo;s possible, I don&amp;rsquo;t know what&amp;rsquo;s popular (hint: if it&amp;rsquo;s easy to do in CSS, it&amp;rsquo;s popular).&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_flexible_box_layout/Basic_concepts_of_flexbox&#34;&gt;Flexbox&lt;/a&gt; in particular is something I had a somewhat superstitious, vague understanding of. I could do little bits and pieces and sort of make it work, but being able to set the properties with just a few &lt;code&gt;flex flex-column flex-*&lt;/code&gt; attributes made it faster. Getting that coding live-reloading in my browser as I made mistakes was the best interactive, REPL-like experience I&amp;rsquo;ve had to gain an intuitive understanding of the new CSS layout options. For that, Tailwind was invaluable.&lt;/p&gt;
&lt;h1 id=&#34;tailwind-as-macro-language&#34;&gt;Tailwind as Macro Language&lt;/h1&gt;
&lt;p&gt;It certainly is a lot less work to type &lt;code&gt;border-1&lt;/code&gt; than &lt;code&gt;border-width: 1px; border-style: solid;&lt;/code&gt;. This, I think, along with &lt;a href=&#34;https://tailwindcss.com/docs/backdrop-filter-blur&#34;&gt;popular UI tricks like blurred, semitransparent elements being baked in as simple attributes&lt;/a&gt; are the killer feature of Tailwind.&lt;/p&gt;
&lt;h1 id=&#34;reining-in-the-complexity-style-reuse&#34;&gt;Reining in the Complexity: Style Reuse&lt;/h1&gt;
&lt;p&gt;When I wanted a button-like element, I found myself going through a series of stages:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Style a single JSX component as-is with individual tailwind styles iteratively until I get to something that I like&lt;/li&gt;
&lt;li&gt;Start on a second component that I want to make look similar to it&lt;/li&gt;
&lt;li&gt;Copy/paste the style&lt;/li&gt;
&lt;li&gt;Eventually I want to do a refresh system wide, so I find all the overlapping classes, cut them out and reuse them in backticked strings; I have something like&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;TEXT_BUTTON&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;font-normal rounded-lg bg-neutral-100 dark:bg-neutral-500 p-2 text-xs border-neutral-300 border disabled:text-neutral-300 dark:text-neutral-100 dark:bg-neutral-600 cursor-pointer&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And then custom elements that further refine the style:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;span&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kr&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;TEXT_BUTTON&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt; rounded-l-none border-l-0 empty:hidden`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;onClick&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;BlinkElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;children&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/span&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I think this is where I begin to stray from the way most people use Tailwind: I have a tendency to write lots of very small components and I am a bikeshedder in my visual styles so keeping all the elements in sync requires the type of DRY the &lt;code&gt;&amp;quot;tailwind attribute soup&amp;quot;&lt;/code&gt; on every tag makes difficult.&lt;/p&gt;
&lt;h1 id=&#34;a-winning-combination-apply-and-vanilla-css&#34;&gt;A Winning Combination: &lt;code&gt;@apply&lt;/code&gt; and Vanilla CSS&lt;/h1&gt;
&lt;p&gt;Eventually I find myself wanting a &lt;code&gt;styles.css&lt;/code&gt; having a &lt;code&gt;.button&lt;/code&gt; class with all the inline constants pulled out. For the sake of readability and some light DRY, I&amp;rsquo;d rather my buttons be &lt;code&gt;&amp;lt;button className=&amp;quot;button button-specialization&amp;quot;&amp;gt;...&lt;/code&gt; than &lt;code&gt; &amp;lt;button className={``${TEXT_BUTTON} spec-1-attr spec-2-attr spec-3-attr``}&amp;gt;...&lt;/code&gt;; I then find myself doing this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;err&#34;&gt;@apply&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;font-normal&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;rounded-lg&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;bg-neutral-100&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dark&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bg-neutral-500&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p-2&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;xs&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;border&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;neutral-300&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;border&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;disabled&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;neutral-300&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dark&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;neutral-100&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dark&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bg-neutral-600&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;cursor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;button-specialization&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;err&#34;&gt;@apply&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;rounded-l-none&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;border-l-0&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;empty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;hidden&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That is; &lt;a href=&#34;https://tailwindcss.com/docs/functions-and-directives#apply-directive&#34;&gt;the @apply directive&lt;/a&gt; gives me Tailwind-style class macros in my CSS.&lt;/p&gt;
&lt;p&gt;I can now use a more traditional approach to CSS: rather than a blast of appearance-based attributes on an element I can give it a semantic role which has an associated set of visual properties attributed to it.&lt;/p&gt;
&lt;p&gt;I also needed this because I wanted to do some things with nested selectors that Tailwind did not entirely make possible (or at least easy). I found in places where it &lt;em&gt;could&lt;/em&gt; do selectors the shortened Tailwind attrs beyond &lt;code&gt;:has&lt;/code&gt; and &lt;code&gt;:not&lt;/code&gt; were harder to skim than fully-expressed CSS versions.&lt;/p&gt;
&lt;p&gt;Anyway, &lt;code&gt;@apply&lt;/code&gt; is awesome and I don&amp;rsquo;t see its use encouraged much in the literature I&amp;rsquo;ve seen online. There are probably pedantic reasons for it that are all very reasonable but don&amp;rsquo;t work for me. This worked for me.&lt;/p&gt;
&lt;h1 id=&#34;burning-the-ships&#34;&gt;Burning the Ships&lt;/h1&gt;
&lt;p&gt;And, once I am happy with the style and relatively certain they won&amp;rsquo;t change much going forward, I transform the core CSS with &lt;code&gt;@apply&lt;/code&gt;d styles to fully expanded CSS and cut out Tailwind as a build time dependency. I have used Tailwind as a way to bootstrap my design system, and then cut it out of my build when it has overstayed its welcome.&lt;/p&gt;
&lt;h1 id=&#34;thats-all&#34;&gt;That&amp;rsquo;s All&lt;/h1&gt;
&lt;p&gt;So that has been my last two years with Tailwind. I like it, it helped me get back up to speed with modern CSS and get a working visual prototype out the door quickly, I got tired of its class soup usage pattern, and I found that once I returned to old-fashioned CSS classes I could wean myself off it.&lt;/p&gt;
</description><category domain="https://www.jasonscheirer.com//tags/css">css</category>
      <category domain="https://www.jasonscheirer.com//tags/html">html</category>
      <category domain="https://www.jasonscheirer.com//tags/programming">programming</category>
      
    </item>
    
  </channel>
</rss>
