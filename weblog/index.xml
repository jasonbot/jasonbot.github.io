<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Weblog on Jason Scheirer</title>
    <link>https://www.jasonscheirer.com/weblog/</link>
    <description>Recent content in Weblog on Jason Scheirer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 04 Jan 2020 12:00:00 -0500</lastBuildDate><atom:link href="https://www.jasonscheirer.com/weblog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Registering Signs of Life in Long-Running Async Jobs in Python</title>
      <link>https://www.jasonscheirer.com/weblog/signs-of-life-in-async/</link>
      <pubDate>Sun, 13 Aug 2023 00:00:00 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/signs-of-life-in-async/</guid>
      <description>&lt;p&gt;At work I&amp;rsquo;m currently working on a fairly large system in which we have a pool of greedy workers, of unknown size, which can opt it at any time to the flow of work.&lt;/p&gt;
&lt;p&gt;A job is considered abandoned if it is marked as &lt;code&gt;IN_PROGRESS&lt;/code&gt; but the worker who has claimed it hasn&amp;rsquo;t phoned home in sone amount of time.&lt;/p&gt;
&lt;p&gt;The project is async, which makes things bot more and less interesting. It looks something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f&#34;&gt;@contextlib&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;contextmanager
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;run_keepalive_function_while_awaiting&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    call: typing&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;Callable[[&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;None&lt;/span&gt;], typing&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;Awaitable[&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;None&lt;/span&gt;]], interval: &lt;span style=&#34;color:#008000&#34;&gt;float&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alive &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;_keepalive&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;while&lt;/span&gt; alive:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;await&lt;/span&gt; call()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sleep(interval)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    asyncio&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;create_task(_keepalive(), name&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Keepalive task utilizing &lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;{&lt;/span&gt;call&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;yield&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alive &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And thjen basic usage is like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;do_the_work&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    job_id &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; uuid&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;uuid4()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;announce_signs_of_life&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        responses&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;post(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;http://job-scheduler/i-am-alive/&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;{job_id}&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;with&lt;/span&gt; run_keepalive_function_while_awaiting(announce_signs_of_life, &lt;span style=&#34;color:#666&#34;&gt;0.25&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;await&lt;/span&gt; do_long_running_task()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As long as the code block in the &lt;code&gt;run_keepalive_function_while_awaiting&lt;/code&gt; context manager is running, the system will run a background coroutine that periodically runs the keepalive function.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2023: Linux on the Desktop This Year</title>
      <link>https://www.jasonscheirer.com/weblog/linux-on-the-desktop-2023/</link>
      <pubDate>Mon, 07 Aug 2023 01:11:45 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/linux-on-the-desktop-2023/</guid>
      <description>&lt;p&gt;I have a Gaming PC I bought from Costco when my wife told me &amp;ldquo;I should maybe get back into my old hobbies&amp;rdquo; in the summer of 2020. It came with Win10, which is fine and it&amp;rsquo;s probably good to have at least one Windows machine in the house at any given time.&lt;/p&gt;
&lt;p&gt;The thing is: Windows is &lt;em&gt;annoying&lt;/em&gt;. Every time Windows ran an update I had to run &lt;a href=&#34;https://www.wagnardsoft.com/display-driver-uninstaller-DDU-&#34;&gt;a third-party uninstall tool&lt;/a&gt; to undo the changes Windows updates made to the graphics drivers, which started hanging and crashing if they weren&amp;rsquo;t the exact specific ones the machine shipped with.&lt;/p&gt;
&lt;p&gt;We had a flood in the winter of 2022. Our new home office was under half an inch of water and many of my electronics were unsalvageably water damaged. I placed this gaming machine (which hardly got any usage anyway) outside to dry.&lt;/p&gt;
&lt;p&gt;The case then accrued condensation inside, which convinced me this thing was now, if it had not been previously, fully water damaged e-waste.&lt;/p&gt;
&lt;p&gt;In April I was bored and wanted to see if I could at least save the hard drives before taking the machine to recycling. On a lark I tried to turn in on and surprise surprise, it booted no problem!&lt;/p&gt;
&lt;p&gt;Since I had already written it off as &amp;ldquo;dead,&amp;rdquo; I figured it was fine to put Linux on it. I had read about &lt;a href=&#34;https://nobaraproject.org/&#34;&gt;Nobara Linux&lt;/a&gt; as it was done by the same guy who does a bunch of Proton and SteamOS hacking, and it had a bunch of quality of life improvements to make it gaming friendly: it even had the Steam client installed out of the box. Once I got over my distaste of using a non-.deb based distro I was off to the races.&lt;/p&gt;
&lt;p&gt;I like the Gnome desktop. This ships with a newer version of it.&lt;/p&gt;
&lt;p&gt;For the whole &amp;ldquo;I need at least one Windows machine in the house&amp;rdquo; thing: Proton plays all my games. Steam on here does 95% of what I need. TYhe only Windows app I &lt;em&gt;really&lt;/em&gt; need is &lt;a href=&#34;https://www.xara.com/photo-graphic-plus/&#34;&gt;Xara&lt;/a&gt;, because I&amp;rsquo;ve been using it or its lineage since 1999 and I have muscle memory. Every attempt I&amp;rsquo;ve made in every flavor of Wine has failed, and even &lt;a href=&#34;http://www.xaraxtreme.org/&#34;&gt;the Linux versions they briefly released&lt;/a&gt; are now too bit-rotted to be usable on a modern installation on an x64 machine.&lt;/p&gt;
&lt;p&gt;So Wine mostly has me covered, but for that single app I&amp;rsquo;m now using &lt;a href=&#34;https://virt-manager.org/&#34;&gt;virt-manager&lt;/a&gt; to handle a single &lt;a href=&#34;https://archive.org/details/tiny-10-NTDEV&#34;&gt;Tiny10&lt;/a&gt; install, which is a custom &amp;ldquo;remix&amp;rdquo; of Windows that is so bare bones that it&amp;rsquo;s not even possible to install the &lt;a href=&#34;https://github.com/microsoft/terminal&#34;&gt;new Windows terminal&lt;/a&gt; on. But it&amp;rsquo;s got a very small footprint and it runs my programs and is &lt;em&gt;probably&lt;/em&gt; a better idea than an Win7 or XP VM.&lt;/p&gt;
&lt;p&gt;So Nobara has been fine for the past several months. I have &lt;a href=&#34;https://code.visualstudio.com/docs/setup/linux#_rhel-fedora-and-centos-based-distributions&#34;&gt;VS Code as an RPM source&lt;/a&gt;, I just download Go as &lt;code&gt;.tar.gz&lt;/code&gt; and plop it into &lt;code&gt;~&lt;/code&gt;, Python via &lt;a href=&#34;https://github.com/pyenv/pyenv&#34;&gt;PyEnv&lt;/a&gt;, and then &lt;a href=&#34;https://cloud.google.com/sdk/docs/install&#34;&gt;google cloud command line apps&lt;/a&gt;. Additionally, &lt;a href=&#34;https://flathub.org/en&#34;&gt;Flatpak&lt;/a&gt; has turned out to be this amazing dark horse over the past 3 years to find decent software in a distro-independent fashion. The only annoyance remaining is that there&amp;rsquo;s the occasional double-buffering-flicker thing that pops up on 3d accelerated UI apps.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hardware review: Anbernic RG35XX</title>
      <link>https://www.jasonscheirer.com/weblog/rg35xx/</link>
      <pubDate>Fri, 02 Jun 2023 08:00:00 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/rg35xx/</guid>
      <description>&lt;p&gt;Wanting a small, pocketable handheld for bus rides, etc., I saw the &lt;a href=&#34;https://www.keepretro.com/products/miyoo-mini&#34;&gt;Miyoo Mini&lt;/a&gt; and attempted to purchase one. They are &lt;em&gt;incredibly&lt;/em&gt; hard to acquire.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://anbernic.com/products/rg35xx&#34;&gt;Anbernic RG35XX&lt;/a&gt; presented itself as an alternative, and it was actually possible to buy one.&lt;/p&gt;
&lt;p&gt;I got one for about $60 on Amazon and was immediately in love. It had a decent built in game library, decent battery life, and was the perfect size. Not too big, not to small. Fits in a pants pocket or a little random orner of a carrying bag no problem.&lt;/p&gt;
&lt;p&gt;The stock SD card and OS is servicable, but I replaced it with my own SD card with my own legally acquired ROM library. I use &lt;a href=&#34;https://www.patreon.com/posts/garlicos-for-76561333&#34;&gt;GarlicOS&lt;/a&gt; and I&amp;rsquo;m quite happy with it. At one point &lt;a href=&#34;https://github.com/jasonbot/platinum-garlic&#34;&gt;I even made a skin for it&lt;/a&gt;. I normally play Neo-Geo, PSX, and GBA games. The best part about emulation is that all those quarter munchers become way more playable when you just have to hit select to insert a quarter. On an average Metal Slug run (any sequel) it would have cost me close to $20 based on how many times I get game overs.&lt;/p&gt;
&lt;p&gt;I like it so much that I bought my 5 year old one and put &lt;a href=&#34;https://github.com/shauninman/union-minui&#34;&gt;MinUI&lt;/a&gt; on it. Aside from being largely text-based which isn&amp;rsquo;t great for a 5 year old, it&amp;rsquo;s super usable and its no-frills approach makes it ideal for people who just want to play games.&lt;/p&gt;
&lt;p&gt;My only concern is that the only firmware that runs Dreamcast is &lt;a href=&#34;https://rg35xx-cfw.github.io/&#34;&gt;Batocera&lt;/a&gt;, which I am not particularly inclined to use as a daily driver.&lt;/p&gt;
&lt;p&gt;Honestly, I play this more than my Steam Deck. I take it with me all the time since it&amp;rsquo;s so small. Waiting rooms, the bus, it&amp;rsquo;s a great little thing to pull out when you have a few seconds to spare.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>VS Code: Dark Terminal on a Light Theme</title>
      <link>https://www.jasonscheirer.com/weblog/dark-terminal-on-a-light-theme/</link>
      <pubDate>Sun, 28 May 2023 08:00:00 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/dark-terminal-on-a-light-theme/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m a weirdo: on my IDEs I prefer a light theme, having used light themed IDEs since time immemorial (still miss using Visual Studio regularly). But I prefer white on black for my terminal emulators, as I have used that since time immemorial and a black on white terminal window doesn&amp;rsquo;t feel like a serious thing.&lt;/p&gt;
&lt;p&gt;So here&amp;rsquo;s what I added to my &lt;code&gt;settings.json&lt;/code&gt; to get the best of both worlds (light theme turned on):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;workbench.colorCustomizations&amp;#34;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;#34;terminal.foreground&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;#ffffff&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;#34;terminal.background&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;#303030&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Simple enough!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; &lt;a href=&#34;https://glitchbone.github.io/vscode-base16-term/&#34;&gt;This site&lt;/a&gt; has a panoply of copy-pastable terminal themes.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hardware review: Devterm</title>
      <link>https://www.jasonscheirer.com/weblog/devterm/</link>
      <pubDate>Thu, 16 Mar 2023 08:00:00 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/devterm/</guid>
      <description>&lt;p&gt;I bought a &lt;a href=&#34;https://www.clockworkpi.com/devterm&#34;&gt;Devterm&lt;/a&gt; a couple of years ago and it&amp;rsquo;s mostly been sitting in a drawer.&lt;/p&gt;
&lt;h2 id=&#34;the-good&#34;&gt;The good&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The thermal printer is novel&lt;/li&gt;
&lt;li&gt;The form factor makes it super portable&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;the-bad&#34;&gt;The bad&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;OS support is not great, at one point I built my own Raspbian image because the official one had drifted so far out of date that the apt repos stopped working&lt;/li&gt;
&lt;li&gt;The keyboard and trackball (even with flashed firmware) are painful to use&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Hardware review: 1st Gen SteamDeck (512MB)</title>
      <link>https://www.jasonscheirer.com/weblog/steamdeck/</link>
      <pubDate>Wed, 08 Feb 2023 08:00:00 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/steamdeck/</guid>
      <description>&lt;p&gt;I bought a &lt;a href=&#34;https://www.steamdeck.com/en/&#34;&gt;Steam Deck&lt;/a&gt;. I was on a waiting list that said I would get it until this year (2023), but it arrived in October 2022.&lt;/p&gt;
&lt;p&gt;This thing is so versatile thanks to its Desktop Mode. For games like the boomer shooters I so love, I can dock the Deck and play with a mouse and keyboard and nicer monitor. I can install Flatpaks.&lt;/p&gt;
&lt;p&gt;The gaming experience is bar none the best. Steam OS is an accomplishment. It has none of the fiddly bits around power management etc that a standard Linux machine does. It&amp;rsquo;s a usable, console-quality experience.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hardware review: AOKZOE A1</title>
      <link>https://www.jasonscheirer.com/weblog/aokzoe-a1/</link>
      <pubDate>Sun, 01 Jan 2023 08:00:00 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/aokzoe-a1/</guid>
      <description>&lt;p&gt;I kickstarted the &lt;a href=&#34;https://aokzoestore.com/products/aokzoe-8-inch-amd%C2%AE-ryzen%C2%AE-6800u&#34;&gt;AOKZOE A1&lt;/a&gt; when I was utterly convince that I would never get a Steam Deck.&lt;/p&gt;
&lt;p&gt;Joke&amp;rsquo;s on me; the Deck arrived before the A1.&lt;/p&gt;
&lt;p&gt;I primarily use this system as my sole Win11 machine, so it does a lot of light desktop work. It is also my &amp;ldquo;travel&amp;rdquo; laptop; when I&amp;rsquo;m travelling I take this and not my Steam Deck. Everything is tunable, but it draws way more power than a Deck and generally lasts about the same amount of time even with the larger battery.&lt;/p&gt;
&lt;p&gt;The bundled OS is pretty close to stock Win11 and contains very little bloat. The A1 sidebar app that shows up when you press the turbo button is servicable, and themable. I went from the obnoxious gamer green UI to something more muted and transparent.&lt;/p&gt;
&lt;p&gt;One annoying thing about the &amp;ldquo;community&amp;rdquo; is you have to join thew AOKZOE Discord to find out the latest software updates, etc. Since AOKZOE is primarily a Chinese company, and a young one at that, much of the injformation about the device is locked away in Chinese-language web sites and you need the Discord to find and filter out the important parts.&lt;/p&gt;
&lt;p&gt;I cannot say enough good things about the display. Blows the Deck out of the water.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;TL;DR&lt;/em&gt;: The hardware is amazing, the support not so much. The screen and the gaming power are the big draws.&lt;/p&gt;
&lt;p&gt;The A1 has been supplanted by the A1 Pro at this point, so you should be able to find A1s much cheaper now.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hardware review: iPhone 13 Mini</title>
      <link>https://www.jasonscheirer.com/weblog/iphone-13-mini/</link>
      <pubDate>Thu, 29 Dec 2022 08:00:00 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/iphone-13-mini/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m not going into specs or specific details on this device. I was on an iPhone XS, which has slowly been degrading over time. Battery was slowly dying, replaced it at the Apple Store, the ribbon cable for the display was not adequately clipped back into place. It was easier to just order a new phone than to take the bus up to Emeryville again in the middle of the day for an appointment.&lt;/p&gt;
&lt;p&gt;I am very happy with this piece of hardware. I held onto my iPhone 4 then original iPhone SE because I liked the form factor. Got the XS when it came out because my phone was dead and it was the smallest one on the market at the time.&lt;/p&gt;
&lt;p&gt;With smaller devices there is a smaller battery: my Kid&amp;rsquo;s iPad runs a week on a charge. This runs a day.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s an iPhone. It&amp;rsquo;s small. It takes good pictures. It runs iOS. The migration story from an older phone is simple &amp;ndash; the only two apps that took extra attention were Google Auth and Duo. Since I migrated from backup, most other accounts/devices carried over without issue.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mixed Async code in Sync Python: Disappointingly Simple</title>
      <link>https://www.jasonscheirer.com/weblog/mixed-async-disappointingly-simple/</link>
      <pubDate>Fri, 23 Sep 2022 00:00:00 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/mixed-async-disappointingly-simple/</guid>
      <description>&lt;p&gt;One thing I love about Python&amp;rsquo;s practical approach to type annotations and enforcement is that it&amp;rsquo;s gradual: you can rapidly code a large ball of mud and get it working, then refine it to make it safer with typing later on.&lt;/p&gt;
&lt;p&gt;Chalk this up as another good idea (possibly by accident) for Python: you can do the same with async.&lt;/p&gt;
&lt;p&gt;At work, someone lamented that threads aren&amp;rsquo;t quite safe but they needed to do multiple http requests in parallel.&lt;/p&gt;
&lt;p&gt;After being &lt;em&gt;that asshole&lt;/em&gt; and suggesting they rewrite the entire app as an async app, I went in and poked around for a few hours. I experimented and coded and came up with a simple, almost disappointingly so, solution:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;aiohttp&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;fetch_url&lt;/span&gt;(session, url) &lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#008000&#34;&gt;str&lt;/span&gt;, &lt;span style=&#34;color:#008000&#34;&gt;str&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#d2413a;font-weight:bold&#34;&gt;Exception&lt;/span&gt;]:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;try&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;with&lt;/span&gt; session&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;get(url) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;as&lt;/span&gt; result:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; (url, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;await&lt;/span&gt; result&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;text())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#d2413a;font-weight:bold&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;as&lt;/span&gt; e:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; (url, e)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;fetch_urls_async&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;urls) &lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;dict&lt;/span&gt;[&lt;span style=&#34;color:#008000&#34;&gt;str&lt;/span&gt;, &lt;span style=&#34;color:#008000&#34;&gt;str&lt;/span&gt;]:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;with&lt;/span&gt; aiohttp&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;Session() &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;as&lt;/span&gt; session:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            url: &lt;span style=&#34;color:#008000&#34;&gt;str&lt;/span&gt;(status)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; url, status &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;in&lt;/span&gt; asyncio&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;gather(fetch_url(session, url) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; url &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;in&lt;/span&gt; urls)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;get_multiple_urls&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;dict&lt;/span&gt;[&lt;span style=&#34;color:#008000&#34;&gt;str&lt;/span&gt;, &lt;span style=&#34;color:#008000&#34;&gt;str&lt;/span&gt;]:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; asyncio&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;run(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        fetch_urls_async(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;http://www.google.com&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;http://www.zombo.com&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f&#34;&gt;@flaskapp&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;route(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main_sync_route&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; get_multiple_urls()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The three parts to make this work:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;async&lt;/code&gt;-colored functions&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3/library/asyncio-task.html#asyncio.gather&#34;&gt;&lt;code&gt;asyncio.gather&lt;/code&gt;&lt;/a&gt; to run a pool of jobs&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3/library/asyncio-task.html#asyncio.run&#34;&gt;&lt;code&gt;asyncio.run&lt;/code&gt;&lt;/a&gt; to run a block of async code in a sync context&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Long story short: &lt;code&gt;asyncio.run&lt;/code&gt; does exactly what it says on the tin with minimal fuss. If you&amp;rsquo;re not in an async event loop in the current thread, it starts one for you, runs the async function as its main, then blocks until it&amp;rsquo;s done.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Modern Python: New Features, Better Code</title>
      <link>https://www.jasonscheirer.com/weblog/new-features-better-code/</link>
      <pubDate>Thu, 15 Sep 2022 00:00:00 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/new-features-better-code/</guid>
      <description>&lt;p&gt;I wrote a blog post &lt;a href=&#34;https://www.easypost.com/blog/2022-09-14-modern-python-new-features-better-code&#34;&gt;that is now on my employer&amp;rsquo;s engineering blog&lt;/a&gt;. I used my normal Markdown/Hugo/Github flow to author and edit it, so if you want to see the revision history &lt;a href=&#34;https://github.com/jasonbot/weblog/commits/master/content/weblog/new-features-better-code.md&#34;&gt;it&amp;rsquo;s right here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Anime Watcher: Another Game</title>
      <link>https://www.jasonscheirer.com/weblog/the-anime-watcher/</link>
      <pubDate>Wed, 07 Sep 2022 00:00:00 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/the-anime-watcher/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://jasonbot.itch.io/anime-watcher&#34;&gt;I wrote another game game&lt;/a&gt; for a &lt;a href=&#34;https://itch.io/jam/mini-jam-114-anime&#34;&gt;Weekend Game Jam with an Anime theme&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A short bit of interactive fiction.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s Webassembly using &lt;a href=&#34;https://ebiten.org/&#34;&gt;ebitengine&lt;/a&gt;.&lt;/p&gt;

&lt;iframe src=&#34;https://itch.io/embed-upload/6466103?color=161616&#34; allowfullscreen=&#34;&#34; width=&#34;600&#34; height=&#34;420&#34; frameborder=&#34;0&#34;&gt;&lt;a href=&#34;https://jasonbot.itch.io/anime-watcher&#34;&gt;Play The Anime Watcher on itch.io&lt;/a&gt;&lt;/iframe&gt;

</description>
    </item>
    
    <item>
      <title>A Case for Match</title>
      <link>https://www.jasonscheirer.com/weblog/a-case-for-match/</link>
      <pubDate>Fri, 26 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/a-case-for-match/</guid>
      <description>&lt;p&gt;The Python 3.10 release includes the &lt;a href=&#34;https://docs.python.org/3/reference/compound_stmts.html#the-match-statement&#34;&gt;new &lt;code&gt;match&lt;/code&gt; statement&lt;/a&gt;, which superficially looks like the &lt;code&gt;case&lt;/code&gt;/&lt;code&gt;switch&lt;/code&gt; statements in other languages but semantically is closer to pattern matching in &lt;a href=&#34;http://learnyouahaskell.com/syntax-in-functions&#34;&gt;Haskell&lt;/a&gt; or &lt;a href=&#34;https://doc.rust-lang.org/book/ch18-03-pattern-syntax.html&#34;&gt;Rust&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Like the &lt;a href=&#34;https://docs.python.org/3/reference/expressions.html#assignment-expressions&#34;&gt;walrus operator&lt;/a&gt;*, I struggled to find a use case for this and it seemed like a feature that was added just because the language is 30+ years old and all the &lt;em&gt;good&lt;/em&gt; new functionality is taken.&lt;/p&gt;
&lt;p&gt;However, I found a pretty good case for it that used to be a lot more work: duck-typey arguments that make default case rules easy but enable more complex functionality as needed.&lt;/p&gt;
&lt;p&gt;Namely, I&amp;rsquo;m writing a REST API at work that is &lt;em&gt;mostly&lt;/em&gt; CRUD, but for historical reasons certain field names in JSON payloads do not match up with their ORM equivalents (which in turn may not match up with their DB column equivalents).&lt;/p&gt;
&lt;p&gt;First off, we get a dict and want to just specify the keys we care about:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;typing&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;copy_keys&lt;/span&gt;(&lt;span style=&#34;color:#008000&#34;&gt;input&lt;/span&gt;: &lt;span style=&#34;color:#008000&#34;&gt;dict&lt;/span&gt;, keep_keys: typing&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;Iterable[typing&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;Hashable]):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   keep_set &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;set&lt;/span&gt;(keep_keys)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; {k: v &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; k, v &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;input&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;items() &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;in&lt;/span&gt; keep_set}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000&#34;&gt;print&lt;/span&gt;(copy_keys(x, [&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;]))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# {&amp;#39;a&amp;#39;: 1, &amp;#39;c&amp;#39;: 3}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Simple enough. Now what if we need to &lt;em&gt;remap&lt;/em&gt; our keys?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000&#34;&gt;print&lt;/span&gt;(copy_keys(x, [&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, (&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;)]))  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# We want:{&amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: 3}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Well, we can use pattern matching:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;typing&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;copy_keys&lt;/span&gt;(&lt;span style=&#34;color:#008000&#34;&gt;input&lt;/span&gt;: &lt;span style=&#34;color:#008000&#34;&gt;dict&lt;/span&gt;, keep_keys: typing&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;Iterable[typing&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;Hashable &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; typing&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;Tuple[typing&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;Hashable, typing&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;Hashable]]):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    keep_map &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;in&lt;/span&gt; keep_keys:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        match item:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            case (from_key, to_key):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                keep_map[from_key] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; to_key
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            case key:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                keep_map[key] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; key
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000&#34;&gt;print&lt;/span&gt;(keep_map)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; {keep_map[k]: v &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; k, v &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;input&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;items() &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;in&lt;/span&gt; keep_map}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000&#34;&gt;print&lt;/span&gt;(copy_keys(x, [&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, (&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;)]))  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# {&amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: 3}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Simpler than the &lt;code&gt;isinstance(x, tuple) and len(x) == 2&lt;/code&gt; dance we&amp;rsquo;d have to do in prior Pythons. The &lt;code&gt;match&lt;/code&gt; statement can help write library code that is clean and easy to use while at the same time being clear and less magical than it would have been in previous Pythons.&lt;/p&gt;
&lt;p&gt;* The one case I have come up with for Walrus that makes sense:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; (x &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; do_something()) &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;None&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    x&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;do_something_else()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Python as a Language is Inescabably Coupled with its Implementation Part 2: The Tracer</title>
      <link>https://www.jasonscheirer.com/weblog/python-will-never-be-decoupled-from-its-implementation-2/</link>
      <pubDate>Wed, 10 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/python-will-never-be-decoupled-from-its-implementation-2/</guid>
      <description>&lt;p&gt;I was recently discussing some dumb Python tricks at work with some colleagues and showed them &lt;a href=&#34;https://gist.github.com/jasonbot/8679558&#34;&gt;this old Gist I wrote&lt;/a&gt;, which in modern times I would rewrite to look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;functools&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;inspect&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f&#34;&gt;@functools&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;lru_cache
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;getlines&lt;/span&gt;(filename):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;open&lt;/span&gt;(filename, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;as&lt;/span&gt; file_handle:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;tuple&lt;/span&gt;(file_handle)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f&#34;&gt;@functools&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;lru_cache
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;getline&lt;/span&gt;(filename, line_number):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; getlines(filename)[line_number &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;tracefunction&lt;/span&gt;(frame, event, arg):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; event &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;line&amp;#34;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        info &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; inspect&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;getframeinfo(frame)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        fname, lineno, fn &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; info&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;filename, info&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;lineno, info&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;function
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#008000&#34;&gt;print&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ba2121&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;gt; Function: &lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;{&lt;/span&gt;fn&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt; (in file &lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;{&lt;/span&gt;fname&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;{&lt;/span&gt;lineno&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;) &amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ba2121&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;| &lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;{&lt;/span&gt;getline(fname, lineno)&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; tracefunction
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;registertracefunction&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sys&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;settrace(tracefunction)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;registertracefunction()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;mainfunction&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#008000&#34;&gt;print&lt;/span&gt;(x &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mainfunction()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run the code for a treat!&lt;/p&gt;
&lt;p&gt;while not as elegantly self-bootstrapping as other languages like a Lisp, Python does have lots of idiomatic, strange ways of doing Python in Python. In this case, you can set a trace function (normally reserved for writing debuggers) and do something very meta and &lt;em&gt;print the dang line&lt;/em&gt; as it executes.&lt;/p&gt;
&lt;p&gt;Now, this is neat and clever but it&amp;rsquo;s also largely a CPython-specific set of internal details: how would one expect to implement this API in another &amp;ldquo;flavor&amp;rdquo; of Python like IronPython or Jython which have their own runtimes that look nothing like the CPython bytecode interpreter?&lt;/p&gt;
&lt;p&gt;Note &lt;em&gt;this is in the standard library&lt;/em&gt;. Those poor developers would have to either 1) write this API off and get derogatorily accused of stunting their Python or do insane things to make what is trivial in CPython with byzantine .Net or JVM internals* to achieve parity.&lt;/p&gt;
&lt;p&gt;* How would one expect this to work when calling native .Net code? What kind of decoration would need to be annotated to the compiled Python VM bytecode to make the Python runtime in that system aware that it&amp;rsquo;s reentered Python? It fills me with fear.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Trump Run: A Game</title>
      <link>https://www.jasonscheirer.com/weblog/trump-run/</link>
      <pubDate>Mon, 25 Jul 2022 00:00:00 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/trump-run/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://jasonbot.itch.io/trump-run&#34;&gt;I wrote a game&lt;/a&gt; inspired by &lt;a href=&#34;https://twitter.com/joolsd/status/1541929360441081857&#34;&gt;a tweet&lt;/a&gt; a coworker shared on a work Slack channel a few weeks back.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s Webassembly using &lt;a href=&#34;https://ebiten.org/&#34;&gt;ebitengine&lt;/a&gt;.&lt;/p&gt;

&lt;iframe src=&#34;https://itch.io/embed-upload/6208200?color=262b44&#34; allowfullscreen=&#34;&#34; width=&#34;640&#34; height=&#34;500&#34; frameborder=&#34;0&#34;&gt;&lt;a href=&#34;https://jasonbot.itch.io/trump-run&#34;&gt;Play Trump Run on itch.io&lt;/a&gt;&lt;/iframe&gt;

</description>
    </item>
    
    <item>
      <title>Little Guys! A Puzzle Game Without Enough Levels</title>
      <link>https://www.jasonscheirer.com/weblog/little-guys/</link>
      <pubDate>Sun, 24 Jul 2022 00:00:00 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/little-guys/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://jasonbot.itch.io/little-guys&#34;&gt;I wrote another small puzzle game&lt;/a&gt; for a &lt;a href=&#34;https://itch.io/jam/mini-jam-111-colors&#34;&gt;Weekend Game Jam with the theme &lt;em&gt;Colors&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s Webassembly using &lt;a href=&#34;https://ebiten.org/&#34;&gt;ebitengine&lt;/a&gt;.&lt;/p&gt;

&lt;iframe src=&#34;https://itch.io/embed-upload/6226779?color=63c64d&#34; allowfullscreen=&#34;&#34; width=&#34;360&#34; height=&#34;380&#34; frameborder=&#34;0&#34;&gt;&lt;a href=&#34;https://jasonbot.itch.io/little-guys&#34;&gt;Play Little Guys (A Puzzle Game) on itch.io&lt;/a&gt;&lt;/iframe&gt;

</description>
    </item>
    
    <item>
      <title>Async programming: understanding it from fundamentals</title>
      <link>https://www.jasonscheirer.com/weblog/understanding-async-programming-from-fundamentals/</link>
      <pubDate>Tue, 12 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/understanding-async-programming-from-fundamentals/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This was inspired by a short chat I had with a coworker, trying to give a simple, 15 minute explanation of something that took me a decade to wrap my head around due to poor teaching resources online.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Async programming in modern &amp;ldquo;industrial&amp;rdquo; languages is shrouded in magic, abstractions, and years of atrocious decisions (looking at you, Javascript/Python). Most tutorials start out with &amp;ldquo;just mark your function &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; it and use these magic incantations and you&amp;rsquo;re good to go!&amp;rdquo; without explaining the underlying concepts that were built up&lt;/p&gt;
&lt;h2 id=&#34;async-is-mostly-only-good-for-things-with-long-unpredictable-waits&#34;&gt;Async is (mostly) only good for things with long, unpredictable waits&lt;/h2&gt;
&lt;p&gt;What has long, unpredictable wait times? Anything I/O bound, &lt;em&gt;especially&lt;/em&gt; network traffic. CPU bound tasks were solved long ago with several approaches, namely threading and SIMD instruction data sets. I/O can still bring a multithreaded application to its knees.&lt;/p&gt;
&lt;p&gt;Based on this, threading on its own isn&amp;rsquo;t &lt;em&gt;necessarily&lt;/em&gt; the best way to approach this, or at least, not polling by spawning one thread per open connection. With a single-threaded approach, at least for the I/O part, how would we go about it? IT probably makes sense to have a blocking call on not just one socket, but &lt;em&gt;many&lt;/em&gt;.
That is, instead of &lt;code&gt;socket.wait()&lt;/code&gt; we could call &lt;code&gt;[socket1, socket2, ...].wait()&lt;/code&gt;. Note we could already discount something with a &lt;code&gt;.ready()&lt;/code&gt; poll instead of a &lt;code&gt;.wait()&lt;/code&gt; because&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;True&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; [socket &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; socket &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;in&lt;/span&gt; sockets &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; socket&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;ready_to_read()]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;would thrash the CPU and turn the server into a space heater. A block would be better.&lt;/p&gt;
&lt;h2 id=&#34;select-the-great-granddaddy-of-async-programming&#34;&gt;&lt;code&gt;select&lt;/code&gt;: The great granddaddy of async programming&lt;/h2&gt;
&lt;p&gt;In general, with I/O bound programs, you&amp;rsquo;d probably want to avoid spawning a thread for every request because that&amp;rsquo;s pretty hard on the OS kernel and not particularly scalable. If you could &lt;em&gt;move&lt;/em&gt; all those waiting-on-input blocks to the kernel, where it should live, that would help.&lt;/p&gt;
&lt;p&gt;So in theory, if you listen to a list of open network sockets, you want to just block and get a list of handles with data ready to go. In Python pseudocode:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;True&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; socket &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;in&lt;/span&gt; magic_handler(list_of_sockets)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        handle_data_ready(socket&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;id, socket&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;read())
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or to expand more closely to &amp;ldquo;working&amp;rdquo; code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# The open TCP socket accepting connections&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;listener &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; socket&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;listen()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sockets &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; [listener]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;handlers &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Loop until loop is broken&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;True&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Handles to close this iteration&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    closed_handle_ids &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;set&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    handles &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; magic_listener(sockets)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Go over currently ready-to-read connections&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; handle &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;in&lt;/span&gt; handles:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Is this the listening socket?&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; handle&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;id &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; listener&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;id:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Get the actual connection we just established from the listener&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            new_handle &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; handles&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;append(handle&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;accept())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            sockets&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;add(new_handle)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            handlers &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; ConnectionHandler(handle)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Is this a request handler?&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Feed the handler the data ready&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            handlers[handle&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;id]&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;handle_data(handle&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;read())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Is this handle done with its request?&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; handle&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;done:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            closed_handle_ids&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;append(handle&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;id)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            handlers[handle&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;id]&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;close()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;del&lt;/span&gt; handlers[handle&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;id]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Done listening (this is the special listener socket)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; handle&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;id &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; listener&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;id:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Delete active handles&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sockets &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; [s &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; s &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;in&lt;/span&gt; sockets &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; s&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;id &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;in&lt;/span&gt; closed_handle_ids]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can see this is already getting scary just looking at basic cases without error handling. You probably don&amp;rsquo;t want to roll this code on your own.&lt;/p&gt;
&lt;p&gt;So there&amp;rsquo;s the original Posix function &lt;code&gt;select&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt; nfds, fd_set &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;readfds, fd_set &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;writefds, fd_set &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;errorfds, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;struct&lt;/span&gt; timeval &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;timeout);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It&amp;rsquo;s even more complex than the code above in that it handles read/write/error states, but the main concept is still clearly there: a blocking call that returns list of handles for read/write when they are ready.&lt;/p&gt;
&lt;h3 id=&#34;moving-on&#34;&gt;Moving on&lt;/h3&gt;
&lt;p&gt;From this basic understanding, you can intuit that 1) there are probably a lot of corner cases to debug and 2) there is probably a better way to do it.&lt;/p&gt;
&lt;p&gt;And from here you now understand 1) the need for the amorphous &amp;ldquo;event loop&amp;rdquo; provided by a third-party library that has gone through the long process of fishing out edge cases and bugs so you don&amp;rsquo;t have to and 2) the evolution of new APIs like &lt;code&gt;epoll&lt;/code&gt; and &lt;code&gt;kqueue&lt;/code&gt; that do the same thing, but better. And, as a bonus, a combination of both in abstraction libraries like &lt;code&gt;libevent&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;cooperative-multitasking-and-event-loops&#34;&gt;&amp;ldquo;Cooperative&amp;rdquo; multitasking and event loops&lt;/h2&gt;
&lt;p&gt;This is a problem as old as time. Even on older desktop frameworks like Classic Mac OS and Windows the default for applications was by design to run in a single-threaded event loop and the program is expected yield to the operating system periodically so it could do housekeeping tasks and let other running apps run for a slice of time too.&lt;/p&gt;
&lt;p&gt;Lots of software are bad citizens. Doing CPU intensive work in this type of framework will inevitably not yield to the loop at a reasonable clip and cause the entire system to become unresponsive. This can still hit you with asynchronous apps today.&lt;/p&gt;
&lt;h2 id=&#34;we-need-a-scheduler&#34;&gt;We need a scheduler&lt;/h2&gt;
&lt;p&gt;On a higher level, especially in interpreted languages, it&amp;rsquo;s possible during code execution to say &amp;ldquo;this item has used &lt;em&gt;N&lt;/em&gt; opcodes, let&amp;rsquo;s pump the brakes a second.&amp;rdquo; This has the potential in the event loop to make long running code that does not yield not hang the whole system and also lets you transparently spin off subtasks (&amp;ldquo;green threads&amp;rdquo;) with impunity from your function and be able to trust they will run.&lt;/p&gt;
&lt;h2 id=&#34;the-iterator-protocol-in-python-and-cooperative-multitasking&#34;&gt;The iterator protocol in Python and &amp;ldquo;cooperative&amp;rdquo; multitasking&lt;/h2&gt;
&lt;p&gt;In Python, you can make a function a &lt;em&gt;generator&lt;/em&gt; by using the &lt;code&gt;yield&lt;/code&gt; keyword at least once. You then run the function by calling it with arguments, which in turn returns a generator, which you can use the &lt;code&gt;next()&lt;/code&gt; builtin on or use in a &lt;code&gt;for&lt;/code&gt; loop.&lt;/p&gt;
&lt;p&gt;This gives us a framework for &amp;ldquo;cooperative&amp;rdquo; multitasking. Consider this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;generators &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;add_task&lt;/span&gt;(generator):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    generators&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;append(generator)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;task&lt;/span&gt;(generation&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#008000&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Hello from generation &lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;{&lt;/span&gt;generation&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;yield&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; generation &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        (&lt;span style=&#34;color:#ba2121&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Adding task from generation &lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;{&lt;/span&gt;generation&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        add_task(generation&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;yield&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#008000&#34;&gt;print&lt;/span&gt;((&lt;span style=&#34;color:#ba2121&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Generation &lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;{&lt;/span&gt;generation&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt; is done&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; generation
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;event_loop&lt;/span&gt;(start_generator):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    generators&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;append(start_generator)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;while&lt;/span&gt; generators:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        generator &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; generators&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;try&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#008000&#34;&gt;next&lt;/span&gt;(generator)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Push &amp;#34;coroutine&amp;#34; to end of task list&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            generators&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;append(generator)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#d2413a;font-weight:bold&#34;&gt;StopIteration&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;as&lt;/span&gt; e:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#008000&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Generator finished and returned &lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;{&lt;/span&gt;e&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;value&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Start the &amp;#34;event loop&amp;#34; with a single root task.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;event_loop(task())
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This code takes a generator, iterates over it until it&amp;rsquo;s done, and also allows it to add new subtasks to the cooperative job runner. Now you&amp;rsquo;ve got an interpreter-level event loop; the event loop could be smarter and look at each &lt;code&gt;yield&lt;/code&gt;s yield value, and if it&amp;rsquo;s a filehandle etc the even loop could take that, squirrel it away into a list of handles being waited on, and not add the generator back into the queue until a &lt;code&gt;select&lt;/code&gt; call says that handle is ready for reading again. I.E. &lt;code&gt;yield handle.read()&lt;/code&gt; where &lt;code&gt;handle.read()&lt;/code&gt; sends off some sort of object with a file handle ID to the scheduler and then the event loop does a &lt;code&gt;.send()&lt;/code&gt; with the data ready to be read so you could do &lt;code&gt;data = yield handle.read()&lt;/code&gt; and have the event loop be able to push your coroutine aside in an efficient way until it&amp;rsquo;s ready to go again. This also lets you do other blocking calls like &lt;code&gt;time.sleep()&lt;/code&gt; in a cooperative manner, too.&lt;/p&gt;
&lt;p&gt;That is, making our own &amp;ldquo;cooperative&amp;rdquo; event loop based on iterators makes it possible to make otherwise blocking calls non-blocking to cooperating green threads, delegating the long wait to the event loop and also making it possible to spawn new green threads within that event loop.&lt;/p&gt;
&lt;h2 id=&#34;promises&#34;&gt;Promises&lt;/h2&gt;
&lt;p&gt;One concept of industrial async applications is the concept of a &lt;em&gt;Promise&lt;/em&gt;: a function will return a &lt;em&gt;Promise&lt;/em&gt; rather than an actual return value, and shove off its workload using something approximating the above iterator to the event loop.&lt;/p&gt;
&lt;p&gt;A promise is an cooperatively async way of doing this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;promise&lt;/span&gt;(fn, then, error):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;try&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        val &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; fn()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        then(val)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#d2413a;font-weight:bold&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;as&lt;/span&gt; e:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        error(e)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, it&amp;rsquo;s fairly ugly in practice in Javascript and is a lot more jarring to write a pyramid of &lt;code&gt;.then()&lt;/code&gt; calls to do sequential code. This is what most Javascript in the wild does; but it&amp;rsquo;s jarring and it would be nicer to get a syntax closer to the above with &lt;code&gt;yield&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;async-and-await-syntactic-and-semantic-sugar-on-promises&#34;&gt;&lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt;: Syntactic and semantic sugar on Promises&lt;/h2&gt;
&lt;p&gt;As we discussed above, with an interpreted language we can easily implement in our runtime an implicit event loop and a forced &amp;ldquo;cooperative&amp;rdquo; mode that can pause code after a certain number of opcodes.&lt;/p&gt;
&lt;p&gt;Many languages (Python/Javascript/C#/etc) have introduced the &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; keywords, all semantically similar. Marking a function as &lt;code&gt;async&lt;/code&gt; informs the interpreter/runtime that this function will span cooperative &amp;ldquo;subtasks&amp;rdquo; and need to be put into consideration for the event loop&amp;rsquo;s scheduler.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;await&lt;/code&gt; keyword says &amp;ldquo;push this async function onto the list of green threads and call me back when it finishes/errors with the result.&amp;rdquo; It pauses the function that &lt;code&gt;await&lt;/code&gt;s and doesn&amp;rsquo;t put it back into the stack until the dependent green thread returns or fails, and then pushes the paused coroutine into the list of active green threads and sends it the return value.&lt;/p&gt;
&lt;h2 id=&#34;the-problem&#34;&gt;The problem&lt;/h2&gt;
&lt;p&gt;Async code &lt;em&gt;can still block&lt;/em&gt; if it calls synchronous functions, and you have to keep track of what code &lt;em&gt;is&lt;/em&gt; and &lt;em&gt;isn&amp;rsquo;t&lt;/em&gt; async, avoiding mixing the two. Python, by nature of having an event loop at the interpreter level, is more susceptible to this than Javascript, but you still need to take care not to call long-running non-async functions from async code.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope this helps build up from fundamentals the basics of how async programming works in modern systems.&lt;/p&gt;
&lt;h2 id=&#34;further-reading&#34;&gt;Further Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/&#34;&gt;What color is your function?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3/reference/expressions.html#yieldexpr&#34;&gt;Python &lt;code&gt;yield&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://peps.python.org/pep-0342/&#34;&gt;Coroutines via enhanced iterators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://peps.python.org/pep-0492/&#34;&gt;Python Coroutines with &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; Syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&#34;&gt;Javascript Promises&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await&#34;&gt;Javascript &lt;code&gt;await&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Modern Python: Features I Haven&#39;t Used But Plan To</title>
      <link>https://www.jasonscheirer.com/weblog/modern-python-features-that-are-still-sinking-in/</link>
      <pubDate>Mon, 11 Jul 2022 00:00:00 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/modern-python-features-that-are-still-sinking-in/</guid>
      <description>&lt;p&gt;Python has continued to progress and introduce new features and modules. In this post I&amp;rsquo;ll cover features I haven&amp;rsquo;t used much (or at all) and how I plan on using or not using them.&lt;/p&gt;
&lt;h2 id=&#34;walrus-operator&#34;&gt;Walrus Operator&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve been aware of this for a few years. I&amp;rsquo;ve found about 3 times where I&amp;rsquo;ve found it appropriate to use. It&amp;rsquo;s nice but not a huge change to the way I code. Generally in the pattern&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; (thing &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; function_call()) &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;None&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    thing&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;do_stuff()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;name-only-parameters&#34;&gt;Name-only parameters&lt;/h2&gt;
&lt;p&gt;I actually use this a &lt;em&gt;lot&lt;/em&gt;, especially with any function that has more than 2 arguments. Forcing the consumer of your library code to explicitly name the parameters makes their code more readable. When you do&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;do_my_task&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;, client, schema_dataclass, callback):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and &lt;em&gt;force&lt;/em&gt; users to call it like &lt;code&gt;do_my_task(client=self.client, schema_dataclass=DataSchema, callback=self.done)&lt;/code&gt;, it overall makes code more easy to skim through.&lt;/p&gt;
&lt;h2 id=&#34;async&#34;&gt;Async&lt;/h2&gt;
&lt;p&gt;Long ago I spent entirely too long fighting with &lt;a href=&#34;https://twisted.org/&#34;&gt;Twisted&lt;/a&gt; (and writing more boilerplate than substance) and became convinced that asynchronous programming, though its improved performance on I/O bound tasks (that is, every task you&amp;rsquo;d realistically expect to see in a professional setting) outweigh the pain caused by writing them (allegedly).&lt;/p&gt;
&lt;p&gt;I was always a big fan of the &lt;a href=&#34;http://www.gevent.org/&#34;&gt;gevent&lt;/a&gt; library because it let you write async code that looked like syncronous code. Like a decent language like Go or Java let you do.&lt;/p&gt;
&lt;p&gt;Instead, Python has fallen prey to the nasty &lt;a href=&#34;https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/&#34;&gt;colored functions&lt;/a&gt; bug and added, almost identically, Javascript&amp;rsquo;s approach to async. Booo. It even &lt;a href=&#34;https://peps.python.org/pep-0492/&#34;&gt;abuses the iterator protocol&lt;/a&gt; to achieve its dark ends.&lt;/p&gt;
&lt;p&gt;However, this &lt;em&gt;is&lt;/em&gt; built into the standard library and I am reluctantly starting to accept it and write code for it. &lt;a href=&#34;https://www.tornadoweb.org/en/stable/&#34;&gt;Tornado&lt;/a&gt; is fine, I guess.&lt;/p&gt;
&lt;h2 id=&#34;structural-pattern-matching&#34;&gt;Structural Pattern Matching&lt;/h2&gt;
&lt;p&gt;This one seems like another way to abuse metaprogamming. It looks on its face like a &lt;code&gt;switch&lt;/code&gt; statement, so will likely be misunderstood in the same semantic ways the &lt;code&gt;is&lt;/code&gt; operator is misunderstood.&lt;/p&gt;
&lt;p&gt;I think I may try experimenting with this and type hints to write something approximating other languages&amp;rsquo; generic coding going forward.&lt;/p&gt;
&lt;h2 id=&#34;dictionary-merge--update-operators&#34;&gt;Dictionary Merge &amp;amp; Update Operators&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve begun to shy away from using dicts in general in favor of dataclasses, so I don&amp;rsquo;t really need the shenanigans of abusing operator overloading to do things with dictionaries.&lt;/p&gt;
&lt;h2 id=&#34;typeddict&#34;&gt;TypedDict&lt;/h2&gt;
&lt;p&gt;Helps with validation and obviates the need for a third-party dependency like &lt;code&gt;colander&lt;/code&gt;. Also, a typed dict is one step closer in a refactor to being replaced with a &lt;code&gt;dataclass&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;zoneinfo&#34;&gt;&lt;code&gt;zoneinfo&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;I generally consider it a Bad Idea to bundle a static copy of the &lt;code&gt;tzinfo&lt;/code&gt; db into the standard library, but it&amp;rsquo;s nice that it does try to use the OS database first as the OS gets regular updates. It&amp;rsquo;s one less dependency to have to &lt;code&gt;pip install&lt;/code&gt; into your venv I guess.&lt;/p&gt;
&lt;h2 id=&#34;operator-overloading-madness&#34;&gt;Operator Overloading Madness&lt;/h2&gt;
&lt;p&gt;This covers the general trend to use operator overloading in libraries and language features like the Dict improvements above and the use of &lt;code&gt;|&lt;/code&gt; and &lt;code&gt;[type]&lt;/code&gt; as operators for union types and container/call spec specialization in type hints. When used sparingly it makes code simpler, when overused it makes code opaque. I still have the psychic scars from what C++ developers used to do with operators back in the day so I look upon doing &lt;code&gt;x: Y | Z&lt;/code&gt; over &lt;code&gt;x: T.Union(Y, Z)&lt;/code&gt; with a little bit of reluctance.&lt;/p&gt;
&lt;h2 id=&#34;enhanced-error-locations-in-tracebacks&#34;&gt;Enhanced error locations in Tracebacks&lt;/h2&gt;
&lt;p&gt;This is a Python 3.11 feature, but exceptions will actually &lt;em&gt;highlight&lt;/em&gt; offending code in the TB. Nice.&lt;/p&gt;
&lt;h2 id=&#34;self-type&#34;&gt;&lt;code&gt;Self&lt;/code&gt; type&lt;/h2&gt;
&lt;p&gt;A nice addition to &lt;code&gt;typing&lt;/code&gt; that makes generics a little more convenient.&lt;/p&gt;
&lt;h2 id=&#34;variadic-generics&#34;&gt;Variadic generics&lt;/h2&gt;
&lt;p&gt;YES. I need these too.&lt;/p&gt;
&lt;h2 id=&#34;faster-cpython&#34;&gt;Faster CPython&lt;/h2&gt;
&lt;p&gt;Python 3.11. Sure, I&amp;rsquo;ll take it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Modern Python has Changed How I Code</title>
      <link>https://www.jasonscheirer.com/weblog/modern-python-has-changed-how-i-code/</link>
      <pubDate>Thu, 07 Jul 2022 00:00:00 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/modern-python-has-changed-how-i-code/</guid>
      <description>&lt;p&gt;I can&amp;rsquo;t understate the importance of how much the following have changed and improved the way I write Python and have confidence in its correctness:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Continuous_integration&#34;&gt;Continuous Integration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/psf/black&#34;&gt;Black&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3/library/dataclasses.html&#34;&gt;Dataclasses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mypy-lang.org/&#34;&gt;Mypy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3/library/typing.html&#34;&gt;Type Hints&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;continuous-integration&#34;&gt;Continuous Integration&lt;/h2&gt;
&lt;p&gt;This isn&amp;rsquo;t particularly new to me (or the industry), but a good CI workflow that runs tests and linting &lt;em&gt;on every commit pushed to the repo tracker&lt;/em&gt; gives confidence that the code is clean to merge into the main branch. Generally you build up stages as your org progresses:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run unit tests&lt;/li&gt;
&lt;li&gt;Run and enforce code coverage standards&lt;/li&gt;
&lt;li&gt;Run lint&lt;/li&gt;
&lt;li&gt;Run style checks&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;black&#34;&gt;Black&lt;/h2&gt;
&lt;p&gt;About two years into writing Go I started using &lt;a href=&#34;https://go.dev/blog/gofmt&#34;&gt;&lt;code&gt;gofmt&lt;/code&gt;&lt;/a&gt; to help me clean up a bunch of pre-Go-1.0 code that &lt;a href=&#34;https://go.dev/doc/effective_go#semicolons&#34;&gt;still used semicolons&lt;/a&gt;. I turned on fomrat on save in my editor and never turned it off. A large point of contention over the course of my career is arguing with senior developers over bikesheddy, arbitrary, often cruel and capricious code style standards over the actual semantic behavior of the code.&lt;/p&gt;
&lt;p&gt;Then I found &lt;a href=&#34;https://prettier.io/&#34;&gt;Prettier&lt;/a&gt; while writing some JSX/React code. While it had knobs to tweak most people didn&amp;rsquo;t tweak them. It made the code I worked with more readable and I got the same delight out of using it as I did &lt;code&gt;gofmt&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I was sold on opinionated formatting.&lt;/p&gt;
&lt;p&gt;Now I use Black on all my code, auto format on save, and also enforce linter rules in CI to make sure that all code is Black-formatted.&lt;/p&gt;
&lt;p&gt;Agreeing on a format and enforcing it makes code diffs purely &lt;em&gt;semantic&lt;/em&gt; and no longer &lt;em&gt;stylistic&lt;/em&gt;. This makes code review less painful and shuts down completely unproductive conversations on where commas go.&lt;/p&gt;
&lt;p&gt;Blackening your codebase initially is admittedly ugly and somewhat destructive as you pollute your repo history with the reformat commits and it makes most tools that do line history barf. That part sucks and I don&amp;rsquo;t know a good way around it, but it does make the path forward so much more pleasant one that band-aid comes off.&lt;/p&gt;
&lt;h2 id=&#34;dataclasses&#34;&gt;Dataclasses&lt;/h2&gt;
&lt;p&gt;Over the years there have been &lt;em&gt;so many&lt;/em&gt; attempts to do data structures in Python, all equally bad and weird: &lt;a href=&#34;https://marshmallow.readthedocs.io/en/stable/&#34;&gt;marshmallow&lt;/a&gt;, &lt;a href=&#34;https://docs.pylonsproject.org/projects/colander/en/latest/index.html&#34;&gt;colander&lt;/a&gt;, &lt;a href=&#34;https://schematics.readthedocs.io/en/latest/&#34;&gt;schematics&lt;/a&gt;,  stdlib &lt;a href=&#34;https://docs.python.org/3/library/struct.html&#34;&gt;struct&lt;/a&gt;, the list goes on.&lt;/p&gt;
&lt;p&gt;One of the &amp;ldquo;warts&amp;rdquo; of the language is that dictionaries were not guaranteed to be in any order, and add on that the fact that to avoid hash collision attacks every Python process seeds its hashing algorithm with a random number, even the out-of-order iteration order would change from run to run.&lt;/p&gt;
&lt;p&gt;Enter &lt;a href=&#34;https://docs.python.org/3/whatsnew/3.7.html&#34;&gt;Python 3.7&lt;/a&gt; officially announcing that an implementation detail in 3.6 was now standard behavior: dict traversal would be ordered.&lt;/p&gt;
&lt;p&gt;So now built into the standard library is an easy, in-order way to define a data struct in the &lt;a href=&#34;https://docs.python.org/3/library/dataclasses.html&#34;&gt;&lt;code&gt;dataclasses&lt;/code&gt;&lt;/a&gt; library.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;dataclasses&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;T&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f&#34;&gt;@dataclasses&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;dataclass
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;MyStruct&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    field_1: &lt;span style=&#34;color:#008000&#34;&gt;str&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    field_2: &lt;span style=&#34;color:#008000&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    field_3: T&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;List[&lt;span style=&#34;color:#008000&#34;&gt;str&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s not a lot of code to get a very powerful, good enough abstraction over data structures. It even has options to make the classes immutable (&lt;code&gt;frozen&lt;/code&gt;) and implements &lt;code&gt;__slots__&lt;/code&gt; to make large numbers of them more memory efficient.&lt;/p&gt;
&lt;p&gt;These things are a godsend, along with typing below.&lt;/p&gt;
&lt;h2 id=&#34;mypy&#34;&gt;Mypy&lt;/h2&gt;
&lt;p&gt;Another tool I add to my CI, I run the Mypy tool over my code as I incrementally add type hints to ensure the code is correct. And since it can be done implicitly, your library code can look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;thing_with_strings&lt;/span&gt;(a: &lt;span style=&#34;color:#008000&#34;&gt;str&lt;/span&gt;, b: &lt;span style=&#34;color:#008000&#34;&gt;str&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;str&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; b
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;then your consuming app logic code can do this, unannotated:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;my_app_logic&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    thing_with_strings(x, y)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and Mypy will deduce the types and yell at you that &lt;code&gt;y&lt;/code&gt; is the wrong type. Annotating libraries, even if you don&amp;rsquo;t touch the codebases that consume them, can help find errors right away.&lt;/p&gt;
&lt;h2 id=&#34;type-hints&#34;&gt;Type Hints&lt;/h2&gt;
&lt;p&gt;You don&amp;rsquo;t have to go all in with typing, but when you do the &lt;a href=&#34;https://peps.python.org/pep-0484/&#34;&gt;type annotation system&lt;/a&gt; is good enough (though not nearly as rich as other languages&amp;rsquo;). In particular I find TypeVar to be clunky for doing generic coding, but it&amp;rsquo;s easy to use and covers most cases. If anything, its limitations keep you from doing insane turing-complete stunts like C++ programmers like to do with template metaprogramming.&lt;/p&gt;
&lt;h2 id=&#34;thats-all&#34;&gt;That&amp;rsquo;s All&lt;/h2&gt;
&lt;p&gt;These relatively minor changes to my Python coding I&amp;rsquo;ve made over the last 3-5 years have definitely made the language feel safer and quite a bit different than the unsafe, scary, let&amp;rsquo;s-pass-opaque-dicts-around crazy party that made larger codebases unmaintainable and encourages Python library authors to do weird, abusive metaprogramming stuff in their code to make it more suitable &amp;ldquo;for humans.&amp;rdquo;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python as a Language is Inescabably Coupled with its Implementation Part 1: LET&#39;S DO DUMB SHIT WITH THE GC</title>
      <link>https://www.jasonscheirer.com/weblog/python-will-never-be-decoupled-from-its-implementation/</link>
      <pubDate>Sun, 04 Apr 2021 00:00:00 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/python-will-never-be-decoupled-from-its-implementation/</guid>
      <description>&lt;p&gt;There is a convenient but untrue fiction about Python that the language specification is somehow cleanroom and CPython is actually &amp;ldquo;just an implementation.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;This has always been false, and harmful at best.&lt;/p&gt;
&lt;p&gt;Look at &lt;code&gt;__dict__&lt;/code&gt;. Near every Python object has a dictionary that fuels and consumes it. All your dotted getters are mere passthroughs for dot &lt;code&gt;__getitem__&lt;/code&gt;ers.&lt;/p&gt;
&lt;p&gt;Another fun thing is the leaking of implementation details in Bad Ways. Here&amp;rsquo;s something you &lt;em&gt;can&lt;/em&gt; do but &lt;em&gt;should not&lt;/em&gt; do, lest I find out where you live and poop in your mailbox:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;gc&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;HELLO&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;My names are:&amp;#34;&lt;/span&gt;, [[key &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; key, value &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;in&lt;/span&gt; var&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;items() &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; value &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;is&lt;/span&gt; x] &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; var &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;in&lt;/span&gt; gc&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;get_referrers(x)])
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And it outputs:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;My names are: [[&amp;#39;x&amp;#39;]]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You &lt;em&gt;could&lt;/em&gt; create a class where all its instances know their names. All their names. Do not do this. I will leave you poop.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>__all__ is a Sacred Space and you Murderous Goblins are all Profaning it</title>
      <link>https://www.jasonscheirer.com/weblog/dunder-all-is-a-sacred-space-and-everyone-is-profaning-it/</link>
      <pubDate>Wed, 31 Mar 2021 00:00:00 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/dunder-all-is-a-sacred-space-and-everyone-is-profaning-it/</guid>
      <description>&lt;p&gt;Let me spell something out for you trickster-meanies:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# HELLO I AM thingy.py&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;__all__ &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; [X, Y, Z]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;X &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Z &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Reasonable, right?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;thingy&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Traceback (most recent call last):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  File &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;&lt;/span&gt;, line &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;module&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  File &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;/Users/scheirer/thingy.py&amp;#34;&lt;/span&gt;, line &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;module&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __all__ &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; [X, Y, Z]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d2413a;font-weight:bold&#34;&gt;NameError&lt;/span&gt;: name &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;X&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;not&lt;/span&gt; defined
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Python is older than my son (who is 3) and yet you abuse it. You monsters. You goblins. You haters. You fuckerinos.&lt;/p&gt;
&lt;p&gt;Look: &lt;code&gt;__all__&lt;/code&gt; is a list of GOD DAMN STRING IDENTIFIERS, NOT ACTUAL OBJECTS, AND IT INFORMS A PATTERN YOU RIGHTFULLY DON&amp;rsquo;T USE BECAUSE YOU NEVER SEE THAT &lt;code&gt;NameError&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__all__&lt;/code&gt; is &lt;code&gt;[&#39;X&#39;, &#39;Y&#39;, &#39;Z&#39;]&lt;/code&gt; and not your list of variable names, it&amp;rsquo;s your list of export names.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__all__&lt;/code&gt; is, and has always been, &lt;a href=&#34;https://docs.python.org/3/tutorial/modules.html#importing-from-a-package&#34;&gt;a list of &lt;em&gt;STRINGS&lt;/em&gt; to be exported from your idiot module&lt;/a&gt; into your idiot notebook.&lt;/p&gt;
&lt;p&gt;Oh my god my irrational hate has fueled in me a series of topics I care to &amp;ldquo;engage&amp;rdquo; about (COMMENTS DISABLED).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ZPL-O-Rama Part 5: Postscript</title>
      <link>https://www.jasonscheirer.com/weblog/zpl-o-rama-part-5/</link>
      <pubDate>Mon, 08 Mar 2021 05:00:00 +0000</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/zpl-o-rama-part-5/</guid>
      <description>&lt;h1 id=&#34;end-product&#34;&gt;End product&lt;/h1&gt;
&lt;p&gt;Please disregard the poor camera placement or the labels, it has since been fixed.&lt;/p&gt;
&lt;p&gt;
&lt;figure&gt;
  &lt;img src=&#34;https://www.jasonscheirer.com/images/zpl-o-rama/workflow-1.png&#34; alt=&#34;Step 1&#34; /&gt;
&lt;/figure&gt;




&lt;figure&gt;
  &lt;img src=&#34;https://www.jasonscheirer.com/images/zpl-o-rama/workflow-2.png&#34; alt=&#34;Step 2&#34; /&gt;
&lt;/figure&gt;




&lt;figure&gt;
  &lt;img src=&#34;https://www.jasonscheirer.com/images/zpl-o-rama/workflow-3.png&#34; alt=&#34;Step 3&#34; /&gt;
&lt;/figure&gt;


&lt;/p&gt;
&lt;h1 id=&#34;thinking-back-it-was-all-so-simple&#34;&gt;Thinking Back, It Was All So Simple&lt;/h1&gt;
&lt;p&gt;Now we have the system up and running, let&amp;rsquo;s talk random obstacles and next steps. This is something of an epilogue to the saga, as it&amp;rsquo;s a list of small things that accrued while working on the project.&lt;/p&gt;
&lt;h2 id=&#34;networks-are-slow-and-the-dual-tier-service-thing-is-bad-actually&#34;&gt;Networks are slow and the dual tier service thing is bad, actually&lt;/h2&gt;
&lt;p&gt;I initially chose to run a service on the Nginx server that then called to a service running on the RPi. Since there were Very Large PNGs being shuttled around a LOT, this was inefficient from a speed perspective because of the bandwidth consumed over my shitty cable connection.&lt;/p&gt;
&lt;p&gt;Two band-aids I&amp;rsquo;ve applied:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Moved both services to the RPi&lt;/li&gt;
&lt;li&gt;Started sending out a version of the image by default shrunken to 800px wide, with the original full size image as an optional download.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I could merge the two services into one, but having the backend be &lt;code&gt;curl&lt;/code&gt;able without any sort of auth makes it easy to test the two ends more effectively.&lt;/p&gt;
&lt;h2 id=&#34;networks-are-unreliable&#34;&gt;Networks are unreliable&lt;/h2&gt;
&lt;p&gt;The SSH tunnel can go down and while I have taken efforts to mitigate it, I could take more. Currently:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Setting timeouts in the SSH tunnel service&lt;/li&gt;
&lt;li&gt;Force resetting the tunnel every 6 hours&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Additionally I could:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run another task that tries to hit a healthcheck on the zpl service, and if it&amp;rsquo;s dead restart the tunnel service unit&lt;/li&gt;
&lt;li&gt;The same idea but with my cable internet connection&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;life-is-a-sequence-of-disappointments-and-confusion-until-it-usually-ends-anticlimactically-in-a-whimper&#34;&gt;Life is a sequence of disappointments and confusion until it (usually) ends anticlimactically in a whimper&lt;/h2&gt;
&lt;p&gt;Just gotta do what you can do a day at a time, man.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ZPL-O-Rama Part 4: The Hardware</title>
      <link>https://www.jasonscheirer.com/weblog/zpl-o-rama-part-4/</link>
      <pubDate>Mon, 08 Mar 2021 04:00:00 +0000</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/zpl-o-rama-part-4/</guid>
      <description>&lt;h1 id=&#34;hardware&#34;&gt;Hardware&lt;/h1&gt;
&lt;h2 id=&#34;the-rpi&#34;&gt;The RPi&lt;/h2&gt;
&lt;p&gt;The Raspberry Pi is a (I think) Pi 3 with Wifi I found in the garage with a cheap clear acrylic case. It might have been a RetroPie rig in a prior life? Or one I was &amp;ldquo;gonna get around to&amp;rdquo; doing something with and finally did?&lt;/p&gt;
&lt;p&gt;Then for this project I bought a Raspberry Pi camera and a small acrylic case for it, too.&lt;/p&gt;
&lt;h2 id=&#34;the-printer&#34;&gt;The Printer&lt;/h2&gt;
&lt;p&gt;The printer is a hefty boi, a Zebra something or other. It belongs to work. It has an ethernet port, a lot of lights, an air of proprietary grandeur, and a hunger for paper and electricity.&lt;/p&gt;
&lt;h2 id=&#34;the-assembled-rig&#34;&gt;THE ASSEMBLED RIG&lt;/h2&gt;
&lt;p&gt;I wanted all the components to be as easy to transport as possible, so I used adhesive velcro tape to affix the components to each other and some adhesive cable maangement clips to hold the cables in place, carefult to leave enough slack so that the side dfoor can still open.&lt;/p&gt;
&lt;p&gt;The Pi is running stock Raspian, I have the Pi connected to the printer via a short span of Cat 6 I found, and I&amp;rsquo;m using dnsmasq&amp;rsquo;s dhcp bound to &lt;code&gt;eth0&lt;/code&gt; so that the printer always gets the same IP that the Pi can address it through. The Pi joins my network via WiFi. The intent is for the whole mess to be easy to pick up and move around the house.&lt;/p&gt;
&lt;p&gt;The last piece is a humble power strip.&lt;/p&gt;
&lt;p&gt;A picture of the front (you can see some of the cable management):

&lt;figure&gt;
  &lt;img src=&#34;https://www.jasonscheirer.com/images/zpl-o-rama/rig-picture.png&#34; alt=&#34;Hardware Rig Picture&#34; /&gt;
&lt;/figure&gt;


&lt;/p&gt;
&lt;p&gt;How it&amp;rsquo;s set up:

&lt;figure&gt;
  &lt;img src=&#34;https://www.jasonscheirer.com/images/zpl-o-rama/rig-diagram.svg&#34; alt=&#34;Hardware Rig Diagram&#34; /&gt;
&lt;/figure&gt;


&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.jasonscheirer.com/weblog/zpl-o-rama-part-5&#34;&gt;On to part 5 →&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ZPL-O-Rama Part 3: Software</title>
      <link>https://www.jasonscheirer.com/weblog/zpl-o-rama-part-3/</link>
      <pubDate>Mon, 08 Mar 2021 03:00:00 +0000</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/zpl-o-rama-part-3/</guid>
      <description>&lt;h1 id=&#34;running-the-software&#34;&gt;Running the software&lt;/h1&gt;
&lt;h2 id=&#34;frontend-server&#34;&gt;Frontend server&lt;/h2&gt;
&lt;p&gt;The frontend has three responsibilities:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Display information&lt;/li&gt;
&lt;li&gt;Perform access control (don&amp;rsquo;t let strangers on the internet print out jobs)&lt;/li&gt;
&lt;li&gt;Forward appropriate calls to the backend&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I&amp;rsquo;m using Go&amp;rsquo;s base templates for dynamic content, the &lt;a href=&#34;https://echo.labstack.com/&#34;&gt;Echo framework&lt;/a&gt; for the webapp endpoints, and plain old bare bones modern javascripto for the scripting stuff with no polyfills, no build environments, no minifiers, and boy does it feel good.&lt;/p&gt;
&lt;p&gt;The page is fast and I am attempting to capitalize on the whole &amp;ldquo;Hotwire&amp;rdquo; trend by using &lt;code&gt;innerHTML&lt;/code&gt; for some stuff on pages. Look how leader my thoughts are!&lt;/p&gt;
&lt;p&gt;Not that it&amp;rsquo;s necessary. The pages themselves render blazingly fast since they are so resource lean.&lt;/p&gt;
&lt;h2 id=&#34;backend-server&#34;&gt;Backend server&lt;/h2&gt;
&lt;p&gt;The backend server is a simple Go server with an even simpler API:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Endpoint&lt;/th&gt;
&lt;th&gt;Purpose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/print&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Enqueues a print job and returns a unique ID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/job/:id&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Returns the status of the job, along with the image if it&amp;rsquo;s been taken&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The only thing to be aware of is that only one job can be running at a time. The way we get around this is very simple: a single goroutine waiting for jobs running in a loop. That&amp;rsquo;s it. That&amp;rsquo;s the synchronization mechanism. A goroutine and a channel.&lt;/p&gt;
&lt;p&gt;Jobs are stored in a &lt;a href=&#34;https://github.com/boltdb/bolt&#34;&gt;Bolt&lt;/a&gt; database, which has all the ACID properties I want in a database while being stupid simple to use. Like, easier than Sqlite. I know, right?&lt;/p&gt;
&lt;h2 id=&#34;login-management&#34;&gt;Login Management&lt;/h2&gt;
&lt;p&gt;This lives entirely on the frontend. I&amp;rsquo;m using Google&amp;rsquo;s javascript OAuth2 library along with some backend whitelisting to only allow people with approved Google logins into the privileged endpoints. Permissions are enforced via a custom Echo middleware.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&#34;an-aside-making-peace-with-systemd&#34;&gt;An aside: Making Peace with &lt;code&gt;systemd&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;People like to talk shit about &lt;code&gt;systemd&lt;/code&gt;. It&amp;rsquo;s weird, it&amp;rsquo;s disruptive, it tries to do too much.
First off, at least it&amp;rsquo;s not &lt;a href=&#34;https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html&#34;&gt;launchd&lt;/a&gt;, and second, this is a project for my entertainment and I find it fun to do interesting things despite the environment I&amp;rsquo;m running in.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;keeping-the-software-running&#34;&gt;Keeping the software running&lt;/h1&gt;
&lt;h2 id=&#34;operating-environment-on-the-server&#34;&gt;Operating Environment on the Server&lt;/h2&gt;
&lt;p&gt;I use &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;letsencrypt&lt;/a&gt; for SSL, &lt;a href=&#34;https://cloud.google.com/compute&#34;&gt;GCP for a VM/IP&lt;/a&gt; (Docker would be stupid here), and Nginx as the edge. The conf look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;server&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;server_name&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;ZPL-HOST-DOMAIN.TLD&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;/&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;proxy_set_header&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;Host&lt;/span&gt; &lt;span style=&#34;color:#19177c&#34;&gt;$host&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;proxy_pass&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;http://127.0.0.1:5489&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;proxy_buffering&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;on&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;proxy_redirect&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;off&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;proxy_http_version&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;.1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;proxy_cache&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;off&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;tcp_nodelay&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;on&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;error_page&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;502&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;/502.html&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;location&lt;/span&gt; = &lt;span style=&#34;color:#ba2121&#34;&gt;/502.html&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;root&lt;/span&gt;  &lt;span style=&#34;color:#ba2121&#34;&gt;/home/zplorama/public&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;listen&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;443&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;ssl&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;ssl_certificate&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;/etc/letsencrypt/live/ZPL-HOST-DOMAIN.TLD/fullchain.pem&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;ssl_certificate_key&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;/etc/letsencrypt/live/ZPL-HOST-DOMAIN.TLD/privkey.pem&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;/etc/letsencrypt/options-ssl-nginx.conf&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ba2121&#34;&gt;ssl_dhparam&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;/etc/letsencrypt/ssl-dhparams.pem&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;server&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$host&lt;/span&gt; = &lt;span style=&#34;color:#ba2121&#34;&gt;ZPL-HOST-DOMAIN.TLD)&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;301&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;https://&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$host$request_uri&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;listen&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;80&lt;/span&gt; ;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;server_name&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;ZPL-HOST-DOMAIN.TLD&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;404&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Basically: use HTTPS, pass through to the frontend service which is bound to a port on localhost via the tunnel. Neat.&lt;/p&gt;
&lt;h2 id=&#34;operating-environment-on-the-pi&#34;&gt;Operating Environment on the Pi&lt;/h2&gt;
&lt;p&gt;I have a custom user with limited permissions called &lt;code&gt;zplorama&lt;/code&gt;. I had to add it to the group &lt;code&gt;video&lt;/code&gt; so it could call &lt;code&gt;raspistill&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The two service executables operate via simple systemd unit defs:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Backend&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Fairly simple: run a binary as a specific user in a specific path, restart on fail.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-systemd&#34; data-lang=&#34;systemd&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;[Unit]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7d9029&#34;&gt;Description&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;Run the backend printer server on localhost&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7d9029&#34;&gt;After&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;network.target&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;[Service]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7d9029&#34;&gt;ExecStart&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;/home/zplorama/bin/printer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7d9029&#34;&gt;RestartSec&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7d9029&#34;&gt;Restart&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;always&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7d9029&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;zplorama&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7d9029&#34;&gt;Group&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;zplorama&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7d9029&#34;&gt;WorkingDirectory&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;/home/zplorama&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;[Install]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7d9029&#34;&gt;WantedBy&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;multi-user.target&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Frontend&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-systemd&#34; data-lang=&#34;systemd&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;[Unit]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7d9029&#34;&gt;Description&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;Run the frontend printer server on localhost&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7d9029&#34;&gt;After&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;network.target&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;[Service]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7d9029&#34;&gt;ExecStart&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;/home/zplorama/bin/frontend&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7d9029&#34;&gt;RestartSec&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7d9029&#34;&gt;Restart&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;always&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7d9029&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;zplorama&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7d9029&#34;&gt;Group&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;zplorama&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7d9029&#34;&gt;WorkingDirectory&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;/home/zplorama&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;[Install]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7d9029&#34;&gt;WantedBy&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;multi-user.target&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is super simple and since I&amp;rsquo;m embedding the config inside the binaries I don&amp;rsquo;t even need to send any command-line flags along.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tunnel&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The ssh connection stays alive via another systemd unit:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-systemd&#34; data-lang=&#34;systemd&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;[Unit]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7d9029&#34;&gt;Description&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;Setup a secure tunnel to prod for ZPL service&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7d9029&#34;&gt;After&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;network.target&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;[Service]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7d9029&#34;&gt;ExecStart&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;ssh -o ExitOnForwardFailure=yes -R 5489:localhost:5489 USER@HOST -N&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7d9029&#34;&gt;RestartSec&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7d9029&#34;&gt;Restart&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;always&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Set a hard reset every 6 hours&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7d9029&#34;&gt;RuntimeMaxSec&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;21600&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7d9029&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;zplorama&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7d9029&#34;&gt;Group&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;zplorama&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7d9029&#34;&gt;WorkingDirectory&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;/home/zplorama&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;[Install]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7d9029&#34;&gt;WantedBy&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;multi-user.target&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;deployment&#34;&gt;Deployment&lt;/h2&gt;
&lt;p&gt;Deployment involves doing a &lt;code&gt;git pull&lt;/code&gt;, a &lt;code&gt;make clean &amp;amp;&amp;amp; make&lt;/code&gt;, &lt;code&gt;cp ./bin/ ~zplorama/bin&lt;/code&gt;, and then using &lt;code&gt;sudo service restart&lt;/code&gt;. This could be a script, even!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bc7a00&#34;&gt;#! /bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bc7a00&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;cd&lt;/span&gt; zpl-o-rama
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git pull
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make clean &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo mv bin/* ~zplorama/bin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo chown zplorama:zplorama ~zplorama/bin/*
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; service in zplbackend zplfrontend zpltunnel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sudo service restart &lt;span style=&#34;color:#19177c&#34;&gt;$service&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;end&#34;&gt;End&lt;/h1&gt;
&lt;p&gt;This is the beefiest of the posts because it includes real code. TL;DR: the configuration of the service is larger than the actual code of the service.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.jasonscheirer.com/weblog/zpl-o-rama-part-4&#34;&gt;On to part 4 →&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ZPL-O-Rama Part 2: Concepts and Architecture</title>
      <link>https://www.jasonscheirer.com/weblog/zpl-o-rama-part-2/</link>
      <pubDate>Mon, 08 Mar 2021 02:00:00 +0000</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/zpl-o-rama-part-2/</guid>
      <description>&lt;h1 id=&#34;problem-space&#34;&gt;Problem Space&lt;/h1&gt;
&lt;p&gt;To automate the process of printing and reporting back a ZPL payload, we need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A way to get the ZPL from the user&lt;/li&gt;
&lt;li&gt;A way to send the ZPL to a printer&lt;/li&gt;
&lt;li&gt;A way to take a picture&lt;/li&gt;
&lt;li&gt;A way to send it back to the user&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;a-way-to-get-the-zpl-from-the-user&#34;&gt;A way to get the ZPL from the user&lt;/h2&gt;
&lt;p&gt;A web service makes sense here. We want an API or a frontend (or both) to send the ZPL along and check its printing status.&lt;/p&gt;
&lt;h2 id=&#34;a-way-to-send-the-zpl-to-a-printer&#34;&gt;A way to send the ZPL to a printer&lt;/h2&gt;
&lt;p&gt;A ZPL printer has an ethernet port and can simply be &lt;code&gt;netcat&lt;/code&gt;ted to. We just need a program that shuttles ZPL from user to printer. This can easily be done with a web API and maybe something like a Raspberry pi in between.&lt;/p&gt;
&lt;h2 id=&#34;a-way-to-take-a-picture&#34;&gt;A way to take a picture&lt;/h2&gt;
&lt;p&gt;Raspberry Pis have &lt;a href=&#34;https://www.raspberrypi.org/products/camera-module-v2/&#34;&gt;cheap camra modules&lt;/a&gt; with dedicated ports to accept them on the board. There is &lt;a href=&#34;https://www.raspberrypi.org/documentation/usage/camera/raspicam/raspistill.md&#34;&gt;a simple command-line app&lt;/a&gt; to capture stills. This is easy.&lt;/p&gt;
&lt;h2 id=&#34;a-way-to-send-it-back-to-the-user&#34;&gt;A way to send it back to the user&lt;/h2&gt;
&lt;p&gt;This is probably going to be the same thing as above, with the webapp. The printer prints, the camera cams, the webapp reconveys the image to the user.&lt;/p&gt;
&lt;h1 id=&#34;moving-on&#34;&gt;Moving on&lt;/h1&gt;
&lt;p&gt;Moving forward, we abstractly have all the conceptual parts we&amp;rsquo;ll need to make this service thought out. Now for the details.&lt;/p&gt;
&lt;h1 id=&#34;lets-talk-architecture&#34;&gt;Let&amp;rsquo;s Talk Architecture&lt;/h1&gt;
&lt;p&gt;The next thing I needed to do was plan out how this would work. I made a diagram to make sure I wasn&amp;rsquo;t missing anything.&lt;/p&gt;
&lt;p&gt;
&lt;figure&gt;
  &lt;img src=&#34;https://www.jasonscheirer.com/images/zpl-o-rama/zpl-o-rama-architecture.svg&#34; alt=&#34;Architecture Diagram&#34; /&gt;
&lt;/figure&gt;


&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll use Nginx at the edge to route to a frontend application. Then I&amp;rsquo;ll forward to a backend application which is running on my Raspberry pi which handles the printing/photography step.&lt;/p&gt;
&lt;p&gt;Then, I&amp;rsquo;ll present the user a nice web service hosted on a machine on the cloud with a Real Internet IP where the user can log in, enter ZPL, and see the output.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.jasonscheirer.com/weblog/zpl-o-rama-part-3&#34;&gt;On to part 3 →&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ZPL-O-Rama Part 1: A personal/work project (Introduction)</title>
      <link>https://www.jasonscheirer.com/weblog/zpl-o-rama-part-1/</link>
      <pubDate>Mon, 08 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/zpl-o-rama-part-1/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;In my spare time on weekends in between errands and mornings before everyone wakes up, I&amp;rsquo;ve been working on a little project I&amp;rsquo;ve been having a lot of fun with: ZPL-O-Rama.&lt;/p&gt;
&lt;h1 id=&#34;the-problem&#34;&gt;The Problem&lt;/h1&gt;
&lt;p&gt;A large part of my employer&amp;rsquo;s line of business is creating shipping labels, and a large number of those aren&amp;rsquo;t simply printed images, but printed on very high volume, heavy duty, industrial grade printers using &lt;a href=&#34;https://www.zebra.com/content/dam/zebra/manuals/printers/common/programming/zpl-zbi2-pm-en.pdf&#34;&gt;a proprietary language called ZPL&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In an aggressive and justified act of Intellectual Property enforcement, there are no legal software ZPL renderers available&lt;sup&gt;(footnote 1)&lt;/sup&gt;. This means that to test the output of a ZPL stanza we have to physically print a label and inspect it. In the Before Times of 2019, our office was full of all kinds of ZPL printer we could freely and cavalierly print to.&lt;/p&gt;
&lt;p&gt;Now that workplaces are in a &lt;a href=&#34;https://www.jasonscheirer.com/weblog/thepost-office-world&#34;&gt;post-office diaspora&lt;/a&gt;, we no longer have access to ZPL printers. The fleet of printers were  dispatched to a number of people in the org who opted in and had a vested need to test ZPL. I was one of those people.&lt;/p&gt;
&lt;p&gt;Now, for those without a printer, if they need to test something they will go into a Slack channel and hope someone sees it in a timely manner, prints the ZPL, takes a picture, and reports back.&lt;/p&gt;
&lt;p&gt;We can do better than that. We can automate this.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.jasonscheirer.com/weblog/zpl-o-rama-part-2&#34;&gt;On to part 2 →&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Footnotes&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; (Yes, I am aware of &lt;a href=&#34;http://labelary.com/viewer.html&#34;&gt;Labelary&lt;/a&gt;, but that&amp;rsquo;s also proprietary and probably in violation of all kinds of agreements)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Shanling Q1 Media Player</title>
      <link>https://www.jasonscheirer.com/weblog/shanling-q1/</link>
      <pubDate>Sun, 21 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/shanling-q1/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;A while ago I was bored with the Mechanical Keyboard rabbit hole and started looking into other, equally strange rabbit holes to dive into. At around the same time I hit my iPod Classic&amp;rsquo;s 160GB limit. I&amp;rsquo;m not yet ready to hack it up to have bigger storage: I plan to keep it in working &amp;ldquo;original&amp;rdquo; condition as it may find a better home in the future with some collector who is better at soldering than I.&lt;/p&gt;
&lt;p&gt;So I started looking around at the current landscape of stand-alone MP3 players in 2019 and that was a fun few weeks of nerd obsession.&lt;/p&gt;
&lt;p&gt;I loved my iPod back before it was &amp;lsquo;Classic&amp;rsquo; because it Just Worked, didn&amp;rsquo;t need a network connection, and could hold my entire music library. I started commuting on BART again and I&amp;rsquo;m underground a lot, so anything that needs a network connection is right out. I also wanted my full library at my fingertips. And usably so.&lt;/p&gt;
&lt;p&gt;I did think about getting a hacked iPod Classic with a TF slot or a terabyte sdd or maybe get all &lt;a href=&#34;https://www.theverge.com/22238668/microsoft-zune-fans-mp3-music-player-subreddit&#34;&gt;ahistoric and pretend I ever liked the Zune before its unfortunate demise&lt;/a&gt; and get one of those hacked up with modern storage instead but that kind of spending gets me yelled at come Credit Card Balance Day.&lt;/p&gt;
&lt;p&gt;I Kickstarted &lt;a href=&#34;https://www.kickstarter.com/projects/shanlingaudio/shanling-q1-retro-styled-portable-hi-fi-music-player&#34;&gt;the Shanling Q1&lt;/a&gt;, which cost me $89 at the time (now it retails for anywhere from $100-150, so yay me I guess). I picked it because it looked reasonable, was powered by a TF Card, and was cheap enough that it could fly under the radar on our credit card statement.&lt;/p&gt;
&lt;p&gt;It advertises:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A premium DAC for audiophiles&lt;/li&gt;
&lt;li&gt;A 3.5&amp;quot; touch screen&lt;/li&gt;
&lt;li&gt;A TF card port&lt;/li&gt;
&lt;li&gt;Disk mode (your TF card shows up as a passthrough mass storage device)&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Retro styling&amp;rdquo; (rounded corners)&lt;/li&gt;
&lt;li&gt;Bluetooth (so you can play your music from ) &amp;ndash; &lt;em&gt;I did not know this worked well, or I would have just paired my work laptop to the Q1 and played all audio through it. Whoops&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I left the player at my office desk when the world ended last March, and didn&amp;rsquo;t pick it up and bring it home until November, but then it just got thrown in a bag with the rest of the contents of my drawers and then unceremoniously stored in a box in my garage.&lt;/p&gt;
&lt;h1 id=&#34;my-music-library&#34;&gt;My Music Library&lt;/h1&gt;
&lt;p&gt;I still organize my Music library in Apple Music, which seems to be the only thing that can sensibly handle large volumes of audio files in a usable manner. I still buy digital albums outright (I no longer have a working optical drive in my household) and either download or convert them to open formats (MP3 or FLAC). Bandcamp and Amazon Music are my primary sources for purchase.&lt;/p&gt;
&lt;p&gt;I do backups via rsync to a &lt;a href=&#34;https://volumio.org/&#34;&gt;Volumio&lt;/a&gt; instance in another room, which I use more as an Airdrop/DLNA audio sink as it&amp;rsquo;s connected to speakers. I didn&amp;rsquo;t really ever play music directly &lt;em&gt;from&lt;/em&gt; it, but if I ever wanted to, oh boy could I.&lt;/p&gt;
&lt;p&gt;For &amp;ldquo;off site&amp;rdquo; backup I rsync to another TF card which I used to take to work.&lt;/p&gt;
&lt;h1 id=&#34;using-it-at-first&#34;&gt;Using It At First&lt;/h1&gt;
&lt;p&gt;I initially would pop my &amp;ldquo;off site&amp;rdquo; TF card into the player when I got into the office, but I found the ergonomics of dealing with a separate device that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;did not play computer audio along with it&lt;/li&gt;
&lt;li&gt;had a relatively onerous UI compared to apple music and&lt;/li&gt;
&lt;li&gt;did not fully scan my library&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;was too troublesome so I eventually just started mounting the TF card on my work laptop at work (plugged into my USB-C desktop hub). I would then drag the mount onto Apple Music on my work laptop to add the files to the library, being careful to make sure Consolidate Library was turned off so it would leave the files in place. I would do this manually every so often; my cadence was about once a month.&lt;/p&gt;
&lt;p&gt;This process was annoying enough that I didn&amp;rsquo;t do it much, it wasn&amp;rsquo;t super appropriate for work. So it went into the desk drawer.&lt;/p&gt;
&lt;h1 id=&#34;an-update-makes-it-more-useful&#34;&gt;An Update Makes it More Useful&lt;/h1&gt;
&lt;p&gt;I found the player a month or two ago and brought it inside, and my kid used it as a toy pretend phone in his room. At some point when he was at home when me and my wife were working, I realized he lived in the living room most of the day, 3 feet away from my wife&amp;rsquo;s desk. This was because the TV was there, and toddler screams and YouTube don&amp;rsquo;t gel well with conference calls.&lt;/p&gt;
&lt;p&gt;I first set up the Chromebook with YouTube in his room, and saw the Q1, and thought that would be a nice little thing to put Baby Shark and junk on for him for when he could read. I put the thing on the charger overnight and turned it back on. It has been a full year and a half since I acquired the thing, so I went to see if there were any firmware updates. &lt;a href=&#34;http://en.shanling.com/download/68&#34;&gt;I found there were on the official page&lt;/a&gt;, but that web site was in concerningly rapid decay and I was afraid I would never be able to get the thing up to current. Thankfully, Google indexed a Facebook thread that linked to &lt;a href=&#34;http://en.shanling.com/article-Q1-V20.html&#34;&gt;another post on their site&lt;/a&gt; that offered a Google Drive download of the firmware, so I was back in business.&lt;/p&gt;
&lt;p&gt;The update offered a bunch of really neat functionality, some of which were improvements over capabilities I never knew it previously had:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WiFi (it has a wifi card?)&lt;/li&gt;
&lt;li&gt;Airplay/DLNA playback (I can use it as a network audio sink, so I can theoretically replace the Volumio with this on one set of speakers)&lt;/li&gt;
&lt;li&gt;WiFi File Transfer (I haven&amp;rsquo;t figured this out)&lt;/li&gt;
&lt;li&gt;Other things I don&amp;rsquo;t care about&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Upgrading happened fine on the first try and surprisingly and didn&amp;rsquo;t brick it. And:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Loading my library worked fully now&lt;/li&gt;
&lt;li&gt;My iPhone easily paired to the device via Bluetooth as an audio sink, which drove me nuts because I was unaware of this prior&lt;/li&gt;
&lt;li&gt;It showed up as an Airplay target on my laptop after joining WiFi, which was also infuriating because it made this device &lt;em&gt;so damn much more useful&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;18-months-later-this-is-good&#34;&gt;18 Months Later, This is Good&lt;/h1&gt;
&lt;p&gt;So this piece of hardware I bought more-or-less on impulse to sate my desire for a standalone MP3 player that worked at least as well as an iPod Classic is finally at the point where it is fulfilling that desire.&lt;/p&gt;
&lt;p&gt;This device works as my wandering &amp;ldquo;off site&amp;rdquo; backup now as it still shows up as &lt;code&gt;/Media/Music&lt;/code&gt; on my Mac so my rsync script just works, so it&amp;rsquo;s the living TF adapter/music player for one of my backups.&lt;/p&gt;
&lt;p&gt;Anyway, they&amp;rsquo;re expensive now and I don&amp;rsquo;t know if I $125 love the thing, but it&amp;rsquo;s a nice piece of compact hardware to put on the pile.&lt;/p&gt;
&lt;p&gt;And I&amp;rsquo;d recommend nerds check out check out the standalone MP3 player market. They still exist, they have nice, incremental improvements over older players, and are mainly targets to audiophiles which forces them to include features and a build quality that are above what you&amp;rsquo;d see in commodity consumer level players, were that still a market.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SFTP is still around and that&#39;s OK</title>
      <link>https://www.jasonscheirer.com/weblog/sftp-is-still-around-and-thats-ok/</link>
      <pubDate>Thu, 18 Feb 2021 08:00:00 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/sftp-is-still-around-and-thats-ok/</guid>
      <description>&lt;p&gt;So it&amp;rsquo;s 2021 and about the entirety of my job is integrating third party systems with internal ones, which then reach out to other third-party services.&lt;/p&gt;
&lt;p&gt;A lot of stuff uses SFTP still. In this day and age anything not on HTTP seems barbaric, but SFTP does have its advantages.&lt;/p&gt;
&lt;h1 id=&#34;sftp-is-format-agnostic&#34;&gt;SFTP is format agnostic&lt;/h1&gt;
&lt;p&gt;This goes for HTTP as well, but you need to &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding&#34;&gt;correctly&lt;/a&gt; &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type&#34;&gt;set&lt;/a&gt; headers, and there&amp;rsquo;s a constant, incessant push for change for change&amp;rsquo;s sake.&lt;/p&gt;
&lt;h1 id=&#34;sftp-works-for-cold-storage&#34;&gt;SFTP works for cold storage&lt;/h1&gt;
&lt;p&gt;SFTP servers are a known entity, and can be used to point at an old directory full of files somewhere, an enterprise-grade SAN, or whatever. It&amp;rsquo;s file-focused where modern HTTP is more interaction/endpoint focused.&lt;/p&gt;
&lt;h1 id=&#34;the-s-in-sftp-is-already-secure&#34;&gt;The S in SFTP is already &amp;ldquo;secure&amp;rdquo;&lt;/h1&gt;
&lt;p&gt;HTTP is insecure by default, though in recent years yes, HTTPS is now almost a default (but not behind the edge, which is a story for another day).&lt;/p&gt;
&lt;p&gt;SFTP starts via an SSH session with proper key negotiation. This means every workflow you do with SSH (like exchanging keys that are not necessarily signed by a root authority) is supported with SFTP. Having just written a downtime postmortem about a party not presenting a correctly configured certificate chain on their HTTP service, the fact that less can go wrong in SFTP is comforting.&lt;/p&gt;
&lt;h1 id=&#34;its-hard-to-get-sftp-wrong&#34;&gt;It&amp;rsquo;s hard to get SFTP wrong&lt;/h1&gt;
&lt;p&gt;HTTP changes. To do something simple like send a file in chunks you have to set up an HTTP server correctly and support all kinds of &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Range_requests&#34;&gt;operating modes&lt;/a&gt; and implement &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Transfer-Encoding&#34;&gt;a bunch&lt;/a&gt; &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Length&#34;&gt;of headers&lt;/a&gt; and make sure both the server and client and any proxy handles it correctly. SFTP has significantly less cruft, significantly fewer implementations, and therefore significantly fewer configurations to thing about.&lt;/p&gt;
&lt;h1 id=&#34;sftp-semantically-matches-some-workflows-better&#34;&gt;SFTP semantically matches some workflows better&lt;/h1&gt;
&lt;p&gt;When you think about what you are doing, to download a batch file you:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Connect to a machine*&lt;/li&gt;
&lt;li&gt;Go to the expected location&lt;/li&gt;
&lt;li&gt;Download the file in a stream&lt;/li&gt;
&lt;li&gt;Verify the file&lt;/li&gt;
&lt;li&gt;Remove the remote file&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;* Yes, this includes opening socket connection, doing TLS negotiation, and then authenticating, which are 3 additional steps to be brought into consideration&lt;/p&gt;
&lt;p&gt;In HTTP, it&amp;rsquo;s:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;HTTP GET&lt;/code&gt; the location (steps 1, 2, 3)&lt;/li&gt;
&lt;li&gt;Verify that locally (your application code)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HTTP DELETE&lt;/code&gt; the resource (provided the proxy/framework/application properly supports &lt;code&gt;DELETE&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Since steps 1-3 are all enmeshed, you have to introspect on where the failure mode happened to figure out what went wrong. With SFTP it&amp;rsquo;s&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Connect to SFTP server (step 1)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CD path&lt;/code&gt; (step 2)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GET file&lt;/code&gt; (step 3)&lt;/li&gt;
&lt;li&gt;Verify file locally (application code) (step 4)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RM path&lt;/code&gt; (step 5)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Semantically the steps to accomplish the workflow make it easier to wrap each step in a single try-except rather than have to dig into what went wrong in the HTTP transaction. The code, while simple, is simple. This makes it more readable and easier to both write and reason about.&lt;/p&gt;
&lt;h1 id=&#34;its-easy-to-consume&#34;&gt;It&amp;rsquo;s easy to consume&lt;/h1&gt;
&lt;p&gt;Consuming files via an SFTP client is as easy to do as consuming via an HTTP client, with significantly fewer failure modes.&lt;/p&gt;
&lt;h1 id=&#34;it-works-to-keep-the-world-working&#34;&gt;It works to keep the world working&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.treasurysoftware.com/ACH/ssh-sftp.aspx&#34;&gt;SFTP powers the financial world&lt;/a&gt;. Every day millions (billions? I honestly have no idea) of financial transactions are compelted via the ACH system, which is text files over SFTP. Similar batch jobs are completed for all kinds of similar systems which may be mainframes running COBOL or &amp;ldquo;cutting-edge&amp;rdquo; Enterprise Java rats&amp;rsquo; nests of code copying files over to a Linux machine somewhere to expose them to the world.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>You Don&#39;t Need to Make That Temporary File, Dude</title>
      <link>https://www.jasonscheirer.com/weblog/dont-use-tempfiles/</link>
      <pubDate>Fri, 12 Feb 2021 08:00:00 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/dont-use-tempfiles/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This was initially a blog post I wrote on my employer&amp;rsquo;s internal system, but it&amp;rsquo;s interestingly useful and it doesn&amp;rsquo;t contain any trade secrets so I figure I&amp;rsquo;ll share.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A common pattern that seems obvious when you need to shuttle data around in file form is to use a temporary file against the filesystem using the &lt;a href=&#34;https://docs.python.org/3/library/tempfile.html&#34;&gt;tempfile module&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You very seldom ACTUALLY need to do this. The &lt;a href=&#34;https://docs.python.org/3/library/io.html#binary-i-o&#34;&gt;BytesIO&lt;/a&gt; class follows &lt;a href=&#34;https://docs.python.org/3/glossary.html#term-file-object&#34;&gt;the exact same protocol&lt;/a&gt;, the file protocol, so any API that accepts a &amp;ldquo;file-like object&amp;rdquo; will accept an in-memory piece of information in addition to a file on disk. It&amp;rsquo;s faster, safer, and less ugly.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xyz &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;/tmp/dingus&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;open&lt;/span&gt;(xyz, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;as&lt;/span&gt; file_handle:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  file_handle&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#ba2121&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;My brilliant string&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;can be replaced with&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xyz &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; io&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;BytesIO()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xyz&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#ba2121&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;My brilliant string&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You don&amp;rsquo;t even have to &lt;code&gt;with&lt;/code&gt; the BytesIO &amp;ndash; in fact, if you do, it&amp;rsquo;ll delete the buffer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t do this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; filename &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;in&lt;/span&gt; files_to_fetch:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;try&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       temp_file &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; tempfile&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;NamedTemporaryFile(delete&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       sftp_client&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;get(filename, temp_file&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;name)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;open&lt;/span&gt;(temp_file&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;name, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;as&lt;/span&gt; handle:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;yield&lt;/span&gt; (filename, handle&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;read())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;finally&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       os&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;remove(temp_file&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;name)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;do this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; filename &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;in&lt;/span&gt; files_to_fetch:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    temp_file &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; BytesIO()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sftp_client&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;getfo(filename, temp_file)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;yield&lt;/span&gt;(filename, temp_file&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;getvalue())
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Isn&amp;rsquo;t that nice?&lt;/p&gt;
&lt;p&gt;Or if you have to write to an S3 bucket, instead of creating your tempfile:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; filename &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;in&lt;/span&gt; files_to_fetch:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    temp_file &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; BytesIO()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sftp_client&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;getfo(filename, temp_file)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    temp_file&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;seek(&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;)  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# You need to rewind to the beginning of the file&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s3_client&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;upload_fileobj(temp_file, OUR_S3_BUCKET, filename)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;or if the files are on the filesystem, don&amp;rsquo;t bother &lt;code&gt;read&lt;/code&gt;ing them yourself:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; filename &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;in&lt;/span&gt; files_to_fetch:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;open&lt;/span&gt;(filename) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;as&lt;/span&gt; file_handle:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        s3_client&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;upload_fileobj(file_handle, OUR_S3_BUCKET, filename)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And on a semi-related note, don&amp;rsquo;t do this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;file_handle&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;write(json&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;dumps(x))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;do this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;json&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;dump(x, file_handle)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;there are usually two functions exposed when an API deals with I/O: a string version and a file-like version.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Trying out Rectangle</title>
      <link>https://www.jasonscheirer.com/weblog/trying-out-rectangle/</link>
      <pubDate>Mon, 08 Feb 2021 10:00:00 -0600</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/trying-out-rectangle/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been using the &lt;a href=&#34;https://github.com/rxhanson/Rectangle&#34;&gt;Rectangle&lt;/a&gt; window manager for mac for the last couple of weeks and it&amp;rsquo;s been the most helpful thing since Mission Control (and setting up a hot corner to activate it).&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve tried to use full tiling managers before but I&amp;rsquo;ve found it difficult because 1) Irregularly sized window totally mess up the flow, 2) I am so used to the WIMP paradigm, including moving windows around so I have only been semi-functional with and 3) really weird shortcuts I have to memorize.&lt;/p&gt;
&lt;p&gt;I tried sway on my Linux laptop and could never really &amp;ldquo;get&amp;rdquo; it &amp;ndash; I&amp;rsquo;m not smart enough, and I didn&amp;rsquo;t like the idea of using Gnome again because it&amp;rsquo;s gotten so big, but I&amp;rsquo;ve recently found great success in using &lt;a href=&#34;https://cinnamon-spices.linuxmint.com/extensions/view/76&#34;&gt;gTile&lt;/a&gt; in Cinnamon.&lt;/p&gt;
&lt;p&gt;I like apps like Rectangle because they take a middle ground to window management &amp;ndash; they don&amp;rsquo;t have a complex set of layout paradigms they don&amp;rsquo;t take full assumption of positioning windows, and they have very, very sane, very easy to learn defaults.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The 2020s and the Post-Office World</title>
      <link>https://www.jasonscheirer.com/weblog/the-post-office-world/</link>
      <pubDate>Mon, 08 Feb 2021 07:00:00 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/the-post-office-world/</guid>
      <description>&lt;p&gt;I moved to the Bay Area 6 years ago after stubbornly refusing to for over a decade before because I wanted to be in the middle of the world of software. 2020 made some of that luster wear off.&lt;/p&gt;
&lt;p&gt;Our office closed at the end of March, 2020, for what was scheduled to be 2 months, which eventually stretched out into over 6 months, until finally we were told to clean off our desks by Thanksgiving as we were permanently remote.&lt;/p&gt;
&lt;p&gt;I did poorly doing remote work in 2012 when I first tried it and didn&amp;rsquo;t look forward to doing it again. A big part of my day was framed around a commute, a large part of my productivity are 3 minute snippets of conversation with random people on the elevator to get an idea for what I could provide my coworkers, the majority of my socialization is in the context of work, and a large part of my sanity was my enthusiasm for figuring out byzantine ways to get around solely by public transit.&lt;/p&gt;
&lt;p&gt;Working from home has been varied as I adjust to it and go through cycles of acceptance, as well as the variance in the openness of the Bay Area. At one point places were open, which was great, and appointment based, which was even better because there was limited admittance and things were empty enough to appreciate in a way we hadn&amp;rsquo;t before. The SF and Oakland Zoos, 2 of my kid&amp;rsquo;s favorite places, were noticeably better experiences until they locked down and shut again.&lt;/p&gt;
&lt;p&gt;Now that I&amp;rsquo;m adjusting to working from home I am noting probably the same things everyone else is: that work/home boundaries are hard, that having a dedicated workspace is essential, and keeping a routine &lt;em&gt;with good sleep hygiene&lt;/em&gt; is absolutely paramount to not breaking down.&lt;/p&gt;
&lt;p&gt;A benefit of the events of 2020 was that I lost over 40 pounds &amp;ndash; no more being too tired to cook 3 nights a week and ordering out. No more eating a $20 lunch in the Financial District at a restaurant every day. No more cocktails on Fridays.&lt;/p&gt;
&lt;p&gt;Another benefit was saving money &amp;ndash; hundreds of dollars a month in eating out, hundreds of dollars in gas, hundreds of dollars on my Clipper card, hundreds of dollars in things like movie tickets and indoor playground fees. With that we were able to save more aggressively, and with our extra time able to do paperwork and visit house showings, so we were able to pounce and buy a home.&lt;/p&gt;
&lt;p&gt;I was a little reluctant to buy a home in the Bay Area initially because &amp;ldquo;everyone is leaving,&amp;rdquo; but exoduses have happened here before and I honestly don&amp;rsquo;t anticipate things will stay like this forever, at the worst we&amp;rsquo;ll have to wait a decade. Our lifestyles won&amp;rsquo;t go entirely back to 2019, but people like living in cities and having interesting things to do nearby, and I&amp;rsquo;m sure even if the lucky Millennials who can afford it are permanently committing to the suburbs the next generation will cycle back and flock back to major cities and their surroundings.&lt;/p&gt;
&lt;p&gt;My new office is my garage &amp;ndash; we&amp;rsquo;re going to put in the money to turn it into a mock office, complete with a sealed &amp;ldquo;phone booth&amp;rdquo; room and cubicle-like partitions. Right now, it&amp;rsquo;s just a garage with a couple of desks that I share with the Christmas decorations, but it&amp;rsquo;s somewhere where my work life is separate from my home life.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s been weird, but it&amp;rsquo;s been weird for everyone.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Update 2021-02-10&lt;/em&gt; &lt;a href=&#34;https://www.wired.com/story/the-secret-essential-geography-of-the-office/&#34;&gt;This essay by Paul Ford&lt;/a&gt; covers a lot of my thinking about the office, too.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Update 2021-03-27&lt;/em&gt; &lt;a href=&#34;https://twitter.com/cafedujord/status/1375255355962261504&#34;&gt;This tweet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;figure&gt;
  &lt;img src=&#34;https://www.jasonscheirer.com/images/the-post-office-world/tweet.png&#34; alt=&#34;This toot&#34; /&gt;
&lt;/figure&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pinebook Pro: The Tinkering Laptop</title>
      <link>https://www.jasonscheirer.com/weblog/pinebook-pro-the-tinkering-laptop/</link>
      <pubDate>Tue, 19 Jan 2021 12:11:45 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/pinebook-pro-the-tinkering-laptop/</guid>
      <description>&lt;p&gt;As the parent of an almost three year old, I don&amp;rsquo;t get much time to myself, and I&amp;rsquo;ve given up on video games that don&amp;rsquo;t have playtimes under 15 minutes (that discounts anything with load times or cutscenes). In my spare time I have to find other things to do that are low impact and can be cut into small amounts of time.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve taken to watching a lot of retrocomputing stuff on YouTube, which has inspired me to tinker with old software and resource constrained devices. I&amp;rsquo;ve developed a newly renewed interest in hardware/software and gone fully into writing stuff like Lua and Rust on small ARM devices like RPis and &lt;a href=&#34;https://www.pine64.org/devices/single-board-computers/pine-a64/&#34;&gt;Pine64&lt;/a&gt;s.&lt;/p&gt;
&lt;p&gt;I wrote before that I was going to buy a &lt;a href=&#34;https://www.pine64.org/pinebook-pro/&#34;&gt;Pinebook Pro&lt;/a&gt;, and it arrived sometime last May. It came bundled with a flavor of Debian, but they started shipping with a blessed version of Manjaro in August or so. I wasn&amp;rsquo;t happy with that decision because I am so familiar with the Debian ecosystem, but it was the official way to get proper GPU drivers for the hardware.&lt;/p&gt;
&lt;p&gt;As common as the Arm64 architecture is in the world, it&amp;rsquo;s mostly on mobile devices and not traditional &amp;ldquo;computing environments&amp;rdquo; like laptops and desktops. &lt;a href=&#34;https://code.visualstudio.com/updates/v1_46&#34;&gt;Microsoft Visual Studio Code&lt;/a&gt;, for example, didn&amp;rsquo;t have official Arm64 builds available until August of 2020.&lt;/p&gt;
&lt;p&gt;First off is I&amp;rsquo;ve gotten back into game programming for my own amusement using &lt;a href=&#34;https://love2d.org/&#34;&gt;LÖVE&lt;/a&gt;, which was just in Manjaro repos. I added Flatpak, Snap, and AUR support, but vanishingly few of those options have Arm64 builds, leaving me to revisit my times as a build/release engineer and build things from scratch.&lt;/p&gt;
&lt;p&gt;Then, hey, why not Minecraft? These machines are still more powerful than the System76 laptop I owned over 10 years ago that I played the beta on. I found &lt;a href=&#34;https://nicholasbering.ca/raspberry-pi/2020/10/18/minecraft-64bit-rpi4/&#34;&gt;a blog post&lt;/a&gt; on getting it running (the two complications are getting lwjgl to build on the architecture and sidestep the fact that the latest versions of Minecraft use a native client to launch their platform-agnostic code). Building MultiMC following those directions worked fine, but Minecraft takes roughly 30 minutes to start and requires me to set the chunk render distance way down, so while it works in theory, it&amp;rsquo;s unplayable in practice.&lt;/p&gt;
&lt;p&gt;Then I thought I wanted to learn i3 to deal with the slowness of the Pinebook and make it more useful, and wound up choosing &lt;a href=&#34;https://swaywm.org/&#34;&gt;Sway&lt;/a&gt; and &lt;a href=&#34;https://github.com/Alexays/Waybar&#34;&gt;Waybar&lt;/a&gt;. I almost got it usable but I had the option of 1) spending months redeveloping muscle memory or 2) customizing it so far into oblivion that I am the only human on earth who understands my idiomatic setup.&lt;/p&gt;
&lt;p&gt;The usability of this environment was bad, and it mde me want something more traditional. I started getting weird and dark. I wanted to feel some nostalgia so I started building old desktop stuff. Like &lt;a href=&#34;https://www.lysator.liu.se/~marcus/amiwm.html&#34;&gt;AmiWM&lt;/a&gt; and &lt;a href=&#34;https://www.windowmaker.org/&#34;&gt;Windowmaker&lt;/a&gt; which led to me going ahead and build &lt;a href=&#34;http://www.gnustep.org/&#34;&gt;the entire GNUStep stack&lt;/a&gt; from scratch.&lt;/p&gt;
&lt;p&gt;So I&amp;rsquo;ve been spending a lot of time on a highly resource contrained device building source from scratch and fighting with dotfiles. Years ago I would abhor this stage of getting stuff up and running, but nowadays it has an almost meditative, calming quality to it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My Dingus Chromebook still works</title>
      <link>https://www.jasonscheirer.com/weblog/chromebook-still-works/</link>
      <pubDate>Mon, 10 Feb 2020 01:11:45 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/chromebook-still-works/</guid>
      <description>&lt;p&gt;So I &lt;a href=&#34;https://www.jasonscheirer.com/weblog/make-a-chromebook-a-developer-machine/&#34;&gt;bought that dang Chromebook&lt;/a&gt; over three years ago at this point and it keeps chugging on. Google has continued to ship OS updates (which I only notice as weird, arbitrary UI changes) and I can still use it to code but its main purpose now is its new life: ChromeOS runs Android apps pretty well, so I put an SD card full of movies on it and play them via VLC for my kid.&lt;/p&gt;
&lt;p&gt;All in all, the Chromebook was a good purchase, it has served many purposes, and it&amp;rsquo;s lasted a lot longer than a lot of other laptops I&amp;rsquo;ve owned (Surface Pro, looking at you).&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve got a Pinebook Pro on the way, here&amp;rsquo;s hoping that lasts as long (and is as useful).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Five Years in the Bay Area</title>
      <link>https://www.jasonscheirer.com/weblog/five-years-in-the-bay/</link>
      <pubDate>Sat, 08 Feb 2020 06:25:45 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/five-years-in-the-bay/</guid>
      <description>&lt;p&gt;February 8th marks the fifth anniversary of me moving to the Bay Area to work for tech startups. In retrospect it&amp;rsquo;s been a great experience despite it being the Bay Area.&lt;/p&gt;
&lt;h1 id=&#34;culture&#34;&gt;Culture&lt;/h1&gt;
&lt;p&gt;Living in the Inland Empire, I was an hour away from LA and all that culture, but I never bothered doing it. Living 5 miles outside of San Francisco has mean the City is a constant part of my life: restaurants, concerts, museums, lots of things I could have &lt;em&gt;theoretically&lt;/em&gt; done more of in SoCal but never bothered to.&lt;/p&gt;
&lt;h1 id=&#34;professional-development&#34;&gt;Professional Development&lt;/h1&gt;
&lt;p&gt;While the Bay Area is a terrible echo chamber full of tech magpies who cling onto the newest shiny thing, it&amp;rsquo;s also been good to be on that cutting edge and see it for what it is: it&amp;rsquo;s not a holy priesthood of people Up There going to meetups you have to &lt;em&gt;hope&lt;/em&gt; get recorded and put online a month later, it&amp;rsquo;s just a bunch of people.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been able to get back into web development after years of being out of it and the landscape has changed a lot but all the fundamentals are the same. The &lt;code&gt;Referer&lt;/code&gt; HTTP header still exists.&lt;/p&gt;
&lt;h1 id=&#34;quality-of-life&#34;&gt;Quality of Life&lt;/h1&gt;
&lt;p&gt;Quality of life is a mixed bag. It&amp;rsquo;s crowded and expensive, but there&amp;rsquo;s stuff to do. We basically throw an entire paycheck into our apartment and single car, but I can take public transit everywhere and we&amp;rsquo;re an hour away from Napa. Now that we&amp;rsquo;re parents we appreciate the suburban wasteland that is the Inland Empire as a good place for kids.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Own Your Infrastructure</title>
      <link>https://www.jasonscheirer.com/weblog/own-your-infrastructure/</link>
      <pubDate>Tue, 04 Feb 2020 16:45:45 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/own-your-infrastructure/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been sharecropping on Amazon&amp;rsquo;s server farms since I moved to the Bay Area 5 years ago. That is, every startup I&amp;rsquo;ve worked for has utilized AWS (and sometimes GCP or Azure in addition).&lt;/p&gt;
&lt;p&gt;This started out great for my career because I have not built a server machine from parts out since I was in college and I could use all my developer muscles to be operations person.&lt;/p&gt;
&lt;p&gt;However, when you&amp;rsquo;re on-call, you no longer own your uptime. Amazon will randomly flip bits. Its hosted services will go down without warning and leave you helpless but to wait &amp;ndash; you&amp;rsquo;re down until Amazon Hosted Whatever Thing decides to go back up (and the status page will lie about it being up).&lt;/p&gt;
&lt;p&gt;Now I&amp;rsquo;m at a new place where the systems team (I am back in plain old Software Engineering, hopefully out of DevOps forever) actually runs data centers. Everything is done in VMs and not containers. And it&amp;rsquo;s so refreshing. Not only can we be 100% responsible for fixing downtime, but it provides a much stabler and less abstract system to build software on top of. When the solution to a problem is &amp;ldquo;this Bash script&amp;rdquo; and not &amp;ldquo;this Byzantine pipeline only one guy understands&amp;rdquo; it makes the infrastructure easier to reason about and less prone to failure.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello, World</title>
      <link>https://www.jasonscheirer.com/weblog/hello-world/</link>
      <pubDate>Sat, 04 Jan 2020 10:18:17 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/hello-world/</guid>
      <description>&lt;p&gt;I should probably start blogging again.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python Meetup Talk - 2019-10-09</title>
      <link>https://www.jasonscheirer.com/weblog/python-meetup-sf-2019/</link>
      <pubDate>Thu, 10 Oct 2019 10:18:17 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/python-meetup-sf-2019/</guid>
      <description>&lt;p&gt;I gave a short (~10) minute talk on &lt;a href=&#34;https://github.com/jasonbot/python-meetup-2019-10-09&#34;&gt;preparing to move to microservices&lt;/a&gt; at the Python meetup in San Francisco.&lt;/p&gt;
&lt;p&gt;The main points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We all start out with a monolith&lt;/li&gt;
&lt;li&gt;The monolith never fully goes away&lt;/li&gt;
&lt;li&gt;That&amp;rsquo;s fine&lt;/li&gt;
&lt;li&gt;Scope out a new project to make your first microservice&lt;/li&gt;
&lt;li&gt;Pull out a relatively isolated piece of code in the monolith to make your next microservice&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Jumpbear: the Global Warming Bear</title>
      <link>https://www.jasonscheirer.com/weblog/jumpbear/</link>
      <pubDate>Mon, 21 May 2018 01:15:00 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/jumpbear/</guid>
      <description>&lt;p&gt;I wrote a handful of different things on my paternity leave, but one of the more interesting ones was &lt;a href=&#34;https://jasonbot.itch.io/jumpbear&#34;&gt;this small TIC-80 game&lt;/a&gt; where you play a bear.&lt;/p&gt;

&lt;iframe src=&#34;https://itch.io/embed-upload/893486?color=333333&#34; allowfullscreen=&#34;&#34; width=&#34;800&#34; height=&#34;600&#34; frameborder=&#34;0&#34;&gt;&lt;a href=&#34;https://jasonbot.itch.io/jumpbear&#34;&gt;Play Jumpbear: The Global Warming Bear on itch.io&lt;/a&gt;&lt;/iframe&gt;

</description>
    </item>
    
    <item>
      <title>Turn a Chromebook into the ULTIMATE GOLANG/PYTHON DEVELOPER MACHINE</title>
      <link>https://www.jasonscheirer.com/weblog/make-a-chromebook-a-developer-machine/</link>
      <pubDate>Mon, 26 Dec 2016 01:11:45 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/make-a-chromebook-a-developer-machine/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This is &lt;a href=&#34;https://jason.cleanstick.net/post/155005051345/turn-a-chromebook-into-the-ultimate-golangpython&#34;&gt;a recycled post from my tumblr weblog&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ha ha ha just lying the real title should be&lt;/p&gt;
&lt;h1 id=&#34;turning-a-piece-of-shit-chromebook-into-a-good-enough-development-machine-because-youre-unemployed-and-feel-like-an-ass-trying-to-justify-spending-2000-on-a-god-damned-macbook-so-you-wound-up-buying-a-chromebook-instead&#34;&gt;Turning a Piece of Shit Chromebook into a Good Enough Development Machine Because You&amp;rsquo;re Unemployed and Feel Like An Ass Trying to Justify Spending $2000 on a God Damned Macbook so You Wound Up Buying a Chromebook Instead&lt;/h1&gt;
&lt;p&gt;Anyway, I&amp;rsquo;m &lt;a href=&#34;http://www.theverge.com/2016/12/8/13887622/yik-yak-layoffs-growth-collapse&#34;&gt;unemployed because of reasons&lt;/a&gt; and figured there were better things to do with the credit limit on my credit card than spend $2000 on a Macbook, so I bought one of the highest rated Chromebooks at my &amp;ldquo;willing to pay this much&amp;rdquo; price point: &lt;a href=&#34;https://www.asus.com/us/Notebooks/ASUS_Chromebook_Flip_C100PA/&#34;&gt;the Chromebook C100P&lt;/a&gt;. The stats are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Processor: Piece of shit system-on-chip ARM thing&lt;/li&gt;
&lt;li&gt;RAM: Yes&lt;/li&gt;
&lt;li&gt;Screen: Acceptable but you can see the pixels&lt;/li&gt;
&lt;li&gt;Keyboard: Ugh&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Considering it&amp;rsquo;s still an order of magnitude better than &lt;a href=&#34;http://www.macworld.com/article/2901437/macbook/ode-to-the-12-inch-powerbook-g4-apples-first-desktop-quality-laptop.html&#34;&gt;the first good laptop I owned&lt;/a&gt;, it&amp;rsquo;s a pretty good buy at $200 and some change.&lt;/p&gt;
&lt;p&gt;So Chrome OS is nice but I want to introduce security holes to the device, so &lt;em&gt;LET&amp;rsquo;S INSTALL PLAIN OLD LINUX&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The first thing to do is follow the instructions to install &lt;a href=&#34;https://github.com/dnschneid/crouton/blob/master/README.md&#34;&gt;crouton via the instructions&lt;/a&gt;. You get the option of what flavor of Linux to install, after 8 hours of experimenting with Debians and Ubuntus I found the one with the best support is Trusty. So do this after downloading crouton in Developer Mode:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo sh crouton -r trusty -t xfce,touch,xiwi
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;ldquo;But I like Unity,&amp;rdquo; you say. I respond with &amp;ldquo;NO YOU DON&amp;rsquo;T IMAGINARY IDIOT NO YOU DON&amp;rsquo;T NOBODY LIKES UNITY UNLESS THEY WORK FOR CANONICAL.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;But that is a very old Ubuntu,&amp;rdquo; you say. Welp, the only big thing that will really matter is you&amp;rsquo;ll have to load up an older &lt;code&gt;.tmux.conf&lt;/code&gt; with the older mouse mode switches because that&amp;rsquo;s all I found was missing. Everything else we will download from third parties.&lt;/p&gt;
&lt;p&gt;Also follow the directions to install the Chrome extension in the host ChromeOS browser, it&amp;rsquo;s helpful.&lt;/p&gt;
&lt;h2 id=&#34;golang&#34;&gt;Golang&lt;/h2&gt;
&lt;p&gt;Luckily the dudes at the Go project are charitable and offer an ARM version of the Golang toolchain. Go get a &lt;code&gt;-armv6l&lt;/code&gt; version of Go &lt;a href=&#34;https://golang.org/dl/&#34;&gt;from the downloads page&lt;/a&gt; and decompress it in your home dir. If you use &lt;code&gt;~/workspace&lt;/code&gt; as your Go home like I do, add this junk to your &lt;code&gt;.bashrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#19177c&#34;&gt;GOROOT&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;~/go
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#19177c&#34;&gt;GOPATH&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;~/workspace
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Okay cool Go is ready to go. That last sentence&amp;rsquo;s wording was not intentional nor was it a joke, get over yourself.&lt;/p&gt;
&lt;h2 id=&#34;python&#34;&gt;Python&lt;/h2&gt;
&lt;p&gt;Trusty uses an older version of Python. Continuum&amp;rsquo;s got it. &lt;a href=&#34;https://repo.continuum.io/miniconda/&#34;&gt;Get an &lt;code&gt;armv6l&lt;/code&gt; installer of Miniconda&lt;/a&gt; and install it in your home dir. It&amp;rsquo;ll even add itself to your &lt;code&gt;$PATH&lt;/code&gt;. Python&amp;rsquo;s covered.&lt;/p&gt;
&lt;h2 id=&#34;vs-code-the-unlikeliest-ide&#34;&gt;VS Code, the unlikeliest IDE&lt;/h2&gt;
&lt;p&gt;For some inexplicable reason &lt;a href=&#34;http://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt; is the best IDE for writing Go. It&amp;rsquo;s an indisputable fact and goes to further prove that we live in a cruel, arbitrary universe that often makes no sense. &lt;a href=&#34;https://code.headmelted.com/&#34;&gt;This headmelted dude has you covered&lt;/a&gt; for builds of VS Code for piece of shit ARM processors. Ignore his instructions, open a terminal in your xfce session and do this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget https://code.headmelted.com/installers/apt.sh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo sh ./apt.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;now VS Code is installed. You can code in these two arbitrary languages I have chosen as my favorites on this awful hardware, and to be honest it&amp;rsquo;s minimally painful (minus building huge Golang projects).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What I Like About My New Job</title>
      <link>https://www.jasonscheirer.com/weblog/things-i-like-about-my-new-job/</link>
      <pubDate>Mon, 11 May 2015 19:55:10 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/things-i-like-about-my-new-job/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This is &lt;a href=&#34;https://jason.cleanstick.net/post/118755320730/things-i-like-about-my-new-job&#34;&gt;a recycled post from my tumblr weblog&lt;/a&gt;. I&amp;rsquo;ve since had three other jobs, but a lot of what I like still rings true 5 years later in 2020.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Please note I am contractually prohibited from saying what I &lt;em&gt;don&amp;rsquo;t&lt;/em&gt; like about most of my prior employers so don&amp;rsquo;t expect any negative posts.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve gone from developer at a large software corporation in the suburbs of Southern California to being a developer at a startup in SoMa in San Francisco. I&amp;rsquo;ve been here about three months now and this is a list of (some) of the things I like about my new job.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Continuous Integration&lt;/strong&gt;: This is something that I took for granted almost a decade ago at a former employer and haven&amp;rsquo;t had since. When I make a change and push it to GitHub, a set of tests automatically spin up and I can&amp;rsquo;t merge to master until those tests pass. This is good, I have a self-service QA agent where I can iteratively work on an issue and finally do a PR when it&amp;rsquo;s ready.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Actual Decent Test Coverage&lt;/strong&gt;: There&amp;rsquo;s a test suite built in to the code, not saved as an auxiliary repository. When the codebase has a decent set of tests it helps you make sure your changes don&amp;rsquo;t break anything, and it also works to make you feel guilty if you aren&amp;rsquo;t keeping the coverage levels up with your new code, creating a virtuous cycle of test writing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Code Reviews that Actually Happen&lt;/strong&gt;: The tooling for deploys is set up so that no code can be merged into the master branch until it gets a code review/thumbs up by at least one other non-author developer. Code can&amp;rsquo;t be checked in, period, unless it&amp;rsquo;s been hit by at least two sets of eyes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You Can Ship a Feature Same-Day&lt;/strong&gt;: Assuming the feature is small enough, you could sit down at 9:00 AM, implement a feature, write tests, get it code reviewed and have the code shipping by 5:00 PM to real live clients. It was frustrating waiting 16+ months to ship features/fixes at the last place, it&amp;rsquo;s refreshing to get immediate feedback on my work.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The CTO/Cofounder Still Writes Code&lt;/strong&gt;: Certainly he doesn&amp;rsquo;t write the same volume of code he did when there were 4 developers, but the fact that the CTO still finds time to write code/add features to the product shows upper management actually cares about what&amp;rsquo;s under the hood of the product.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;No Silos&lt;/strong&gt;: There are functional teams, and there are specialists, but for the most part everyone works transparently. Meeting notes from each meeting go to an email alias everyone is subscribed to, all GitHub repos are accessible by every engineer, if you want to know how something works all you have to do is look.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Up-to-Date Documents&lt;/strong&gt;: We use a Wiki and we&amp;rsquo;ve got people engaged enough and motivated enough to tend to it like a garden. No 5-year-old Word documents hiding as sharepoint attachments that require you to ask 5 people to see what&amp;rsquo;s no longer true/correct. If anyone finds a set of instructions confusing on a page, they go in and change it so they&amp;rsquo;re less confusing/more correct for the next person, which leads to the next point:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If Something&amp;rsquo;s Broken, You Don&amp;rsquo;t Need Permission to Fix It&lt;/strong&gt;: We get used to little and big annoyances in every software product we use. When I first started I was a little timid about suggesting fixes, figuring things were the way they were for a reason. I&amp;rsquo;m learning now that I can fix annoyances with impunity—nobody gets mad if you make the software better, even if it&amp;rsquo;s in code you wouldn&amp;rsquo;t normally be responsible for. They&amp;rsquo;re thankful, in fact. We&amp;rsquo;ve just begun to formalize this in &amp;lsquo;Spring Cleaning:&amp;rsquo; one day a month we just work on back burner/wish list items. And it&amp;rsquo;s fun.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If You Want to Do More, Do More&lt;/strong&gt;: This is fairly straightforward: if you want to learn something new, go ahead and do it. If you want to be responsible for X, start working on X. No need for formal requests or transfers. As a riff on the above, if you want to do it, do it. This is a fantastic way to work and makes it possible to do professional development in all sorts of directions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Public Transportation&lt;/strong&gt;: This is more a living in the Bay Area thing. In Redlands my strategy for making a painless commute was to live as close as possible to work. Now my strategy is to just live near a train station. My commute from near SFO up to the Caltrain station in SF is about 25 minutes most mornings. In that time I can read or use my laptop, rather than feather my clutch in stop-and-go traffic and scream at other drivers. It&amp;rsquo;s nice.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Officially Sanctioned Social Events&lt;/strong&gt;: Hearsay Social puts on little social events all the time. It&amp;rsquo;s the best way to learn what other people are up to and to form bonds outside of meetings and email. It&amp;rsquo;s really nice getting to know your coworkers in this manner and makes things smoother while actually working together.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Unofficially Sanctioned Social Events&lt;/strong&gt;: A lot of people have common interests and like each other enough to organize small group activities. Some people do rock climbing or go to amusement parks or do a weekly board game night. It&amp;rsquo;s pretty great.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The People&lt;/strong&gt;: As a San Francisco tech startup, the people skew a little younger than I&amp;rsquo;m used to, but everyone is smart and reasonable and easy to talk to. There&amp;rsquo;s no &amp;ldquo;watch out for that guy&amp;rdquo; warnings because there are no &amp;ldquo;that guy&amp;quot;s.&lt;/p&gt;
&lt;p&gt;All in all I&amp;rsquo;m glad I came up and I&amp;rsquo;m happy with Hearsay Social.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Stupid simple API reference for bottle.py web services</title>
      <link>https://www.jasonscheirer.com/weblog/bottle-introspection/</link>
      <pubDate>Sun, 25 Mar 2012 22:11:11 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/bottle-introspection/</guid>
      <description>&lt;p&gt;I have a stupid json-only REST API I implemented in bottle.py. This introspects the default app, gives a dumb readout that should act as an adequate reference for discovery:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f&#34;&gt;@bottle&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;route(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;index&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    bottle&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;response&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;content_type &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;=== API REFERENCE ===&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;join(x[&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;rule&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      bottle&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;app()&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;routes))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; is not so bad</title>
      <link>https://www.jasonscheirer.com/weblog/cpp-is-ok/</link>
      <pubDate>Mon, 20 Sep 2010 16:45:45 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/cpp-is-ok/</guid>
      <description>&lt;p&gt;For as much shit as I like to talk about C++, I sure can get a lot done quite efficiently in it.&lt;/p&gt;
&lt;p&gt;I read an interview with Bjarne a while back and he said C++’s most important feature was destructors. After thinking about it, yeah, they are pretty awesome and I’ve been using the &lt;code&gt;with&lt;/code&gt; statement for the same tightly scoped data lifetime in Python.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>I don’t really use OSX anymore</title>
      <link>https://www.jasonscheirer.com/weblog/osx-less-and-less/</link>
      <pubDate>Tue, 09 Feb 2010 01:15:00 -0800</pubDate>
      
      <guid>https://www.jasonscheirer.com/weblog/osx-less-and-less/</guid>
      <description>&lt;p&gt;I have two desktop systems, side-by-side: an Intel Mac Mini and an Intel 21&amp;quot; iMac. The Mini runs Leopard and the iMac runs Ubuntu Karmic Koala, and I find myself completely satisfied with the Linux desktop, and switch back to OSX as an auxiliary rather than as my primary.&lt;/p&gt;
&lt;p&gt;I started on Debian back in 1999. I wanted to get into Linux, but both Red Hat and SuSE were a little hard to get going for beginners, and the packages supplied were always a weird grab bag of old and new. I remember KDE 2 was awesome, but I don’t remember much past that. A friend and coworker introduced me to Debian and I was amazed at how much more intuitive it was to use. It didn’t leave me out in the cold to fend for myself, but it automated enough of the low-levels of Linux that it made the rest seem approachable. And its default configuration was super lightweight and not memory hungry at all. I was sold.&lt;/p&gt;
&lt;p&gt;I started using Apple hardware again six years ago, on my 21st birthday. Right at the “Apple Renaissance” for developers I bought myself a 12&amp;quot; Aluminum Powerbook and it got me through my last two years of college and the year and a half after it of doing research and my first full-time job. It was probably the most innovative computer I’d ever owned to that point – it had a Mini-DVI port that I could use to have a dual headed system (which was the coolest thing ever) and Bluetooth, which meant I could sync my contacts and calendars with my Sony Ericsson cell phone. I can’t tell you how many times I made it to class only because my phone beeped at me 5 minutes before lecture started. It was self contained: I could do all my C++/Python/Java work for CS courses and contract work without installing anything, it had word processors and diagramming software that handled international text for my linguistics courses, it was a perfect computing device for me at the time.&lt;/p&gt;
&lt;p&gt;My love affair continued because of OSX desktop software – it was a pretty face with usable apps on a standard UNIX system: cron and friends were all there for the using. It even had some new technologies that were really exciting: I still consider MDNS-SD one of the greatest consumer networking advancements ever. I could install software in an apt-like way with fink or ports. It always felt like there was a little friction there with a near-parallel UNIX system on a UNIX system when I ran these utilities, but it was good enough.&lt;/p&gt;
&lt;p&gt;As OSX aged, it began to diverge from the standard (notably, launchd made me take notice) and felt less open. What was once a pretty face on a standard UNIX became a slightly prettier face on an increasingly non-standard operating system. I had to re-learn the same things over and over from release to release as they began to deprecate the old tools and methods for doing things. Again, the notable example here is launchd, which replaced &lt;code&gt;init.d&lt;/code&gt; and &lt;code&gt;cron&lt;/code&gt;. While the Quartz window manager and rendering seemed great in 2001, the advancements in X like Cairo and Compiz have caught up feature-and-performance-wise and are open and cross-platform. Apple’s slowly adding not-so-open utilities to scrape up edge cases like GrandCentral, which is kind of an indicator that the desktop environment itself is pretty much stagnant and Apple’s innovation is going to go into other semi-proprietary technologies on top of their existing stack.&lt;/p&gt;
&lt;p&gt;Installing software is obviously much easier in OSX (discounting apt): I drag an icon to /Applications. If a title isn’t in apt, or is outdated in the Ubuntu repositories, it’s a pain to get going. But more and more apps are providing .debs (with daily builds!), or better yet, are showing up in the Ubuntu PPAs and this is becoming less of an issue. I’m also learning to live with 6 month old software: it’ll get in when it gets in, I’ll live with the features it has now. Usually the bleeding edge has APIs that are so in flux that it makes absolutely no sense to develop against them.&lt;/p&gt;
&lt;p&gt;So I find myself on Ubuntu. The UI is familiar and at this point it’s easier to test and deploy apps onto a Debian server using the system that is more Debian-like than the one that is not. It’s fast, it’s responsive, and while it can be idiomatic in its own right for a developer who mostly uses vi, Python and C, it’s great. I can’t really heap too much praise or criticism on it, it just is there and gets out of the way. Ubuntu sucked for stability in 2006, but it works well now. It lets me get stuff done. The new “features” like Ubuntu One that are being constantly tacked on stay out of the way and can even be uninstalled. I had to install a third-party hack to get rid of the Mobile Me account thing in the Finder.&lt;/p&gt;
&lt;p&gt;This isn’t to say I’ve had a falling out with the Mac: just having used it for 6 years now, it seems a lot less exciting and a lot more of a hassle to use than it used to. I’m slowly using it less and less and while I will likely always have OSX and Windows as a desktop install somewhere, it won’t necessarily be my go-to platform to get things done. So from a highly subjective point of view, I seem to be unconsciously preferring Linux to OSX to do my daily computing chores, and the trend seems to be strengthening every day.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
